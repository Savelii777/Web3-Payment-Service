{"ast":null,"code":"import _defineProperty from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineProperties, fromTwos, getBigInt, mask, toTwos } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    _defineProperty(this, \"size\", void 0);\n    _defineProperty(this, \"signed\", void 0);\n    defineProperties(this, {\n      size,\n      signed\n    }, {\n      size: \"number\",\n      signed: \"boolean\"\n    });\n  }\n  defaultValue() {\n    return 0;\n  }\n  encode(writer, _value) {\n    let value = getBigInt(Typed.dereference(_value, this.type));\n    // Check bounds are safe for encoding\n    let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n    if (this.signed) {\n      let bounds = mask(maxUintValue, this.size * 8 - 1);\n      if (value > bounds || value < -(bounds + BN_1)) {\n        this._throwError(\"value out-of-bounds\", _value);\n      }\n      value = toTwos(value, 8 * WordSize);\n    } else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n      this._throwError(\"value out-of-bounds\", _value);\n    }\n    return writer.writeValue(value);\n  }\n  decode(reader) {\n    let value = mask(reader.readValue(), this.size * 8);\n    if (this.signed) {\n      value = fromTwos(value, this.size * 8);\n    }\n    return value;\n  }\n}","map":{"version":3,"sources":["../../../src.ts/abi/coders/number.ts"],"names":[],"mappings":";AAAA,SACI,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,QAChD,sBAAsB;AAE7B,SAAS,KAAK,QAAQ,aAAa;AACnC,SAAS,KAAK,EAAE,QAAQ,QAAQ,qBAAqB;AAOrD,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AACtB,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AACtB,MAAM,cAAc,GAAG,MAAM,CAAC,oEAAoE,CAAC;AAEnG;;AAEG;AACH,OAAM,MAAO,WAAY,SAAQ,KAAK,CAAA;EAIlC,WAAA,CAAY,IAAY,EAAE,MAAe,EAAE,SAAiB,EAAA;IACxD,MAAM,IAAI,GAAI,CAAC,MAAM,GAAG,KAAK,GAAE,MAAM,IAAK,IAAI,GAAG,CAAG;IACpD,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;IAAC,eAAA;IAAA,eAAA;IAEpC,gBAAgB,CAAc,IAAI,EAAE;MAAE,IAAI;MAAE;IAAM,CAAE,EAAE;MAAE,IAAI,EAAE,QAAQ;MAAE,MAAM,EAAE;IAAS,CAAE,CAAC;EAChG;EAEA,YAAY,CAAA,EAAA;IACR,OAAO,CAAC;EACZ;EAEA,MAAM,CAAC,MAAc,EAAE,MAA4B,EAAA;IAC/C,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAE3D;IACA,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,QAAQ,GAAG,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,EAAG,IAAI,CAAC,IAAI,GAAG,CAAC,GAAI,CAAC,CAAC;MACpD,IAAI,KAAK,GAAG,MAAM,IAAI,KAAK,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC,EAAE;QAC5C,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,MAAM,CAAC;MAClD;MACD,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,QAAQ,CAAC;KACtC,MAAM,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE;MAClE,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,MAAM,CAAC;IAClD;IAED,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;EACnC;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA,CAAE,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAEnD,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IACzC;IAED,OAAO,KAAK;EAChB;AACH","sourceRoot":"","sourcesContent":["import { defineProperties, fromTwos, getBigInt, mask, toTwos } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n    size;\n    signed;\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        defineProperties(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = getBigInt(Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n        if (this.signed) {\n            let bounds = mask(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n        }\n        else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = mask(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}