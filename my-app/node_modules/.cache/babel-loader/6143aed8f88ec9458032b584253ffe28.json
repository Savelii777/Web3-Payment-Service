{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexports.default = u64;","map":{"version":3,"sources":["src/_u64.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map"]},"metadata":{},"sourceType":"script"}