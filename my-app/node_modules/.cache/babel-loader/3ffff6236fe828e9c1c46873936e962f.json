{"ast":null,"code":"import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n  /**\n   *  Create a new wallet for the private %%key%%, optionally connected\n   *  to %%provider%%.\n   */\n  constructor(key, provider) {\n    if (typeof key === \"string\" && !key.startsWith(\"0x\")) {\n      key = \"0x\" + key;\n    }\n    let signingKey = typeof key === \"string\" ? new SigningKey(key) : key;\n    super(signingKey, provider);\n  }\n  connect(provider) {\n    return new Wallet(this.signingKey, provider);\n  }\n  /**\n   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n   *  %%password%%.\n   *\n   *  If %%progressCallback%% is specified, it will receive periodic\n   *  updates as the encryption process progreses.\n   */\n  async encrypt(password, progressCallback) {\n    const account = {\n      address: this.address,\n      privateKey: this.privateKey\n    };\n    return await encryptKeystoreJson(account, password, {\n      progressCallback\n    });\n  }\n  /**\n   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n   *  %%password%%.\n   *\n   *  It is preferred to use the [async version](encrypt) instead,\n   *  which allows a [[ProgressCallback]] to keep the user informed.\n   *\n   *  This method will block the event loop (freezing all UI) until\n   *  it is complete, which may be a non-trivial duration.\n   */\n  encryptSync(password) {\n    const account = {\n      address: this.address,\n      privateKey: this.privateKey\n    };\n    return encryptKeystoreJsonSync(account, password);\n  }\n  static #fromAccount(account) {\n    assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n      const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n      const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n      if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n        return wallet;\n      }\n      console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n    }\n    const wallet = new Wallet(account.privateKey);\n    assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n    return wallet;\n  }\n  /**\n   *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n   *  with %%password%%.\n   *\n   *  If %%progress%% is provided, it is called periodically during\n   *  decryption so that any UI can be updated.\n   */\n  static async fromEncryptedJson(json, password, progress) {\n    let account = null;\n    if (isKeystoreJson(json)) {\n      account = await decryptKeystoreJson(json, password, progress);\n    } else if (isCrowdsaleJson(json)) {\n      if (progress) {\n        progress(0);\n        await stall(0);\n      }\n      account = decryptCrowdsaleJson(json, password);\n      if (progress) {\n        progress(1);\n        await stall(0);\n      }\n    }\n    return Wallet.#fromAccount(account);\n  }\n  /**\n   *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n   *\n   *  The [[fromEncryptedJson]] method is preferred, as this method\n   *  will lock up and freeze the UI during decryption, which may take\n   *  some time.\n   */\n  static fromEncryptedJsonSync(json, password) {\n    let account = null;\n    if (isKeystoreJson(json)) {\n      account = decryptKeystoreJsonSync(json, password);\n    } else if (isCrowdsaleJson(json)) {\n      account = decryptCrowdsaleJson(json, password);\n    } else {\n      assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    }\n    return Wallet.#fromAccount(account);\n  }\n  /**\n   *  Creates a new random [[HDNodeWallet]] using the available\n   *  [cryptographic random source](randomBytes).\n   *\n   *  If there is no crytographic random source, this will throw.\n   */\n  static createRandom(provider) {\n    const wallet = HDNodeWallet.createRandom();\n    if (provider) {\n      return wallet.connect(provider);\n    }\n    return wallet;\n  }\n  /**\n   *  Creates a [[HDNodeWallet]] for %%phrase%%.\n   */\n  static fromPhrase(phrase, provider) {\n    const wallet = HDNodeWallet.fromPhrase(phrase);\n    if (provider) {\n      return wallet.connect(provider);\n    }\n    return wallet;\n  }\n}","map":{"version":3,"sources":["../../src.ts/wallet/wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nfunction stall(duration) {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n    /**\n     *  Create a new wallet for the private %%key%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key, provider) {\n        if (typeof (key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n        let signingKey = (typeof (key) === \"string\") ? new SigningKey(key) : key;\n        super(signingKey, provider);\n    }\n    connect(provider) {\n        return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n    static #fromAccount(account) {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n        const wallet = new Wallet(account.privateKey);\n        assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n        return wallet;\n    }\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json, password, progress) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n        }\n        else if (isCrowdsaleJson(json)) {\n            if (progress) {\n                progress(0);\n                await stall(0);\n            }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) {\n                progress(1);\n                await stall(0);\n            }\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json, password) {\n        let account = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        }\n        else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        }\n        else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n        return Wallet.#fromAccount(account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the available\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider) {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase, provider) {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n}\n//# sourceMappingURL=wallet.js.map"]},"metadata":{},"sourceType":"module"}