{"ast":null,"code":"/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\nimport { keccak256 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, getBytesCopy, hexlify, zeroPadBytes, zeroPadValue, isHexString, defineProperties, assertArgument, toBeHex, assert } from \"../utils/index.js\";\nimport { AbiCoder } from \"./abi-coder.js\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder.js\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, Fragment, FunctionFragment, ParamType } from \"./fragments.js\";\nimport { Typed } from \"./typed.js\";\nexport { checkResultErrors, Result };\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */\nexport class LogDescription {\n  /**\n   *  The matching fragment for the ``topic0``.\n   */\n  fragment;\n  /**\n   *  The name of the Event.\n   */\n  name;\n  /**\n   *  The full Event signature.\n   */\n  signature;\n  /**\n   *  The topic hash for the Event.\n   */\n  topic;\n  /**\n   *  The arguments passed into the Event with ``emit``.\n   */\n  args;\n  /**\n   *  @_ignore:\n   */\n  constructor(fragment, topic, args) {\n    const name = fragment.name,\n      signature = fragment.format();\n    defineProperties(this, {\n      fragment,\n      name,\n      signature,\n      topic,\n      args\n    });\n  }\n}\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */\nexport class TransactionDescription {\n  /**\n   *  The matching fragment from the transaction ``data``.\n   */\n  fragment;\n  /**\n   *  The name of the Function from the transaction ``data``.\n   */\n  name;\n  /**\n   *  The arguments passed to the Function from the transaction ``data``.\n   */\n  args;\n  /**\n   *  The full Function signature from the transaction ``data``.\n   */\n  signature;\n  /**\n   *  The selector for the Function from the transaction ``data``.\n   */\n  selector;\n  /**\n   *  The ``value`` (in wei) from the transaction.\n   */\n  value;\n  /**\n   *  @_ignore:\n   */\n  constructor(fragment, selector, args, value) {\n    const name = fragment.name,\n      signature = fragment.format();\n    defineProperties(this, {\n      fragment,\n      name,\n      args,\n      signature,\n      selector,\n      value\n    });\n  }\n}\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */\nexport class ErrorDescription {\n  /**\n   *  The matching fragment.\n   */\n  fragment;\n  /**\n   *  The name of the Error.\n   */\n  name;\n  /**\n   *  The arguments passed to the Error with ``revert``.\n   */\n  args;\n  /**\n   *  The full Error signature.\n   */\n  signature;\n  /**\n   *  The selector for the Error.\n   */\n  selector;\n  /**\n   *  @_ignore:\n   */\n  constructor(fragment, selector, args) {\n    const name = fragment.name,\n      signature = fragment.format();\n    defineProperties(this, {\n      fragment,\n      name,\n      args,\n      signature,\n      selector\n    });\n  }\n}\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */\nexport class Indexed {\n  /**\n   *  The ``keccak256`` of the value logged.\n   */\n  hash;\n  /**\n   *  @_ignore:\n   */\n  _isIndexed;\n  /**\n   *  Returns ``true`` if %%value%% is an **Indexed**.\n   *\n   *  This provides a Type Guard for property access.\n   */\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(hash) {\n    defineProperties(this, {\n      hash,\n      _isIndexed: true\n    });\n  }\n}\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n  \"0\": \"generic panic\",\n  \"1\": \"assert(false)\",\n  \"17\": \"arithmetic overflow\",\n  \"18\": \"division or modulo by zero\",\n  \"33\": \"enum overflow\",\n  \"34\": \"invalid encoded storage byte array accessed\",\n  \"49\": \"out-of-bounds array access; popping on an empty array\",\n  \"50\": \"out-of-bounds access of an array or bytesN\",\n  \"65\": \"out of memory\",\n  \"81\": \"uninitialized function\"\n};\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: message => {\n      return `reverted with reason string ${JSON.stringify(message)}`;\n    }\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"],\n    reason: code => {\n      let reason = \"unknown panic code\";\n      if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n        reason = PanicReasons[code.toString()];\n      }\n      return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n    }\n  }\n};\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n  /**\n   *  All the Contract ABI members (i.e. methods, events, errors, etc).\n   */\n  fragments;\n  /**\n   *  The Contract constructor.\n   */\n  deploy;\n  /**\n   *  The Fallback method, if any.\n   */\n  fallback;\n  /**\n   *  If receiving ether is supported.\n   */\n  receive;\n  #errors;\n  #events;\n  #functions;\n  //    #structs: Map<string, StructFragment>;\n  #abiCoder;\n  /**\n   *  Create a new Interface for the %%fragments%%.\n   */\n  constructor(fragments) {\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    this.#functions = new Map();\n    this.#errors = new Map();\n    this.#events = new Map();\n    //        this.#structs = new Map();\n    const frags = [];\n    for (const a of abi) {\n      try {\n        frags.push(Fragment.from(a));\n      } catch (error) {\n        console.log(\"EE\", error);\n      }\n    }\n    defineProperties(this, {\n      fragments: Object.freeze(frags)\n    });\n    let fallback = null;\n    let receive = false;\n    this.#abiCoder = this.getAbiCoder();\n    // Add all fragments by their signature\n    this.fragments.forEach((fragment, index) => {\n      let bucket;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            console.log(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineProperties(this, {\n            deploy: fragment\n          });\n          return;\n        case \"fallback\":\n          if (fragment.inputs.length === 0) {\n            receive = true;\n          } else {\n            assertArgument(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n            fallback = fragment;\n            receive = fallback.payable;\n          }\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.#functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.#events;\n          break;\n        case \"error\":\n          bucket = this.#errors;\n          break;\n        default:\n          return;\n      }\n      // Two identical entries; ignore it\n      const signature = fragment.format();\n      if (bucket.has(signature)) {\n        return;\n      }\n      bucket.set(signature, fragment);\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineProperties(this, {\n        deploy: ConstructorFragment.from(\"constructor()\")\n      });\n    }\n    defineProperties(this, {\n      fallback,\n      receive\n    });\n  }\n  /**\n   *  Returns the entire Human-Readable ABI, as an array of\n   *  signatures, optionally as %%minimal%% strings, which\n   *  removes parameter names and unneceesary spaces.\n   */\n  format(minimal) {\n    const format = minimal ? \"minimal\" : \"full\";\n    const abi = this.fragments.map(f => f.format(format));\n    return abi;\n  }\n  /**\n   *  Return the JSON-encoded ABI. This is the format Solidiy\n   *  returns.\n   */\n  formatJson() {\n    const abi = this.fragments.map(f => f.format(\"json\"));\n    // We need to re-bundle the JSON fragments a bit\n    return JSON.stringify(abi.map(j => JSON.parse(j)));\n  }\n  /**\n   *  The ABI coder that will be used to encode and decode binary\n   *  data.\n   */\n  getAbiCoder() {\n    return AbiCoder.defaultAbiCoder();\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  #getFunction(key, values, forceUnique) {\n    // Selector\n    if (isHexString(key)) {\n      const selector = key.toLowerCase();\n      for (const fragment of this.#functions.values()) {\n        if (selector === fragment.selector) {\n          return fragment;\n        }\n      }\n      return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n      const matching = [];\n      for (const [name, fragment] of this.#functions) {\n        if (name.split(\"(\" /* fix:) */)[0] === key) {\n          matching.push(fragment);\n        }\n      }\n      if (values) {\n        const lastValue = values.length > 0 ? values[values.length - 1] : null;\n        let valueLength = values.length;\n        let allowOptions = true;\n        if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n          allowOptions = false;\n          valueLength--;\n        }\n        // Remove all matches that don't have a compatible length. The args\n        // may contain an overrides, so the match may have n or n - 1 parameters\n        for (let i = matching.length - 1; i >= 0; i--) {\n          const inputs = matching[i].inputs.length;\n          if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n            matching.splice(i, 1);\n          }\n        }\n        // Remove all matches that don't match the Typed signature\n        for (let i = matching.length - 1; i >= 0; i--) {\n          const inputs = matching[i].inputs;\n          for (let j = 0; j < values.length; j++) {\n            // Not a typed value\n            if (!Typed.isTyped(values[j])) {\n              continue;\n            }\n            // We are past the inputs\n            if (j >= inputs.length) {\n              if (values[j].type === \"overrides\") {\n                continue;\n              }\n              matching.splice(i, 1);\n              break;\n            }\n            // Make sure the value type matches the input type\n            if (values[j].type !== inputs[j].baseType) {\n              matching.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n      // We found a single matching signature with an overrides, but the\n      // last value is something that cannot possibly be an options\n      if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n        const lastArg = values[values.length - 1];\n        if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== \"object\") {\n          matching.splice(0, 1);\n        }\n      }\n      if (matching.length === 0) {\n        return null;\n      }\n      if (matching.length > 1 && forceUnique) {\n        const matchStr = matching.map(m => JSON.stringify(m.format())).join(\", \");\n        assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\n      }\n      return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.#functions.get(FunctionFragment.from(key).format());\n    if (result) {\n      return result;\n    }\n    return null;\n  }\n  /**\n   *  Get the function name for %%key%%, which may be a function selector,\n   *  function name or function signature that belongs to the ABI.\n   */\n  getFunctionName(key) {\n    const fragment = this.#getFunction(key, null, false);\n    assertArgument(fragment, \"no matching function\", \"key\", key);\n    return fragment.name;\n  }\n  /**\n   *  Returns true if %%key%% (a function selector, function name or\n   *  function signature) is present in the ABI.\n   *\n   *  In the case of a function name, the name may be ambiguous, so\n   *  accessing the [[FunctionFragment]] may require refinement.\n   */\n  hasFunction(key) {\n    return !!this.#getFunction(key, null, false);\n  }\n  /**\n   *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n   *  selector, function name or function signature that belongs to the ABI.\n   *\n   *  If %%values%% is provided, it will use the Typed API to handle\n   *  ambiguous cases where multiple functions match by name.\n   *\n   *  If the %%key%% and %%values%% do not refine to a single function in\n   *  the ABI, this will throw.\n   */\n  getFunction(key, values) {\n    return this.#getFunction(key, values || null, true);\n  }\n  /**\n   *  Iterate over all functions, calling %%callback%%, sorted by their name.\n   */\n  forEachFunction(callback) {\n    const names = Array.from(this.#functions.keys());\n    names.sort((a, b) => a.localeCompare(b));\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      callback(this.#functions.get(name), i);\n    }\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  #getEvent(key, values, forceUnique) {\n    // EventTopic\n    if (isHexString(key)) {\n      const eventTopic = key.toLowerCase();\n      for (const fragment of this.#events.values()) {\n        if (eventTopic === fragment.topicHash) {\n          return fragment;\n        }\n      }\n      return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n      const matching = [];\n      for (const [name, fragment] of this.#events) {\n        if (name.split(\"(\" /* fix:) */)[0] === key) {\n          matching.push(fragment);\n        }\n      }\n      if (values) {\n        // Remove all matches that don't have a compatible length.\n        for (let i = matching.length - 1; i >= 0; i--) {\n          if (matching[i].inputs.length < values.length) {\n            matching.splice(i, 1);\n          }\n        }\n        // Remove all matches that don't match the Typed signature\n        for (let i = matching.length - 1; i >= 0; i--) {\n          const inputs = matching[i].inputs;\n          for (let j = 0; j < values.length; j++) {\n            // Not a typed value\n            if (!Typed.isTyped(values[j])) {\n              continue;\n            }\n            // Make sure the value type matches the input type\n            if (values[j].type !== inputs[j].baseType) {\n              matching.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n      if (matching.length === 0) {\n        return null;\n      }\n      if (matching.length > 1 && forceUnique) {\n        const matchStr = matching.map(m => JSON.stringify(m.format())).join(\", \");\n        assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\n      }\n      return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.#events.get(EventFragment.from(key).format());\n    if (result) {\n      return result;\n    }\n    return null;\n  }\n  /**\n   *  Get the event name for %%key%%, which may be a topic hash,\n   *  event name or event signature that belongs to the ABI.\n   */\n  getEventName(key) {\n    const fragment = this.#getEvent(key, null, false);\n    assertArgument(fragment, \"no matching event\", \"key\", key);\n    return fragment.name;\n  }\n  /**\n   *  Returns true if %%key%% (an event topic hash, event name or\n   *  event signature) is present in the ABI.\n   *\n   *  In the case of an event name, the name may be ambiguous, so\n   *  accessing the [[EventFragment]] may require refinement.\n   */\n  hasEvent(key) {\n    return !!this.#getEvent(key, null, false);\n  }\n  /**\n   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n   *  event name or event signature that belongs to the ABI.\n   *\n   *  If %%values%% is provided, it will use the Typed API to handle\n   *  ambiguous cases where multiple events match by name.\n   *\n   *  If the %%key%% and %%values%% do not refine to a single event in\n   *  the ABI, this will throw.\n   */\n  getEvent(key, values) {\n    return this.#getEvent(key, values || null, true);\n  }\n  /**\n   *  Iterate over all events, calling %%callback%%, sorted by their name.\n   */\n  forEachEvent(callback) {\n    const names = Array.from(this.#events.keys());\n    names.sort((a, b) => a.localeCompare(b));\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      callback(this.#events.get(name), i);\n    }\n  }\n  /**\n   *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n   *  selector, error name or error signature that belongs to the ABI.\n   *\n   *  If %%values%% is provided, it will use the Typed API to handle\n   *  ambiguous cases where multiple errors match by name.\n   *\n   *  If the %%key%% and %%values%% do not refine to a single error in\n   *  the ABI, this will throw.\n   */\n  getError(key, values) {\n    if (isHexString(key)) {\n      const selector = key.toLowerCase();\n      if (BuiltinErrors[selector]) {\n        return ErrorFragment.from(BuiltinErrors[selector].signature);\n      }\n      for (const fragment of this.#errors.values()) {\n        if (selector === fragment.selector) {\n          return fragment;\n        }\n      }\n      return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n      const matching = [];\n      for (const [name, fragment] of this.#errors) {\n        if (name.split(\"(\" /* fix:) */)[0] === key) {\n          matching.push(fragment);\n        }\n      }\n      if (matching.length === 0) {\n        if (key === \"Error\") {\n          return ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic\") {\n          return ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        return null;\n      } else if (matching.length > 1) {\n        const matchStr = matching.map(m => JSON.stringify(m.format())).join(\", \");\n        assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\n      }\n      return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    key = ErrorFragment.from(key).format();\n    if (key === \"Error(string)\") {\n      return ErrorFragment.from(\"error Error(string)\");\n    }\n    if (key === \"Panic(uint256)\") {\n      return ErrorFragment.from(\"error Panic(uint256)\");\n    }\n    const result = this.#errors.get(key);\n    if (result) {\n      return result;\n    }\n    return null;\n  }\n  /**\n   *  Iterate over all errors, calling %%callback%%, sorted by their name.\n   */\n  forEachError(callback) {\n    const names = Array.from(this.#errors.keys());\n    names.sort((a, b) => a.localeCompare(b));\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      callback(this.#errors.get(name), i);\n    }\n  }\n  // Get the 4-byte selector used by Solidity to identify a function\n  /*\n  getSelector(fragment: ErrorFragment | FunctionFragment): string {\n  if (typeof(fragment) === \"string\") {\n      const matches: Array<Fragment> = [ ];\n       try { matches.push(this.getFunction(fragment)); } catch (error) { }\n      try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n       if (matches.length === 0) {\n          logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n      } else if (matches.length > 1) {\n          logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n      }\n       fragment = matches[0];\n  }\n   return dataSlice(id(fragment.format()), 0, 4);\n  }\n  */\n  // Get the 32-byte topic hash used by Solidity to identify an event\n  /*\n  getEventTopic(fragment: EventFragment): string {\n      //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n      return id(fragment.format());\n  }\n  */\n  _decodeParams(params, data) {\n    return this.#abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this.#abiCoder.encode(params, values);\n  }\n  /**\n   *  Encodes a ``tx.data`` object for deploying the Contract with\n   *  the %%values%% as the constructor arguments.\n   */\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  /**\n   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n   *  specified error (see [[getError]] for valid values for\n   *  %%key%%).\n   *\n   *  Most developers should prefer the [[parseCallResult]] method instead,\n   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n   *  corresponding error.\n   */\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      const f = this.getError(fragment);\n      assertArgument(f, \"unknown error\", \"fragment\", fragment);\n      fragment = f;\n    }\n    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n    return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n  }\n  /**\n   *  Encodes the transaction revert data for a call result that\n   *  reverted from the the Contract with the sepcified %%error%%\n   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n   *\n   *  This is generally not used by most developers, unless trying to mock\n   *  a result from a Contract.\n   */\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getError(fragment);\n      assertArgument(f, \"unknown error\", \"fragment\", fragment);\n      fragment = f;\n    }\n    return concat([fragment.selector, this._encodeParams(fragment.inputs, values || [])]);\n  }\n  /**\n   *  Decodes the %%data%% from a transaction ``tx.data`` for\n   *  the function specified (see [[getFunction]] for valid values\n   *  for %%fragment%%).\n   *\n   *  Most developers should prefer the [[parseTransaction]] method\n   *  instead, which will automatically detect the fragment.\n   */\n  decodeFunctionData(fragment, data) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      assertArgument(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n    return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n  }\n  /**\n   *  Encodes the ``tx.data`` for a transaction that calls the function\n   *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n   *  the %%values%%.\n   */\n  encodeFunctionData(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      assertArgument(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    return concat([fragment.selector, this._encodeParams(fragment.inputs, values || [])]);\n  }\n  /**\n   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n   *  specified function (see [[getFunction]] for valid values for\n   *  %%key%%).\n   *\n   *  Most developers should prefer the [[parseCallResult]] method instead,\n   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n   *  corresponding error.\n   */\n  decodeFunctionResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      assertArgument(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    let message = \"invalid length for result data\";\n    const bytes = getBytesCopy(data);\n    if (bytes.length % 32 === 0) {\n      try {\n        return this.#abiCoder.decode(fragment.outputs, bytes);\n      } catch (error) {\n        message = \"could not decode result data\";\n      }\n    }\n    // Call returned data with no error, but the data is junk\n    assert(false, message, \"BAD_DATA\", {\n      value: hexlify(bytes),\n      info: {\n        method: fragment.name,\n        signature: fragment.format()\n      }\n    });\n  }\n  makeError(_data, tx) {\n    const data = getBytes(_data, \"data\");\n    const error = AbiCoder.getBuiltinCallException(\"call\", tx, data);\n    // Not a built-in error; try finding a custom error\n    const customPrefix = \"execution reverted (unknown custom error)\";\n    if (error.message.startsWith(customPrefix)) {\n      const selector = hexlify(data.slice(0, 4));\n      const ef = this.getError(selector);\n      if (ef) {\n        try {\n          const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n          error.revert = {\n            name: ef.name,\n            signature: ef.format(),\n            args\n          };\n          error.reason = error.revert.signature;\n          error.message = `execution reverted: ${error.reason}`;\n        } catch (e) {\n          error.message = `execution reverted (coult not decode custom error)`;\n        }\n      }\n    }\n    // Add the invocation, if available\n    const parsed = this.parseTransaction(tx);\n    if (parsed) {\n      error.invocation = {\n        method: parsed.name,\n        signature: parsed.signature,\n        args: parsed.args\n      };\n    }\n    return error;\n  }\n  /**\n   *  Encodes the result data (e.g. from an ``eth_call``) for the\n   *  specified function (see [[getFunction]] for valid values\n   *  for %%fragment%%) with %%values%%.\n   *\n   *  This is generally not used by most developers, unless trying to mock\n   *  a result from a Contract.\n   */\n  encodeFunctionResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      assertArgument(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));\n  }\n  /*\n      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n          const promises: Array<Promise<>> = [ ];\n          const process = function(type: ParamType, value: any): any {\n              if (type.baseType === \"array\") {\n                  return descend(type.child\n              }\n              if (type. === \"address\") {\n              }\n          };\n  \n          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n              if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n              \n          };\n  \n          const result: Array<any> = [ ];\n          values.forEach((value, index) => {\n              if (value == null) {\n                  topics.push(null);\n              } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                  logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n              } else if (Array.isArray(value)) {\n                  topics.push(value.map((value) => encodeTopic(param, value)));\n              } else {\n                  topics.push(encodeTopic(param, value));\n              }\n          });\n      }\n  */\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getEvent(fragment);\n      assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n      fragment = f;\n    }\n    assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", {\n      count: values.length,\n      expectedCount: fragment.inputs.length\n    });\n    const topics = [];\n    if (!fragment.anonymous) {\n      topics.push(fragment.topicHash);\n    }\n    // @TODO: Use the coders for this; to properly support tuples, etc.\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      } else if (param.type.match(/^u?int/)) {\n        value = toBeHex(value); // @TODO: Should this toTwos??\n      } else if (param.type.match(/^bytes/)) {\n        value = zeroPadBytes(value, 32);\n      } else if (param.type === \"address\") {\n        // Check addresses are valid\n        this.#abiCoder.encode([\"address\"], [value]);\n      }\n      return zeroPadValue(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      const param = fragment.inputs[index];\n      if (!param.indexed) {\n        assertArgument(value == null, \"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        assertArgument(false, \"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getEvent(fragment);\n      assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n      fragment = f;\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!fragment.anonymous) {\n      topics.push(fragment.topicHash);\n    }\n    assertArgument(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n    fragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this.#abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this.#abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(fragment, data, topics) {\n    if (typeof fragment === \"string\") {\n      const f = this.getEvent(fragment);\n      assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n      fragment = f;\n    }\n    if (topics != null && !fragment.anonymous) {\n      const eventTopic = fragment.topicHash;\n      assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n      topics = topics.slice(1);\n    }\n    const indexed = [];\n    const nonIndexed = [];\n    const dynamic = [];\n    fragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.from({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, concat(topics)) : null;\n    const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n    //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n    const values = [];\n    const keys = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    fragment.inputs.forEach((param, index) => {\n      let value = null;\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          value = new Indexed(null);\n        } else if (dynamic[index]) {\n          value = new Indexed(resultIndexed[indexedIndex++]);\n        } else {\n          try {\n            value = resultIndexed[indexedIndex++];\n          } catch (error) {\n            value = error;\n          }\n        }\n      } else {\n        try {\n          value = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          value = error;\n        }\n      }\n      values.push(value);\n      keys.push(param.name || null);\n    });\n    return Result.fromItems(values, keys);\n  }\n  /**\n   *  Parses a transaction, finding the matching function and extracts\n   *  the parameter values along with other useful function details.\n   *\n   *  If the matching function cannot be found, return null.\n   */\n  parseTransaction(tx) {\n    const data = getBytes(tx.data, \"tx.data\");\n    const value = getBigInt(tx.value != null ? tx.value : 0, \"tx.value\");\n    const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n    if (!fragment) {\n      return null;\n    }\n    const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n    return new TransactionDescription(fragment, fragment.selector, args, value);\n  }\n  parseCallResult(data) {\n    throw new Error(\"@TODO\");\n  }\n  /**\n   *  Parses a receipt log, finding the matching event and extracts\n   *  the parameter values along with other useful event details.\n   *\n   *  If the matching event cannot be found, returns null.\n   */\n  parseLog(log) {\n    const fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n  }\n  /**\n   *  Parses a revert data, finding the matching error and extracts\n   *  the parameter values along with other useful error details.\n   *\n   *  If the matching error cannot be found, returns null.\n   */\n  parseError(data) {\n    const hexData = hexlify(data);\n    const fragment = this.getError(dataSlice(hexData, 0, 4));\n    if (!fragment) {\n      return null;\n    }\n    const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n    return new ErrorDescription(fragment, fragment.selector, args);\n  }\n  /**\n   *  Creates a new [[Interface]] from the ABI %%value%%.\n   *\n   *  The %%value%% may be provided as an existing [[Interface]] object,\n   *  a JSON-encoded ABI or any Human-Readable ABI format.\n   */\n  static from(value) {\n    // Already an Interface, which is immutable\n    if (value instanceof Interface) {\n      return value;\n    }\n    // JSON\n    if (typeof value === \"string\") {\n      return new Interface(JSON.parse(value));\n    }\n    // Maybe an interface from an older version, or from a symlinked copy\n    if (typeof value.format === \"function\") {\n      return new Interface(value.format(\"json\"));\n    }\n    // Array of fragments\n    return new Interface(value);\n  }\n}","map":{"version":3,"sources":["../../src.ts/abi/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\nimport { keccak256 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, getBytesCopy, hexlify, zeroPadBytes, zeroPadValue, isHexString, defineProperties, assertArgument, toBeHex, assert } from \"../utils/index.js\";\nimport { AbiCoder } from \"./abi-coder.js\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder.js\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, Fragment, FunctionFragment, ParamType } from \"./fragments.js\";\nimport { Typed } from \"./typed.js\";\nexport { checkResultErrors, Result };\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */\nexport class LogDescription {\n    /**\n     *  The matching fragment for the ``topic0``.\n     */\n    fragment;\n    /**\n     *  The name of the Event.\n     */\n    name;\n    /**\n     *  The full Event signature.\n     */\n    signature;\n    /**\n     *  The topic hash for the Event.\n     */\n    topic;\n    /**\n     *  The arguments passed into the Event with ``emit``.\n     */\n    args;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, topic, args) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, signature, topic, args\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */\nexport class TransactionDescription {\n    /**\n     *  The matching fragment from the transaction ``data``.\n     */\n    fragment;\n    /**\n     *  The name of the Function from the transaction ``data``.\n     */\n    name;\n    /**\n     *  The arguments passed to the Function from the transaction ``data``.\n     */\n    args;\n    /**\n     *  The full Function signature from the transaction ``data``.\n     */\n    signature;\n    /**\n     *  The selector for the Function from the transaction ``data``.\n     */\n    selector;\n    /**\n     *  The ``value`` (in wei) from the transaction.\n     */\n    value;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, selector, args, value) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, args, signature, selector, value\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */\nexport class ErrorDescription {\n    /**\n     *  The matching fragment.\n     */\n    fragment;\n    /**\n     *  The name of the Error.\n     */\n    name;\n    /**\n     *  The arguments passed to the Error with ``revert``.\n     */\n    args;\n    /**\n     *  The full Error signature.\n     */\n    signature;\n    /**\n     *  The selector for the Error.\n     */\n    selector;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, selector, args) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, args, signature, selector\n        });\n    }\n}\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */\nexport class Indexed {\n    /**\n     *  The ``keccak256`` of the value logged.\n     */\n    hash;\n    /**\n     *  @_ignore:\n     */\n    _isIndexed;\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n    /**\n     *  @_ignore:\n     */\n    constructor(hash) {\n        defineProperties(this, { hash, _isIndexed: true });\n    }\n}\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\",\n};\nconst BuiltinErrors = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [\"string\"],\n        reason: (message) => {\n            return `reverted with reason string ${JSON.stringify(message)}`;\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [\"uint256\"],\n        reason: (code) => {\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n        }\n    }\n};\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n    /**\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\n     */\n    fragments;\n    /**\n     *  The Contract constructor.\n     */\n    deploy;\n    /**\n     *  The Fallback method, if any.\n     */\n    fallback;\n    /**\n     *  If receiving ether is supported.\n     */\n    receive;\n    #errors;\n    #events;\n    #functions;\n    //    #structs: Map<string, StructFragment>;\n    #abiCoder;\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n        //        this.#structs = new Map();\n        const frags = [];\n        for (const a of abi) {\n            try {\n                frags.push(Fragment.from(a));\n            }\n            catch (error) {\n                console.log(\"EE\", error);\n            }\n        }\n        defineProperties(this, {\n            fragments: Object.freeze(frags)\n        });\n        let fallback = null;\n        let receive = false;\n        this.#abiCoder = this.getAbiCoder();\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index) => {\n            let bucket;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineProperties(this, { deploy: fragment });\n                    return;\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    }\n                    else {\n                        assertArgument(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n                        fallback = fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n                case \"error\":\n                    bucket = this.#errors;\n                    break;\n                default:\n                    return;\n            }\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) {\n                return;\n            }\n            bucket.set(signature, fragment);\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineProperties(this, {\n                deploy: ConstructorFragment.from(\"constructor()\")\n            });\n        }\n        defineProperties(this, { fallback, receive });\n    }\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */\n    format(minimal) {\n        const format = (minimal ? \"minimal\" : \"full\");\n        const abi = this.fragments.map((f) => f.format(format));\n        return abi;\n    }\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */\n    formatJson() {\n        const abi = this.fragments.map((f) => f.format(\"json\"));\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\n    }\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */\n    getAbiCoder() {\n        return AbiCoder.defaultAbiCoder();\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key, values, forceUnique) {\n        // Selector\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#functions) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                const lastValue = (values.length > 0) ? values[values.length - 1] : null;\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                    allowOptions = false;\n                    valueLength--;\n                }\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === \"overrides\") {\n                                continue;\n                            }\n                            matching.splice(i, 1);\n                            break;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof (lastArg) !== \"object\") {\n                    matching.splice(0, 1);\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(FunctionFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */\n    getFunctionName(key) {\n        const fragment = this.#getFunction(key, null, false);\n        assertArgument(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */\n    hasFunction(key) {\n        return !!this.#getFunction(key, null, false);\n    }\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */\n    getFunction(key, values) {\n        return this.#getFunction(key, values || null, true);\n    }\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */\n    forEachFunction(callback) {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#functions.get(name)), i);\n        }\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key, values, forceUnique) {\n        // EventTopic\n        if (isHexString(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()) {\n                if (eventTopic === fragment.topicHash) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#events) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(EventFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */\n    getEventName(key) {\n        const fragment = this.#getEvent(key, null, false);\n        assertArgument(fragment, \"no matching event\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */\n    hasEvent(key) {\n        return !!this.#getEvent(key, null, false);\n    }\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */\n    getEvent(key, values) {\n        return this.#getEvent(key, values || null, true);\n    }\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */\n    forEachEvent(callback) {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#events.get(name)), i);\n        }\n    }\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */\n    getError(key, values) {\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            if (BuiltinErrors[selector]) {\n                return ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n            for (const fragment of this.#errors.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#errors) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (matching.length === 0) {\n                if (key === \"Error\") {\n                    return ErrorFragment.from(\"error Error(string)\");\n                }\n                if (key === \"Panic\") {\n                    return ErrorFragment.from(\"error Panic(uint256)\");\n                }\n                return null;\n            }\n            else if (matching.length > 1) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        key = ErrorFragment.from(key).format();\n        if (key === \"Error(string)\") {\n            return ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic(uint256)\") {\n            return ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        const result = this.#errors.get(key);\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */\n    forEachError(callback) {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#errors.get(name)), i);\n        }\n    }\n    // Get the 4-byte selector used by Solidity to identify a function\n    /*\ngetSelector(fragment: ErrorFragment | FunctionFragment): string {\n    if (typeof(fragment) === \"string\") {\n        const matches: Array<Fragment> = [ ];\n\n        try { matches.push(this.getFunction(fragment)); } catch (error) { }\n        try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n        if (matches.length === 0) {\n            logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n        } else if (matches.length > 1) {\n            logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n        }\n\n        fragment = matches[0];\n    }\n\n    return dataSlice(id(fragment.format()), 0, 4);\n}\n    */\n    // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */\n    _decodeParams(params, data) {\n        return this.#abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this.#abiCoder.encode(params, values);\n    }\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */\n    decodeFunctionData(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */\n    encodeFunctionData(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeFunctionResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        let message = \"invalid length for result data\";\n        const bytes = getBytesCopy(data);\n        if ((bytes.length % 32) === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs, bytes);\n            }\n            catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n        // Call returned data with no error, but the data is junk\n        assert(false, message, \"BAD_DATA\", {\n            value: hexlify(bytes),\n            info: { method: fragment.name, signature: fragment.format() }\n        });\n    }\n    makeError(_data, tx) {\n        const data = getBytes(_data, \"data\");\n        const error = AbiCoder.getBuiltinCallException(\"call\", tx, data);\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify(data.slice(0, 4));\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name, signature: ef.format(), args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${error.reason}`;\n                }\n                catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`;\n                }\n            }\n        }\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n        return error;\n    }\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeFunctionResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));\n    }\n    /*\n        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n            const promises: Array<Promise<>> = [ ];\n            const process = function(type: ParamType, value: any): any {\n                if (type.baseType === \"array\") {\n                    return descend(type.child\n                }\n                if (type. === \"address\") {\n                }\n            };\n    \n            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n                if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n                \n            };\n    \n            const result: Array<any> = [ ];\n            values.forEach((value, index) => {\n                if (value == null) {\n                    topics.push(null);\n                } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                    logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n                } else if (Array.isArray(value)) {\n                    topics.push(value.map((value) => encodeTopic(param, value)));\n                } else {\n                    topics.push(encodeTopic(param, value));\n                }\n            });\n        }\n    */\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length });\n        const topics = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            else if (param.type.match(/^u?int/)) {\n                value = toBeHex(value); // @TODO: Should this toTwos??\n            }\n            else if (param.type.match(/^bytes/)) {\n                value = zeroPadBytes(value, 32);\n            }\n            else if (param.type === \"address\") {\n                // Check addresses are valid\n                this.#abiCoder.encode([\"address\"], [value]);\n            }\n            return zeroPadValue(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            const param = fragment.inputs[index];\n            if (!param.indexed) {\n                assertArgument(value == null, \"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                assertArgument(false, \"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        assertArgument(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n        fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this.#abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this.#abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment, data, topics) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n        const indexed = [];\n        const nonIndexed = [];\n        const dynamic = [];\n        fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.from({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, concat(topics)) : null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values = [];\n        const keys = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index) => {\n            let value = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n                }\n                else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n                }\n                else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        value = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    value = error;\n                }\n            }\n            values.push(value);\n            keys.push(param.name || null);\n        });\n        return Result.fromItems(values, keys);\n    }\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */\n    parseTransaction(tx) {\n        const data = getBytes(tx.data, \"tx.data\");\n        const value = getBigInt((tx.value != null) ? tx.value : 0, \"tx.value\");\n        const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n    parseCallResult(data) {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseLog(log) {\n        const fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching error cannot be found, returns null.\n     */\n    parseError(data) {\n        const hexData = hexlify(data);\n        const fragment = this.getError(dataSlice(hexData, 0, 4));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */\n    static from(value) {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) {\n            return value;\n        }\n        // JSON\n        if (typeof (value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        // Maybe an interface from an older version, or from a symlinked copy\n        if (typeof (value.format) === \"function\") {\n            return new Interface(value.format(\"json\"));\n        }\n        // Array of fragments\n        return new Interface(value);\n    }\n}\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"module"}