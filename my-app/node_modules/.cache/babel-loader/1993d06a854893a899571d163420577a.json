{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256 as _keccak256, sha256 as _sha256 } from \"../crypto/index.js\";\nimport { concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue, assertArgument } from \"../utils/index.js\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return getBytes(zeroPadValue(value, 32));\n      }\n      return getBytes(getAddress(value));\n    case \"string\":\n      return toUtf8Bytes(value);\n    case \"bytes\":\n      return getBytes(value);\n    case \"bool\":\n      value = !!value ? \"0x01\" : \"0x00\";\n      if (isArray) {\n        return getBytes(zeroPadValue(value, 32));\n      }\n      return getBytes(value);\n  }\n  let match = type.match(regexNumber);\n  if (match) {\n    let signed = match[1] === \"int\";\n    let size = parseInt(match[2] || \"256\");\n    assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n    if (isArray) {\n      size = 256;\n    }\n    if (signed) {\n      value = toTwos(value, size);\n    }\n    return getBytes(zeroPadValue(toBeArray(value), size / 8));\n  }\n  match = type.match(regexBytes);\n  if (match) {\n    const size = parseInt(match[1]);\n    assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n    assertArgument(dataLength(value) === size, \"invalid value for \".concat(type), \"value\", value);\n    if (isArray) {\n      return getBytes(zeroPadBytes(value, 32));\n    }\n    return value;\n  }\n  match = type.match(regexArray);\n  if (match && Array.isArray(value)) {\n    const baseType = match[1];\n    const count = parseInt(match[2] || String(value.length));\n    assertArgument(count === value.length, \"invalid array length for \".concat(type), \"value\", value);\n    const result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return getBytes(concat(result));\n  }\n  assertArgument(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types, values) {\n  assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n  const tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types, values) {\n  return _keccak256(solidityPacked(types, values));\n}\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types, values) {\n  return _sha256(solidityPacked(types, values));\n}","map":{"version":3,"sources":["../../src.ts/hash/solidity.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport { keccak256 as _keccak256, sha256 as _sha256 } from \"../crypto/index.js\";\nimport { concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue, assertArgument } from \"../utils/index.js\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\");\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n        if (isArray) {\n            size = 256;\n        }\n        if (signed) {\n            value = toTwos(value, size);\n        }\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${type}`, \"value\", value);\n        if (isArray) {\n            return getBytes(zeroPadBytes(value, 32));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${type}`, \"value\", value);\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n    assertArgument(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types, values) {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types, values) {\n    return _keccak256(solidityPacked(types, values));\n}\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types, values) {\n    return _sha256(solidityPacked(types, values));\n}\n//# sourceMappingURL=solidity.js.map"]},"metadata":{},"sourceType":"module"}