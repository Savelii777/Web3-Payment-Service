{"ast":null,"code":"/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CBC, pkcs7Strip } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nexport function isCrowdsaleJson(json) {\n  try {\n    const data = JSON.parse(json);\n    if (data.encseed) {\n      return true;\n    }\n  } catch (error) {}\n  return false;\n}\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nexport function decryptCrowdsaleJson(json, _password) {\n  const data = JSON.parse(json);\n  const password = getPassword(_password);\n  // Ethereum Address\n  const address = getAddress(spelunk(data, \"ethaddr:string!\"));\n  // Encrypted Seed\n  const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n  assertArgument(encseed && encseed.length % 16 === 0, \"invalid encseed\", \"json\", json);\n  const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  const iv = encseed.slice(0, 16);\n  const encryptedSeed = encseed.slice(16);\n  // Decrypt the seed\n  const aesCbc = new CBC(key, iv);\n  const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\n  // This wallet format is weird... Convert the binary encoded hex to a string.\n  let seedHex = \"\";\n  for (let i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n  return {\n    address,\n    privateKey: id(seedHex)\n  };\n}","map":{"version":3,"sources":["../../src.ts/wallet/json-crowdsale.ts"],"names":[],"mappings":"AAAA;;AAEG;AAEH,SAAS,GAAG,EAAE,UAAU,QAAQ,QAAQ;AAExC,SAAS,UAAU,QAAQ,qBAAqB;AAChD,SAAS,MAAM,QAAQ,oBAAoB;AAC3C,SAAS,EAAE,QAAQ,kBAAkB;AACrC,SAAS,QAAQ,EAAE,cAAc,QAAQ,mBAAmB;AAE5D,SAAS,WAAW,EAAE,aAAa,EAAE,OAAO,QAAQ,YAAY;AAYhE;;AAEG;AACH,OAAM,SAAU,eAAe,CAAC,IAAY,EAAA;EACxC,IAAI;IACA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC7B,IAAI,IAAI,CAAC,OAAO,EAAE;MAAE,OAAO,IAAI;IAAG;GACrC,CAAC,OAAO,KAAK,EAAE,CAAA;EAChB,OAAO,KAAK;AAChB;AAEA;AAEA;;;;;;;;;AASG;AACH,OAAM,SAAU,oBAAoB,CAAC,IAAY,EAAE,SAA8B,EAAA;EAC7E,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;EAC7B,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;EAEvC;EACA,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;EAE5D;EACA,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;EAC/D,cAAc,CAAC,OAAO,IAAK,OAAO,CAAC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,IAAI,CAAC;EAEvF,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjF,MAAM,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;EAEvC;EACA,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC;EAC/B,MAAM,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;EAEhE;EACA,IAAI,OAAO,GAAG,EAAE;EAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAClC,OAAO,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1C;EAED,OAAO;IAAE,OAAO;IAAE,UAAU,EAAE,EAAE,CAAC,OAAO;EAAC,CAAE;AAC/C","sourceRoot":"","sourcesContent":["/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CBC, pkcs7Strip } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nexport function isCrowdsaleJson(json) {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) {\n            return true;\n        }\n    }\n    catch (error) { }\n    return false;\n}\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nexport function decryptCrowdsaleJson(json, _password) {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n    // Ethereum Address\n    const address = getAddress(spelunk(data, \"ethaddr:string!\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n    assertArgument(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\n    const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new CBC(key, iv);\n    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    return { address, privateKey: id(seedHex) };\n}\n//# sourceMappingURL=json-crowdsale.js.map"]},"metadata":{},"sourceType":"module"}