{"ast":null,"code":"import { WebSocket as _WebSocket } from \"./ws.js\"; /*-browser*/\nimport { SocketProvider } from \"./provider-socket.js\";\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */\nexport class WebSocketProvider extends SocketProvider {\n  #connect;\n  #websocket;\n  get websocket() {\n    if (this.#websocket == null) {\n      throw new Error(\"websocket closed\");\n    }\n    return this.#websocket;\n  }\n  constructor(url, network, options) {\n    super(network, options);\n    if (typeof url === \"string\") {\n      this.#connect = () => {\n        return new _WebSocket(url);\n      };\n      this.#websocket = this.#connect();\n    } else if (typeof url === \"function\") {\n      this.#connect = url;\n      this.#websocket = url();\n    } else {\n      this.#connect = null;\n      this.#websocket = url;\n    }\n    this.websocket.onopen = async () => {\n      try {\n        await this._start();\n        this.resume();\n      } catch (error) {\n        console.log(\"failed to start WebsocketProvider\", error);\n        // @TODO: now what? Attempt reconnect?\n      }\n    };\n    this.websocket.onmessage = message => {\n      this._processMessage(message.data);\n    };\n    /*\n            this.websocket.onclose = (event) => {\n                // @TODO: What event.code should we reconnect on?\n                const reconnect = false;\n                if (reconnect) {\n                    this.pause(true);\n                    if (this.#connect) {\n                        this.#websocket = this.#connect();\n                        this.#websocket.onopen = ...\n                        // @TODO: this requires the super class to rebroadcast; move it there\n                    }\n                    this._reconnect();\n                }\n            };\n    */\n  }\n  async _write(message) {\n    this.websocket.send(message);\n  }\n  async destroy() {\n    if (this.#websocket != null) {\n      this.#websocket.close();\n      this.#websocket = null;\n    }\n    super.destroy();\n  }\n}","map":{"version":3,"sources":["../../src.ts/providers/provider-websocket.ts"],"names":[],"mappings":"AAEA,SAAS,SAAS,IAAI,UAAU,QAAQ,SAAS,CAAC,CAAC;AAEnD,SAAS,cAAc,QAAQ,sBAAsB;AAyBrD;;;;;;;;;AASG;AACH,OAAM,MAAO,iBAAkB,SAAQ,cAAc,CAAA;EACjD,CAAA,OAAQ;EAER,CAAA,SAAU;EACV,IAAI,SAAS,CAAA,EAAA;IACT,IAAI,IAAI,CAAC,CAAA,SAAU,IAAI,IAAI,EAAE;MAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC;IAAG;IACrE,OAAO,IAAI,CAAC,CAAA,SAAU;EAC1B;EAEA,WAAA,CAAY,GAA8C,EAAE,OAAoB,EAAE,OAAmC,EAAA;IACjH,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC;IACvB,IAAI,OAAO,GAAI,KAAK,QAAQ,EAAE;MAC1B,IAAI,CAAC,CAAA,OAAQ,GAAG,MAAK;QAAG,OAAO,IAAI,UAAU,CAAC,GAAG,CAAC;MAAE,CAAC;MACrD,IAAI,CAAC,CAAA,SAAU,GAAG,IAAI,CAAC,CAAA,OAAQ,CAAA,CAAE;KACpC,MAAM,IAAI,OAAO,GAAI,KAAK,UAAU,EAAE;MACnC,IAAI,CAAC,CAAA,OAAQ,GAAG,GAAG;MACnB,IAAI,CAAC,CAAA,SAAU,GAAG,GAAG,CAAA,CAAE;KAC1B,MAAM;MACH,IAAI,CAAC,CAAA,OAAQ,GAAG,IAAI;MACpB,IAAI,CAAC,CAAA,SAAU,GAAG,GAAG;IACxB;IAED,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,YAAW;MAC/B,IAAI;QACA,MAAM,IAAI,CAAC,MAAM,CAAA,CAAE;QACnB,IAAI,CAAC,MAAM,CAAA,CAAE;OAChB,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,KAAK,CAAC;QACvD;MACH;IACL,CAAC;IAED,IAAI,CAAC,SAAS,CAAC,SAAS,GAAI,OAAyB,IAAI;MACrD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC;IACtC,CAAC;IACT;;;;;;;;;;;;;;AAcE;EACE;EAEA,MAAM,MAAM,CAAC,OAAe,EAAA;IACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;EAChC;EAEA,MAAM,OAAO,CAAA,EAAA;IACT,IAAI,IAAI,CAAC,CAAA,SAAU,IAAI,IAAI,EAAE;MACzB,IAAI,CAAC,CAAA,SAAU,CAAC,KAAK,CAAA,CAAE;MACvB,IAAI,CAAC,CAAA,SAAU,GAAG,IAAI;IACzB;IACD,KAAK,CAAC,OAAO,CAAA,CAAE;EACnB;AACH","sourceRoot":"","sourcesContent":["import { WebSocket as _WebSocket } from \"./ws.js\"; /*-browser*/\nimport { SocketProvider } from \"./provider-socket.js\";\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */\nexport class WebSocketProvider extends SocketProvider {\n    #connect;\n    #websocket;\n    get websocket() {\n        if (this.#websocket == null) {\n            throw new Error(\"websocket closed\");\n        }\n        return this.#websocket;\n    }\n    constructor(url, network, options) {\n        super(network, options);\n        if (typeof (url) === \"string\") {\n            this.#connect = () => { return new _WebSocket(url); };\n            this.#websocket = this.#connect();\n        }\n        else if (typeof (url) === \"function\") {\n            this.#connect = url;\n            this.#websocket = url();\n        }\n        else {\n            this.#connect = null;\n            this.#websocket = url;\n        }\n        this.websocket.onopen = async () => {\n            try {\n                await this._start();\n                this.resume();\n            }\n            catch (error) {\n                console.log(\"failed to start WebsocketProvider\", error);\n                // @TODO: now what? Attempt reconnect?\n            }\n        };\n        this.websocket.onmessage = (message) => {\n            this._processMessage(message.data);\n        };\n        /*\n                this.websocket.onclose = (event) => {\n                    // @TODO: What event.code should we reconnect on?\n                    const reconnect = false;\n                    if (reconnect) {\n                        this.pause(true);\n                        if (this.#connect) {\n                            this.#websocket = this.#connect();\n                            this.#websocket.onopen = ...\n                            // @TODO: this requires the super class to rebroadcast; move it there\n                        }\n                        this._reconnect();\n                    }\n                };\n        */\n    }\n    async _write(message) {\n        this.websocket.send(message);\n    }\n    async destroy() {\n        if (this.#websocket != null) {\n            this.#websocket.close();\n            this.#websocket = null;\n        }\n        super.destroy();\n    }\n}\n//# sourceMappingURL=provider-websocket.js.map"]},"metadata":{},"sourceType":"module"}