{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _defineProperty from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nlet _Symbol$iterator, _Symbol$iterator2;\n//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n  if (value == null) {\n    return null;\n  }\n  return value;\n}\nfunction toJson(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n  /**\n   *  The gas price for legacy networks.\n   */\n\n  /**\n   *  The maximum fee to pay per gas.\n   *\n   *  The base fee per gas is defined by the network and based on\n   *  congestion, increasing the cost during times of heavy load\n   *  and lowering when less busy.\n   *\n   *  The actual fee per gas will be the base fee for the block\n   *  and the priority fee, up to the max fee per gas.\n   *\n   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n   */\n\n  /**\n   *  The additional amout to pay per gas to encourage a validator\n   *  to include the transaction.\n   *\n   *  The purpose of this is to compensate the validator for the\n   *  adjusted risk for including a given transaction.\n   *\n   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n   */\n\n  /**\n   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n   *  %%maxPriorityFeePerGas%%.\n   */\n  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n    _defineProperty(this, \"gasPrice\", void 0);\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    defineProperties(this, {\n      gasPrice: getValue(gasPrice),\n      maxFeePerGas: getValue(maxFeePerGas),\n      maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n    });\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  toJSON() {\n    const {\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = this;\n    return {\n      _type: \"FeeData\",\n      gasPrice: toJson(gasPrice),\n      maxFeePerGas: toJson(maxFeePerGas),\n      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n    };\n  }\n}\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req) {\n  const result = {};\n  // These could be addresses, ENS names or Addressables\n  if (req.to) {\n    result.to = req.to;\n  }\n  if (req.from) {\n    result.from = req.from;\n  }\n  if (req.data) {\n    result.data = hexlify(req.data);\n  }\n  const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n  for (const key of bigIntKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n    result[key] = getBigInt(req[key], \"request.\".concat(key));\n  }\n  const numberKeys = \"type,nonce\".split(/,/);\n  for (const key of numberKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n    result[key] = getNumber(req[key], \"request.\".concat(key));\n  }\n  if (req.accessList) {\n    result.accessList = accessListify(req.accessList);\n  }\n  if (\"blockTag\" in req) {\n    result.blockTag = req.blockTag;\n  }\n  if (\"enableCcipRead\" in req) {\n    result.enableCcipRead = !!req.enableCcipRead;\n  }\n  if (\"customData\" in req) {\n    result.customData = req.customData;\n  }\n  return result;\n}\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nvar _transactions = /*#__PURE__*/new WeakMap();\n_Symbol$iterator = Symbol.iterator;\nexport class Block {\n  /**\n   *  The provider connected to the block used to fetch additional details\n   *  if necessary.\n   */\n\n  /**\n   *  The block number, sometimes called the block height. This is a\n   *  sequential number that is one higher than the parent block.\n   */\n\n  /**\n   *  The block hash.\n   *\n   *  This hash includes all properties, so can be safely used to identify\n   *  an exact set of block properties.\n   */\n\n  /**\n   *  The timestamp for this block, which is the number of seconds since\n   *  epoch that this block was included.\n   */\n\n  /**\n   *  The block hash of the parent block.\n   */\n\n  /**\n   *  The nonce.\n   *\n   *  On legacy networks, this is the random number inserted which\n   *  permitted the difficulty target to be reached.\n   */\n\n  /**\n   *  The difficulty target.\n   *\n   *  On legacy networks, this is the proof-of-work target required\n   *  for a block to meet the protocol rules to be included.\n   *\n   *  On modern networks, this is a random number arrived at using\n   *  randao.  @TODO: Find links?\n   */\n\n  /**\n   *  The total gas limit for this block.\n   */\n\n  /**\n   *  The total gas used in this block.\n   */\n\n  /**\n   *  The miner coinbase address, wihch receives any subsidies for\n   *  including this block.\n   */\n\n  /**\n   *  Any extra data the validator wished to include.\n   */\n\n  /**\n   *  The base fee per gas that all transactions in this block were\n   *  charged.\n   *\n   *  This adjusts after each block, depending on how congested the network\n   *  is.\n   */\n\n  /**\n   *  Create a new **Block** object.\n   *\n   *  This should generally not be necessary as the unless implementing a\n   *  low-level library.\n   */\n  constructor(block, provider) {\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"number\", void 0);\n    _defineProperty(this, \"hash\", void 0);\n    _defineProperty(this, \"timestamp\", void 0);\n    _defineProperty(this, \"parentHash\", void 0);\n    _defineProperty(this, \"nonce\", void 0);\n    _defineProperty(this, \"difficulty\", void 0);\n    _defineProperty(this, \"gasLimit\", void 0);\n    _defineProperty(this, \"gasUsed\", void 0);\n    _defineProperty(this, \"miner\", void 0);\n    _defineProperty(this, \"extraData\", void 0);\n    _defineProperty(this, \"baseFeePerGas\", void 0);\n    _classPrivateFieldInitSpec(this, _transactions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _transactions, block.transactions.map(tx => {\n      if (typeof tx !== \"string\") {\n        return new TransactionResponse(tx, provider);\n      }\n      return tx;\n    }));\n    defineProperties(this, {\n      provider,\n      hash: getValue(block.hash),\n      number: block.number,\n      timestamp: block.timestamp,\n      parentHash: block.parentHash,\n      nonce: block.nonce,\n      difficulty: block.difficulty,\n      gasLimit: block.gasLimit,\n      gasUsed: block.gasUsed,\n      miner: block.miner,\n      extraData: block.extraData,\n      baseFeePerGas: getValue(block.baseFeePerGas)\n    });\n  }\n  /**\n   *  Returns the list of transaction hashes, in the order\n   *  they were executed within the block.\n   */\n  get transactions() {\n    return _classPrivateFieldGet(this, _transactions).map(tx => {\n      if (typeof tx === \"string\") {\n        return tx;\n      }\n      return tx.hash;\n    });\n  }\n  /**\n   *  Returns the complete transactions, in the order they\n   *  were executed within the block.\n   *\n   *  This is only available for blocks which prefetched\n   *  transactions, by passing ``true`` to %%prefetchTxs%%\n   *  into [[Provider-getBlock]].\n   */\n  get prefetchedTransactions() {\n    const txs = _classPrivateFieldGet(this, _transactions).slice();\n    // Doesn't matter...\n    if (txs.length === 0) {\n      return [];\n    }\n    // Make sure we prefetched the transactions\n    assert(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"transactionResponses()\"\n    });\n    return txs;\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  toJSON() {\n    const {\n      baseFeePerGas,\n      difficulty,\n      extraData,\n      gasLimit,\n      gasUsed,\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    } = this;\n    return {\n      _type: \"Block\",\n      baseFeePerGas: toJson(baseFeePerGas),\n      difficulty: toJson(difficulty),\n      extraData,\n      gasLimit: toJson(gasLimit),\n      gasUsed: toJson(gasUsed),\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    };\n  }\n  [_Symbol$iterator]() {\n    let index = 0;\n    const txs = this.transactions;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: txs[index++],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The number of transactions in this block.\n   */\n  get length() {\n    return _classPrivateFieldGet(this, _transactions).length;\n  }\n  /**\n   *  The [[link-js-date]] this block was included at.\n   */\n  get date() {\n    if (this.timestamp == null) {\n      return null;\n    }\n    return new Date(this.timestamp * 1000);\n  }\n  /**\n   *  Get the transaction at %%indexe%% within this block.\n   */\n  async getTransaction(indexOrHash) {\n    // Find the internal value by its index or hash\n    let tx = undefined;\n    if (typeof indexOrHash === \"number\") {\n      tx = _classPrivateFieldGet(this, _transactions)[indexOrHash];\n    } else {\n      const hash = indexOrHash.toLowerCase();\n      for (const v of _classPrivateFieldGet(this, _transactions)) {\n        if (typeof v === \"string\") {\n          if (v !== hash) {\n            continue;\n          }\n          tx = v;\n          break;\n        } else {\n          if (v.hash === hash) {\n            continue;\n          }\n          tx = v;\n          break;\n        }\n      }\n    }\n    if (tx == null) {\n      throw new Error(\"no such tx\");\n    }\n    if (typeof tx === \"string\") {\n      return await this.provider.getTransaction(tx);\n    } else {\n      return tx;\n    }\n  }\n  /**\n   *  If a **Block** was fetched with a request to include the transactions\n   *  this will allow synchronous access to those transactions.\n   *\n   *  If the transactions were not prefetched, this will throw.\n   */\n  getPrefetchedTransaction(indexOrHash) {\n    const txs = this.prefetchedTransactions;\n    if (typeof indexOrHash === \"number\") {\n      return txs[indexOrHash];\n    }\n    indexOrHash = indexOrHash.toLowerCase();\n    for (const tx of txs) {\n      if (tx.hash === indexOrHash) {\n        return tx;\n      }\n    }\n    assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n  }\n  /**\n   *  Returns true if this block been mined. This provides a type guard\n   *  for all properties on a [[MinedBlock]].\n   */\n  isMined() {\n    return !!this.hash;\n  }\n  /**\n   *  Returns true if this block is an [[link-eip-2930]] block.\n   */\n  isLondon() {\n    return !!this.baseFeePerGas;\n  }\n  /**\n   *  @_ignore:\n   */\n  orphanedEvent() {\n    if (!this.isMined()) {\n      throw new Error(\"\");\n    }\n    return createOrphanedBlockFilter(this);\n  }\n}\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log {\n  /**\n   *  The provider connected to the log used to fetch additional details\n   *  if necessary.\n   */\n\n  /**\n   *  The transaction hash of the transaction this log occurred in. Use the\n   *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n   */\n\n  /**\n   *  The block hash of the block this log occurred in. Use the\n   *  [[Log-getBlock]] to get the [[Block]].\n   */\n\n  /**\n   *  The block number of the block this log occurred in. It is preferred\n   *  to use the [[Block-hash]] when fetching the related [[Block]],\n   *  since in the case of an orphaned block, the block at that height may\n   *  have changed.\n   */\n\n  /**\n   *  If the **Log** represents a block that was removed due to an orphaned\n   *  block, this will be true.\n   *\n   *  This can only happen within an orphan event listener.\n   */\n\n  /**\n   *  The address of the contract that emitted this log.\n   */\n\n  /**\n   *  The data included in this log when it was emitted.\n   */\n\n  /**\n   *  The indexed topics included in this log when it was emitted.\n   *\n   *  All topics are included in the bloom filters, so they can be\n   *  efficiently filtered using the [[Provider-getLogs]] method.\n   */\n\n  /**\n   *  The index within the block this log occurred at. This is generally\n   *  not useful to developers, but can be used with the various roots\n   *  to proof inclusion within a block.\n   */\n\n  /**\n   *  The index within the transaction of this log.\n   */\n\n  /**\n   *  @_ignore:\n   */\n  constructor(log, provider) {\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"transactionHash\", void 0);\n    _defineProperty(this, \"blockHash\", void 0);\n    _defineProperty(this, \"blockNumber\", void 0);\n    _defineProperty(this, \"removed\", void 0);\n    _defineProperty(this, \"address\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"topics\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"transactionIndex\", void 0);\n    this.provider = provider;\n    const topics = Object.freeze(log.topics.slice());\n    defineProperties(this, {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      removed: log.removed,\n      address: log.address,\n      data: log.data,\n      topics,\n      index: log.index,\n      transactionIndex: log.transactionIndex\n    });\n  }\n  /**\n   *  Returns a JSON-compatible object.\n   */\n  toJSON() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    } = this;\n    return {\n      _type: \"log\",\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    };\n  }\n  /**\n   *  Returns the block that this log occurred in.\n   */\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return block;\n  }\n  /**\n   *  Returns the transaction that this log occurred in.\n   */\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.transactionHash);\n    assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return tx;\n  }\n  /**\n   *  Returns the transaction receipt fot the transaction that this\n   *  log occurred in.\n   */\n  async getTransactionReceipt() {\n    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n    assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n    return receipt;\n  }\n  /**\n   *  @_ignore:\n   */\n  removedEvent() {\n    return createRemovedLogFilter(this);\n  }\n}\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nvar _logs = /*#__PURE__*/new WeakMap();\n_Symbol$iterator2 = Symbol.iterator;\nexport class TransactionReceipt {\n  /**\n   *  The provider connected to the log used to fetch additional details\n   *  if necessary.\n   */\n\n  /**\n   *  The address the transaction was sent to.\n   */\n\n  /**\n   *  The sender of the transaction.\n   */\n\n  /**\n   *  The address of the contract if the transaction was directly\n   *  responsible for deploying one.\n   *\n   *  This is non-null **only** if the ``to`` is empty and the ``data``\n   *  was successfully executed as initcode.\n   */\n\n  /**\n   *  The transaction hash.\n   */\n\n  /**\n   *  The index of this transaction within the block transactions.\n   */\n\n  /**\n   *  The block hash of the [[Block]] this transaction was included in.\n   */\n\n  /**\n   *  The block number of the [[Block]] this transaction was included in.\n   */\n\n  /**\n   *  The bloom filter bytes that represent all logs that occurred within\n   *  this transaction. This is generally not useful for most developers,\n   *  but can be used to validate the included logs.\n   */\n\n  /**\n   *  The actual amount of gas used by this transaction.\n   *\n   *  When creating a transaction, the amount of gas that will be used can\n   *  only be approximated, but the sender must pay the gas fee for the\n   *  entire gas limit. After the transaction, the difference is refunded.\n   */\n\n  /**\n   *  The amount of gas used by all transactions within the block for this\n   *  and all transactions with a lower ``index``.\n   *\n   *  This is generally not useful for developers but can be used to\n   *  validate certain aspects of execution.\n   */\n\n  /**\n   *  The actual gas price used during execution.\n   *\n   *  Due to the complexity of [[link-eip-1559]] this value can only\n   *  be caluclated after the transaction has been mined, snce the base\n   *  fee is protocol-enforced.\n   */\n\n  /**\n   *  The [[link-eip-2718]] transaction type.\n   */\n\n  //readonly byzantium!: boolean;\n  /**\n   *  The status of this transaction, indicating success (i.e. ``1``) or\n   *  a revert (i.e. ``0``).\n   *\n   *  This is available in post-byzantium blocks, but some backends may\n   *  backfill this value.\n   */\n\n  /**\n   *  The root hash of this transaction.\n   *\n   *  This is no present and was only included in pre-byzantium blocks, but\n   *  could be used to validate certain parts of the receipt.\n   */\n\n  /**\n   *  @_ignore:\n   */\n  constructor(tx, provider) {\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"to\", void 0);\n    _defineProperty(this, \"from\", void 0);\n    _defineProperty(this, \"contractAddress\", void 0);\n    _defineProperty(this, \"hash\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"blockHash\", void 0);\n    _defineProperty(this, \"blockNumber\", void 0);\n    _defineProperty(this, \"logsBloom\", void 0);\n    _defineProperty(this, \"gasUsed\", void 0);\n    _defineProperty(this, \"cumulativeGasUsed\", void 0);\n    _defineProperty(this, \"gasPrice\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"status\", void 0);\n    _defineProperty(this, \"root\", void 0);\n    _classPrivateFieldInitSpec(this, _logs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logs, Object.freeze(tx.logs.map(log => {\n      return new Log(log, provider);\n    })));\n    let gasPrice = BN_0;\n    if (tx.effectiveGasPrice != null) {\n      gasPrice = tx.effectiveGasPrice;\n    } else if (tx.gasPrice != null) {\n      gasPrice = tx.gasPrice;\n    }\n    defineProperties(this, {\n      provider,\n      to: tx.to,\n      from: tx.from,\n      contractAddress: tx.contractAddress,\n      hash: tx.hash,\n      index: tx.index,\n      blockHash: tx.blockHash,\n      blockNumber: tx.blockNumber,\n      logsBloom: tx.logsBloom,\n      gasUsed: tx.gasUsed,\n      cumulativeGasUsed: tx.cumulativeGasUsed,\n      gasPrice,\n      type: tx.type,\n      //byzantium: tx.byzantium,\n      status: tx.status,\n      root: tx.root\n    });\n  }\n  /**\n   *  The logs for this transaction.\n   */\n  get logs() {\n    return _classPrivateFieldGet(this, _logs);\n  }\n  /**\n   *  Returns a JSON-compatible representation.\n   */\n  toJSON() {\n    const {\n      to,\n      from,\n      contractAddress,\n      hash,\n      index,\n      blockHash,\n      blockNumber,\n      logsBloom,\n      logs,\n      //byzantium, \n      status,\n      root\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      blockHash,\n      blockNumber,\n      //byzantium, \n      contractAddress,\n      cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n      from,\n      gasPrice: toJson(this.gasPrice),\n      gasUsed: toJson(this.gasUsed),\n      hash,\n      index,\n      logs,\n      logsBloom,\n      root,\n      status,\n      to\n    };\n  }\n  /**\n   *  @_ignore:\n   */\n  get length() {\n    return this.logs.length;\n  }\n  [_Symbol$iterator2]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: this.logs[index++],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The total fee for this transaction, in wei.\n   */\n  get fee() {\n    return this.gasUsed * this.gasPrice;\n  }\n  /**\n   *  Resolves to the block this transaction occurred in.\n   */\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n    return block;\n  }\n  /**\n   *  Resolves to the transaction this transaction occurred in.\n   */\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.hash);\n    if (tx == null) {\n      throw new Error(\"TODO\");\n    }\n    return tx;\n  }\n  /**\n   *  Resolves to the return value of the execution of this transaction.\n   *\n   *  Support for this feature is limited, as it requires an archive node\n   *  with the ``debug_`` or ``trace_`` API enabled.\n   */\n  async getResult() {\n    return await this.provider.getTransactionResult(this.hash);\n  }\n  /**\n   *  Resolves to the number of confirmations this transaction has.\n   */\n  async confirmations() {\n    return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n  }\n  /**\n   *  @_ignore:\n   */\n  removedEvent() {\n    return createRemovedTransactionFilter(this);\n  }\n  /**\n   *  @_ignore:\n   */\n  reorderedEvent(other) {\n    assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"reorderedEvent(other)\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n}\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nvar _startBlock = /*#__PURE__*/new WeakMap();\nexport class TransactionResponse {\n  /**\n   *  The provider this is connected to, which will influence how its\n   *  methods will resolve its async inspection methods.\n   */\n\n  /**\n   *  The block number of the block that this transaction was included in.\n   *\n   *  This is ``null`` for pending transactions.\n   */\n\n  /**\n   *  The blockHash of the block that this transaction was included in.\n   *\n   *  This is ``null`` for pending transactions.\n   */\n\n  /**\n   *  The index within the block that this transaction resides at.\n   */\n\n  /**\n   *  The transaction hash.\n   */\n\n  /**\n   *  The [[link-eip-2718]] transaction envelope type. This is\n   *  ``0`` for legacy transactions types.\n   */\n\n  /**\n   *  The receiver of this transaction.\n   *\n   *  If ``null``, then the transaction is an initcode transaction.\n   *  This means the result of executing the [[data]] will be deployed\n   *  as a new contract on chain (assuming it does not revert) and the\n   *  address may be computed using [[getCreateAddress]].\n   */\n\n  /**\n   *  The sender of this transaction. It is implicitly computed\n   *  from the transaction pre-image hash (as the digest) and the\n   *  [[signature]] using ecrecover.\n   */\n\n  /**\n   *  The nonce, which is used to prevent replay attacks and offer\n   *  a method to ensure transactions from a given sender are explicitly\n   *  ordered.\n   *\n   *  When sending a transaction, this must be equal to the number of\n   *  transactions ever sent by [[from]].\n   */\n\n  /**\n   *  The maximum units of gas this transaction can consume. If execution\n   *  exceeds this, the entries transaction is reverted and the sender\n   *  is charged for the full amount, despite not state changes being made.\n   */\n\n  /**\n   *  The gas price can have various values, depending on the network.\n   *\n   *  In modern networks, for transactions that are included this is\n   *  the //effective gas price// (the fee per gas that was actually\n   *  charged), while for transactions that have not been included yet\n   *  is the [[maxFeePerGas]].\n   *\n   *  For legacy transactions, or transactions on legacy networks, this\n   *  is the fee that will be charged per unit of gas the transaction\n   *  consumes.\n   */\n\n  /**\n   *  The maximum priority fee (per unit of gas) to allow a\n   *  validator to charge the sender. This is inclusive of the\n   *  [[maxFeeFeePerGas]].\n   */\n\n  /**\n   *  The maximum fee (per unit of gas) to allow this transaction\n   *  to charge the sender.\n   */\n\n  /**\n   *  The data.\n   */\n\n  /**\n   *  The value, in wei. Use [[formatEther]] to format this value\n   *  as ether.\n   */\n\n  /**\n   *  The chain ID.\n   */\n\n  /**\n   *  The signature.\n   */\n\n  /**\n   *  The [[link-eip-2930]] access list for transaction types that\n   *  support it, otherwise ``null``.\n   */\n\n  /**\n   *  @_ignore:\n   */\n  constructor(tx, provider) {\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"blockNumber\", void 0);\n    _defineProperty(this, \"blockHash\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"hash\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"to\", void 0);\n    _defineProperty(this, \"from\", void 0);\n    _defineProperty(this, \"nonce\", void 0);\n    _defineProperty(this, \"gasLimit\", void 0);\n    _defineProperty(this, \"gasPrice\", void 0);\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"value\", void 0);\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"accessList\", void 0);\n    _classPrivateFieldInitSpec(this, _startBlock, {\n      writable: true,\n      value: void 0\n    });\n    this.provider = provider;\n    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n    this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n    this.hash = tx.hash;\n    this.index = tx.index;\n    this.type = tx.type;\n    this.from = tx.from;\n    this.to = tx.to || null;\n    this.gasLimit = tx.gasLimit;\n    this.nonce = tx.nonce;\n    this.data = tx.data;\n    this.value = tx.value;\n    this.gasPrice = tx.gasPrice;\n    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n    this.chainId = tx.chainId;\n    this.signature = tx.signature;\n    this.accessList = tx.accessList != null ? tx.accessList : null;\n    _classPrivateFieldSet(this, _startBlock, -1);\n  }\n  /**\n   *  Returns a JSON-compatible representation of this transaction.\n   */\n  toJSON() {\n    const {\n      blockNumber,\n      blockHash,\n      index,\n      hash,\n      type,\n      to,\n      from,\n      nonce,\n      data,\n      signature,\n      accessList\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      accessList,\n      blockNumber,\n      blockHash,\n      chainId: toJson(this.chainId),\n      data,\n      from,\n      gasLimit: toJson(this.gasLimit),\n      gasPrice: toJson(this.gasPrice),\n      hash,\n      maxFeePerGas: toJson(this.maxFeePerGas),\n      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n      nonce,\n      signature,\n      to,\n      index,\n      type,\n      value: toJson(this.value)\n    };\n  }\n  /**\n   *  Resolves to the Block that this transaction was included in.\n   *\n   *  This will return null if the transaction has not been included yet.\n   */\n  async getBlock() {\n    let blockNumber = this.blockNumber;\n    if (blockNumber == null) {\n      const tx = await this.getTransaction();\n      if (tx) {\n        blockNumber = tx.blockNumber;\n      }\n    }\n    if (blockNumber == null) {\n      return null;\n    }\n    const block = this.provider.getBlock(blockNumber);\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n    return block;\n  }\n  /**\n   *  Resolves to this transaction being re-requested from the\n   *  provider. This can be used if you have an unmined transaction\n   *  and wish to get an up-to-date populated instance.\n   */\n  async getTransaction() {\n    return this.provider.getTransaction(this.hash);\n  }\n  /**\n   *  Resolve to the number of confirmations this transaction has.\n   */\n  async confirmations() {\n    if (this.blockNumber == null) {\n      const {\n        tx,\n        blockNumber\n      } = await resolveProperties({\n        tx: this.getTransaction(),\n        blockNumber: this.provider.getBlockNumber()\n      });\n      // Not mined yet...\n      if (tx == null || tx.blockNumber == null) {\n        return 0;\n      }\n      return blockNumber - tx.blockNumber + 1;\n    }\n    const blockNumber = await this.provider.getBlockNumber();\n    return blockNumber - this.blockNumber + 1;\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(_confirms, _timeout) {\n    const confirms = _confirms == null ? 1 : _confirms;\n    const timeout = _timeout == null ? 0 : _timeout;\n    let startBlock = _classPrivateFieldGet(this, _startBlock);\n    let nextScan = -1;\n    let stopScanning = startBlock === -1 ? true : false;\n    const checkReplacement = async () => {\n      // Get the current transaction count for this sender\n      if (stopScanning) {\n        return null;\n      }\n      const {\n        blockNumber,\n        nonce\n      } = await resolveProperties({\n        blockNumber: this.provider.getBlockNumber(),\n        nonce: this.provider.getTransactionCount(this.from)\n      });\n      // No transaction or our nonce has not been mined yet; but we\n      // can start scanning later when we do start\n      if (nonce < this.nonce) {\n        startBlock = blockNumber;\n        return;\n      }\n      // We were mined; no replacement\n      if (stopScanning) {\n        return null;\n      }\n      const mined = await this.getTransaction();\n      if (mined && mined.blockNumber != null) {\n        return;\n      }\n      // We were replaced; start scanning for that transaction\n      // Starting to scan; look back a few extra blocks for safety\n      if (nextScan === -1) {\n        nextScan = startBlock - 3;\n        if (nextScan < _classPrivateFieldGet(this, _startBlock)) {\n          nextScan = _classPrivateFieldGet(this, _startBlock);\n        }\n      }\n      while (nextScan <= blockNumber) {\n        // Get the next block to scan\n        if (stopScanning) {\n          return null;\n        }\n        const block = await this.provider.getBlock(nextScan, true);\n        // This should not happen; but we'll try again shortly\n        if (block == null) {\n          return;\n        }\n        // We were mined; no replacement\n        for (const hash of block) {\n          if (hash === this.hash) {\n            return;\n          }\n        }\n        // Search for the transaction that replaced us\n        for (let i = 0; i < block.length; i++) {\n          const tx = await block.getTransaction(i);\n          if (tx.from === this.from && tx.nonce === this.nonce) {\n            // Get the receipt\n            if (stopScanning) {\n              return null;\n            }\n            const receipt = await this.provider.getTransactionReceipt(tx.hash);\n            // This should not happen; but we'll try again shortly\n            if (receipt == null) {\n              return;\n            }\n            // We will retry this on the next block (this case could be optimized)\n            if (blockNumber - receipt.blockNumber + 1 < confirms) {\n              return;\n            }\n            // The reason we were replaced\n            let reason = \"replaced\";\n            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n              reason = \"repriced\";\n            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n              reason = \"cancelled\";\n            }\n            assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n              reason,\n              replacement: tx.replaceableTransaction(startBlock),\n              hash: tx.hash,\n              receipt\n            });\n          }\n        }\n        nextScan++;\n      }\n      return;\n    };\n    const checkReceipt = receipt => {\n      if (receipt == null || receipt.status !== 0) {\n        return receipt;\n      }\n      assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n        action: \"sendTransaction\",\n        data: null,\n        reason: null,\n        invocation: null,\n        revert: null,\n        transaction: {\n          to: receipt.to,\n          from: receipt.from,\n          data: \"\" // @TODO: in v7, split out sendTransaction properties\n        },\n        receipt\n      });\n    };\n    const receipt = await this.provider.getTransactionReceipt(this.hash);\n    if (confirms === 0) {\n      return checkReceipt(receipt);\n    }\n    if (receipt) {\n      if ((await receipt.confirmations()) >= confirms) {\n        return checkReceipt(receipt);\n      }\n    } else {\n      // Check for a replacement; throws if a replacement was found\n      await checkReplacement();\n      // Allow null only when the confirms is 0\n      if (confirms === 0) {\n        return null;\n      }\n    }\n    const waiter = new Promise((resolve, reject) => {\n      // List of things to cancel when we have a result (one way or the other)\n      const cancellers = [];\n      const cancel = () => {\n        cancellers.forEach(c => c());\n      };\n      // On cancel, stop scanning for replacements\n      cancellers.push(() => {\n        stopScanning = true;\n      });\n      // Set up any timeout requested\n      if (timeout > 0) {\n        const timer = setTimeout(() => {\n          cancel();\n          reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n        }, timeout);\n        cancellers.push(() => {\n          clearTimeout(timer);\n        });\n      }\n      const txListener = async receipt => {\n        // Done; return it!\n        if ((await receipt.confirmations()) >= confirms) {\n          cancel();\n          try {\n            resolve(checkReceipt(receipt));\n          } catch (error) {\n            reject(error);\n          }\n        }\n      };\n      cancellers.push(() => {\n        this.provider.off(this.hash, txListener);\n      });\n      this.provider.on(this.hash, txListener);\n      // We support replacement detection; start checking\n      if (startBlock >= 0) {\n        const replaceListener = async () => {\n          try {\n            // Check for a replacement; this throws only if one is found\n            await checkReplacement();\n          } catch (error) {\n            // We were replaced (with enough confirms); re-throw the error\n            if (isError(error, \"TRANSACTION_REPLACED\")) {\n              cancel();\n              reject(error);\n              return;\n            }\n          }\n          // Rescheudle a check on the next block\n          if (!stopScanning) {\n            this.provider.once(\"block\", replaceListener);\n          }\n        };\n        cancellers.push(() => {\n          this.provider.off(\"block\", replaceListener);\n        });\n        this.provider.once(\"block\", replaceListener);\n      }\n    });\n    return await waiter;\n  }\n  /**\n   *  Returns ``true`` if this transaction has been included.\n   *\n   *  This is effective only as of the time the TransactionResponse\n   *  was instantiated. To get up-to-date information, use\n   *  [[getTransaction]].\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  non-null property values for properties that are null for\n   *  unmined transactions.\n   */\n  isMined() {\n    return this.blockHash != null;\n  }\n  /**\n   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n   *  transaction.\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  the ``null``-ness for hardfork-specific properties set correctly.\n   */\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n   *  transaction. See [[link-eip-2070]].\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  the ``null``-ness for hardfork-specific properties set correctly.\n   */\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if the transaction is a London (i.e. ``type == 2``)\n   *  transaction. See [[link-eip-1559]].\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  the ``null``-ness for hardfork-specific properties set correctly.\n   */\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Returns a filter which can be used to listen for orphan events\n   *  that evict this transaction.\n   */\n  removedEvent() {\n    assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createRemovedTransactionFilter(this);\n  }\n  /**\n   *  Returns a filter which can be used to listen for orphan events\n   *  that re-order this event against %%other%%.\n   */\n  reorderedEvent(other) {\n    assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n  /**\n   *  Returns a new TransactionResponse instance which has the ability to\n   *  detect (and throw an error) if the transaction is replaced, which\n   *  will begin scanning at %%startBlock%%.\n   *\n   *  This should generally not be used by developers and is intended\n   *  primarily for internal use. Setting an incorrect %%startBlock%% can\n   *  have devastating performance consequences if used incorrectly.\n   */\n  replaceableTransaction(startBlock) {\n    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n    const tx = new TransactionResponse(this, this.provider);\n    _classPrivateFieldSet(tx, _startBlock, startBlock);\n    return tx;\n  }\n}\nfunction createOrphanedBlockFilter(block) {\n  return {\n    orphan: \"drop-block\",\n    hash: block.hash,\n    number: block.number\n  };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n  return {\n    orphan: \"reorder-transaction\",\n    tx,\n    other\n  };\n}\nfunction createRemovedTransactionFilter(tx) {\n  return {\n    orphan: \"drop-transaction\",\n    tx\n  };\n}\nfunction createRemovedLogFilter(log) {\n  return {\n    orphan: \"drop-log\",\n    log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    }\n  };\n}","map":{"version":3,"sources":["../../src.ts/providers/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n    if (value == null) {\n        return null;\n    }\n    return value;\n}\nfunction toJson(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    gasPrice;\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxFeePerGas;\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n        defineProperties(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req) {\n    const result = {};\n    // These could be addresses, ENS names or Addressables\n    if (req.to) {\n        result.to = req.to;\n    }\n    if (req.from) {\n        result.from = req.from;\n    }\n    if (req.data) {\n        result.data = hexlify(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getBigInt(req[key], `request.${key}`);\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getNumber(req[key], `request.${key}`);\n    }\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n    if (\"blockTag\" in req) {\n        result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n    return result;\n}\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    number;\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    hash;\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    timestamp;\n    /**\n     *  The block hash of the parent block.\n     */\n    parentHash;\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    nonce;\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    difficulty;\n    /**\n     *  The total gas limit for this block.\n     */\n    gasLimit;\n    /**\n     *  The total gas used in this block.\n     */\n    gasUsed;\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    miner;\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    extraData;\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    baseFeePerGas;\n    #transactions;\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block, provider) {\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof (tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n        defineProperties(this, {\n            provider,\n            hash: getValue(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */\n    get transactions() {\n        return this.#transactions.map((tx) => {\n            if (typeof (tx) === \"string\") {\n                return tx;\n            }\n            return tx.hash;\n        });\n    }\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions() {\n        const txs = this.#transactions.slice();\n        // Doesn't matter...\n        if (txs.length === 0) {\n            return [];\n        }\n        // Make sure we prefetched the transactions\n        assert(typeof (txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n        return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, nonce, number, parentHash, timestamp, transactions } = this;\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash, miner, nonce, number, parentHash, timestamp,\n            transactions,\n        };\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The number of transactions in this block.\n     */\n    get length() { return this.#transactions.length; }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date() {\n        if (this.timestamp == null) {\n            return null;\n        }\n        return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash) {\n        // Find the internal value by its index or hash\n        let tx = undefined;\n        if (typeof (indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n        }\n        else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof (v) === \"string\") {\n                    if (v !== hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n                else {\n                    if (v.hash === hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) {\n            throw new Error(\"no such tx\");\n        }\n        if (typeof (tx) === \"string\") {\n            return (await this.provider.getTransaction(tx));\n        }\n        else {\n            return tx;\n        }\n    }\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash) {\n        const txs = this.prefetchedTransactions;\n        if (typeof (indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) {\n                return tx;\n            }\n        }\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined() { return !!this.hash; }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon() {\n        return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent() {\n        if (!this.isMined()) {\n            throw new Error(\"\");\n        }\n        return createOrphanedBlockFilter(this);\n    }\n}\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    transactionHash;\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    blockHash;\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    blockNumber;\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    removed;\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    address;\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    data;\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    topics;\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    index;\n    /**\n     *  The index within the transaction of this log.\n     */\n    transactionIndex;\n    /**\n     *  @_ignore:\n     */\n    constructor(log, provider) {\n        this.provider = provider;\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON() {\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return block;\n    }\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return tx;\n    }\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt() {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n        return receipt;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedLogFilter(this);\n    }\n}\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The address the transaction was sent to.\n     */\n    to;\n    /**\n     *  The sender of the transaction.\n     */\n    from;\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    contractAddress;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    index;\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    blockHash;\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    blockNumber;\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    logsBloom;\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    gasUsed;\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    cumulativeGasUsed;\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    gasPrice;\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    type;\n    //readonly byzantium!: boolean;\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    status;\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    root;\n    #logs;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        }\n        else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n        defineProperties(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n    /**\n     *  The logs for this transaction.\n     */\n    get logs() { return this.#logs; }\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON() {\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, \n        status, root } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n    /**\n     *  @_ignore:\n     */\n    get length() { return this.logs.length; }\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee() {\n        return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) {\n            throw new Error(\"TODO\");\n        }\n        return tx;\n    }\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult() {\n        return (await this.provider.getTransactionResult(this.hash));\n    }\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other) {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    provider;\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockNumber;\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockHash;\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    index;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    type;\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    to;\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    from;\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    nonce;\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    gasLimit;\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    gasPrice;\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    maxFeePerGas;\n    /**\n     *  The data.\n     */\n    data;\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    value;\n    /**\n     *  The chain ID.\n     */\n    chainId;\n    /**\n     *  The signature.\n     */\n    signature;\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    accessList;\n    #startBlock;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.provider = provider;\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;\n        this.hash = tx.hash;\n        this.index = tx.index;\n        this.type = tx.type;\n        this.from = tx.from;\n        this.to = tx.to || null;\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n        this.accessList = (tx.accessList != null) ? tx.accessList : null;\n        this.#startBlock = -1;\n    }\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON() {\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            accessList, blockNumber, blockHash,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock() {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n                blockNumber = tx.blockNumber;\n            }\n        }\n        if (blockNumber == null) {\n            return null;\n        }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction() {\n        return this.provider.getTransaction(this.hash);\n    }\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) {\n                return 0;\n            }\n            return blockNumber - tx.blockNumber + 1;\n        }\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms, _timeout) {\n        const confirms = (_confirms == null) ? 1 : _confirms;\n        const timeout = (_timeout == null) ? 0 : _timeout;\n        let startBlock = this.#startBlock;\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true : false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) {\n                return null;\n            }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n            // We were mined; no replacement\n            if (stopScanning) {\n                return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n                return;\n            }\n            // We were replaced; start scanning for that transaction\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) {\n                    nextScan = this.#startBlock;\n                }\n            }\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) {\n                    return null;\n                }\n                const block = await this.provider.getBlock(nextScan, true);\n                // This should not happen; but we'll try again shortly\n                if (block == null) {\n                    return;\n                }\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) {\n                        return;\n                    }\n                }\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx = await block.getTransaction(i);\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) {\n                            return null;\n                        }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) {\n                            return;\n                        }\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {\n                            return;\n                        }\n                        // The reason we were replaced\n                        let reason = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        }\n                        else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\";\n                        }\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n                nextScan++;\n            }\n            return;\n        };\n        const checkReceipt = (receipt) => {\n            if (receipt == null || receipt.status !== 0) {\n                return receipt;\n            }\n            assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null, reason: null, invocation: null, revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                }, receipt\n            });\n        };\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n        if (confirms === 0) {\n            return checkReceipt(receipt);\n        }\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) {\n                return checkReceipt(receipt);\n            }\n        }\n        else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n            // Allow null only when the confirms is 0\n            if (confirms === 0) {\n                return null;\n            }\n        }\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers = [];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n            const txListener = async (receipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n                    }\n                    catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n        return await waiter;\n    }\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined() {\n        return (this.blockHash != null);\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent() {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other) {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock) {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\nfunction createOrphanedBlockFilter(block) {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\nfunction createRemovedTransactionFilter(tx) {\n    return { orphan: \"drop-transaction\", tx };\n}\nfunction createRemovedLogFilter(log) {\n    return { orphan: \"drop-log\", log: {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            address: log.address,\n            data: log.data,\n            topics: Object.freeze(log.topics.slice()),\n            index: log.index\n        } };\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}