{"ast":null,"code":"// Electronic Code Book\nimport { ModeOfOperation } from \"./mode.js\";\nexport class ECB extends ModeOfOperation {\n  constructor(key) {\n    super(\"ECB\", key, ECB);\n  }\n  encrypt(plaintext) {\n    if (plaintext.length % 16) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n    }\n    const crypttext = new Uint8Array(plaintext.length);\n    for (let i = 0; i < plaintext.length; i += 16) {\n      crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n    }\n    return crypttext;\n  }\n  decrypt(crypttext) {\n    if (crypttext.length % 16) {\n      throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n    }\n    const plaintext = new Uint8Array(crypttext.length);\n    for (let i = 0; i < crypttext.length; i += 16) {\n      plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n    }\n    return plaintext;\n  }\n}","map":{"version":3,"sources":["../src.ts/mode-ecb.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,eAAe,QAAQ,WAAW;AAE3C,OAAM,MAAO,GAAI,SAAQ,eAAe,CAAA;EAEtC,WAAA,CAAY,GAAe,EAAA;IACzB,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EACxB;EAEA,OAAO,CAAC,SAAqB,EAAA;IAC3B,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,EAAE;MACvB,MAAM,IAAI,SAAS,CAAC,uDAAuD,CAAC;IAC/E;IAED,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;IAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;MAC3C,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACpE;IAED,OAAO,SAAS;EAClB;EAEA,OAAO,CAAC,SAAqB,EAAA;IAC3B,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,EAAE;MACvB,MAAM,IAAI,SAAS,CAAC,wDAAwD,CAAC;IAChF;IAED,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;IAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;MAC3C,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACpE;IAED,OAAO,SAAS;EAClB;AACD","sourceRoot":"","sourcesContent":["// Electronic Code Book\nimport { ModeOfOperation } from \"./mode.js\";\nexport class ECB extends ModeOfOperation {\n    constructor(key) {\n        super(\"ECB\", key, ECB);\n    }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const crypttext = new Uint8Array(plaintext.length);\n        for (let i = 0; i < plaintext.length; i += 16) {\n            crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n        }\n        return crypttext;\n    }\n    decrypt(crypttext) {\n        if (crypttext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(crypttext.length);\n        for (let i = 0; i < crypttext.length; i += 16) {\n            plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n        }\n        return plaintext;\n    }\n}\n//# sourceMappingURL=mode-ecb.js.map"]},"metadata":{},"sourceType":"module"}