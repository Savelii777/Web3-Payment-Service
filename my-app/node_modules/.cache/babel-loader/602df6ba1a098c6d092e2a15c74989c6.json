{"ast":null,"code":"/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber {\n  #provider;\n  #filter;\n  /**\n   *  The filter.\n   */\n  get filter() {\n    return JSON.parse(this.#filter);\n  }\n  #filterId;\n  #paused;\n  #emitPromise;\n  /**\n   *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n   *  to %%filter%%.\n   */\n  constructor(provider, filter) {\n    this.#provider = provider;\n    this.#filter = JSON.stringify(filter);\n    this.#filterId = null;\n    this.#paused = null;\n    this.#emitPromise = null;\n  }\n  start() {\n    this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      this.#provider._register(filterId, this);\n      return filterId;\n    });\n  }\n  stop() {\n    this.#filterId.then(filterId => {\n      this.#provider.send(\"eth_unsubscribe\", [filterId]);\n    });\n    this.#filterId = null;\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    this.#paused = !!dropWhilePaused;\n  }\n  resume() {\n    this.#paused = null;\n  }\n  /**\n   *  @_ignore:\n   */\n  _handleMessage(message) {\n    if (this.#filterId == null) {\n      return;\n    }\n    if (this.#paused === null) {\n      let emitPromise = this.#emitPromise;\n      if (emitPromise == null) {\n        emitPromise = this._emit(this.#provider, message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(this.#provider, message);\n        });\n      }\n      this.#emitPromise = emitPromise.then(() => {\n        if (this.#emitPromise === emitPromise) {\n          this.#emitPromise = null;\n        }\n      });\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to emit the events on the\n   *  provider.\n   */\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n  #logFilter;\n  /**\n   *  The filter.\n   */\n  get logFilter() {\n    return JSON.parse(this.#logFilter);\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    this.#logFilter = JSON.stringify(filter);\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n  #callbacks;\n  // Maps each filterId to its subscriber\n  #subs;\n  // If any events come in before a subscriber has finished\n  // registering, queue them\n  #pending;\n  /**\n   *  Creates a new **SocketProvider** connected to %%network%%.\n   *\n   *  If unspecified, the network will be discovered.\n   */\n  constructor(network, _options) {\n    // Copy the options\n    const options = Object.assign({}, _options != null ? _options : {});\n    // Support for batches is generally not supported for\n    // connection-base providers; if this changes in the future\n    // the _send should be updated to reflect this\n    assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n    options.batchMaxCount = 1;\n    // Socket-based Providers (generally) cannot change their network,\n    // since they have a long-lived connection; but let people override\n    // this if they have just cause.\n    if (options.staticNetwork == null) {\n      options.staticNetwork = true;\n    }\n    super(network, options);\n    this.#callbacks = new Map();\n    this.#subs = new Map();\n    this.#pending = new Map();\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Register a new subscriber. This is used internalled by Subscribers\n   *  and generally is unecessary unless extending capabilities.\n   */\n  _register(filterId, subscriber) {\n    this.#subs.set(filterId, subscriber);\n    const pending = this.#pending.get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      this.#pending.delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      this.#callbacks.set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  /**\n   *  Sub-classes **must** call this with messages received over their\n   *  transport to be processed and dispatched.\n   */\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (result && typeof result === \"object\" && \"id\" in result) {\n      const callback = this.#callbacks.get(result.id);\n      if (callback == null) {\n        this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n          reasonCode: \"UNKNOWN_ID\",\n          result\n        }));\n        return;\n      }\n      this.#callbacks.delete(result.id);\n      callback.resolve(result);\n    } else if (result && result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = this.#subs.get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = this.#pending.get(filterId);\n        if (pending == null) {\n          pending = [];\n          this.#pending.set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    } else {\n      this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n        reasonCode: \"UNEXPECTED_MESSAGE\",\n        result\n      }));\n      return;\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to send %%message%% over their\n   *  transport.\n   */\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}","map":{"version":3,"sources":["../../src.ts/providers/provider-socket.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber {\n    #provider;\n    #filter;\n    /**\n     *  The filter.\n     */\n    get filter() { return JSON.parse(this.#filter); }\n    #filterId;\n    #paused;\n    #emitPromise;\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */\n    constructor(provider, filter) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n    start() {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {\n            ;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n    stop() {\n        (this.#filterId).then((filterId) => {\n            this.#provider.send(\"eth_unsubscribe\", [filterId]);\n        });\n        this.#filterId = null;\n    }\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused) {\n        assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n    resume() {\n        this.#paused = null;\n    }\n    /**\n     *  @_ignore:\n     */\n    _handleMessage(message) {\n        if (this.#filterId == null) {\n            return;\n        }\n        if (this.#paused === null) {\n            let emitPromise = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            }\n            else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */\n    async _emit(provider, message) {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider) {\n        super(provider, [\"newHeads\"]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider) {\n        super(provider, [\"newPendingTransactions\"]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"pending\", message);\n    }\n}\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter;\n    /**\n     *  The filter.\n     */\n    get logFilter() { return JSON.parse(this.#logFilter); }\n    /**\n     *  @_ignore:\n     */\n    constructor(provider, filter) {\n        super(provider, [\"logs\", filter]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n    async _emit(provider, message) {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n    #callbacks;\n    // Maps each filterId to its subscriber\n    #subs;\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending;\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */\n    constructor(network, _options) {\n        // Copy the options\n        const options = Object.assign({}, (_options != null) ? _options : {});\n        // Support for batches is generally not supported for\n        // connection-base providers; if this changes in the future\n        // the _send should be updated to reflect this\n        assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n        options.batchMaxCount = 1;\n        // Socket-based Providers (generally) cannot change their network,\n        // since they have a long-lived connection; but let people override\n        // this if they have just cause.\n        if (options.staticNetwork == null) {\n            options.staticNetwork = true;\n        }\n        super(network, options);\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n    _getSubscriber(sub) {\n        switch (sub.type) {\n            case \"close\":\n                return new UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */\n    _register(filterId, subscriber) {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n    async _send(payload) {\n        // WebSocket provider doesn't accept batches\n        assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n        // @TODO: stringify payloads here and store to prevent mutations\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n        return [await promise];\n    }\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n    /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */\n    async _processMessage(message) {\n        const result = (JSON.parse(message));\n        if (result && typeof (result) === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n            callback.resolve(result);\n        }\n        else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            }\n            else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n        }\n        else {\n            this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */\n    async _write(message) {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\n//# sourceMappingURL=provider-socket.js.map"]},"metadata":{},"sourceType":"module"}