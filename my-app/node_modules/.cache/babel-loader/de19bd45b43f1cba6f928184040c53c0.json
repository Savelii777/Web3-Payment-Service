{"ast":null,"code":"/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\nnull;\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\nexport { computeHmac, randomBytes, keccak256, ripemd160, sha256, sha512, pbkdf2, scrypt, scryptSync };\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock() {\n  computeHmac.lock();\n  keccak256.lock();\n  pbkdf2.lock();\n  randomBytes.lock();\n  ripemd160.lock();\n  scrypt.lock();\n  scryptSync.lock();\n  sha256.lock();\n  sha512.lock();\n  randomBytes.lock();\n}\nexport { lock };","map":{"version":3,"sources":["../../src.ts/crypto/index.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,IAAI;AAEJ;AACA,SAAS,WAAW,QAAQ,WAAW;AACvC,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,SAAS,QAAQ,gBAAgB;AAC1C,SAAS,MAAM,QAAQ,aAAa;AACpC,SAAS,WAAW,QAAQ,aAAa;AACzC,SAAS,MAAM,EAAE,UAAU,QAAQ,aAAa;AAChD,SAAS,MAAM,EAAE,MAAM,QAAQ,WAAW;AAE1C,SACI,WAAW,EAEX,WAAW,EAEX,SAAS,EACT,SAAS,EACT,MAAM,EAAE,MAAM,EAEd,MAAM,EACN,MAAM,EAAE,UAAU;AAGtB,SAAS,UAAU,QAAQ,kBAAkB;AAC7C,SAAS,SAAS,QAAQ,gBAAgB;AAE1C;;;AAGG;AACH,SAAS,IAAI,CAAA,EAAA;EACT,WAAW,CAAC,IAAI,CAAA,CAAE;EAClB,SAAS,CAAC,IAAI,CAAA,CAAE;EAChB,MAAM,CAAC,IAAI,CAAA,CAAE;EACb,WAAW,CAAC,IAAI,CAAA,CAAE;EAClB,SAAS,CAAC,IAAI,CAAA,CAAE;EAChB,MAAM,CAAC,IAAI,CAAA,CAAE;EACb,UAAU,CAAC,IAAI,CAAA,CAAE;EACjB,MAAM,CAAC,IAAI,CAAA,CAAE;EACb,MAAM,CAAC,IAAI,CAAA,CAAE;EACb,WAAW,CAAC,IAAI,CAAA,CAAE;AACtB;AAEA,SAAS,IAAI","sourceRoot":"","sourcesContent":["/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\nnull;\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\nexport { computeHmac, randomBytes, keccak256, ripemd160, sha256, sha512, pbkdf2, scrypt, scryptSync };\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock() {\n    computeHmac.lock();\n    keccak256.lock();\n    pbkdf2.lock();\n    randomBytes.lock();\n    ripemd160.lock();\n    scrypt.lock();\n    scryptSync.lock();\n    sha256.lock();\n    sha512.lock();\n    randomBytes.lock();\n}\nexport { lock };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}