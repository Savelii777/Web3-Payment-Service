{"ast":null,"code":"/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload {\n  /**\n   *  The event filter.\n   */\n  filter;\n  /**\n   *  The **EventEmitterable**.\n   */\n  emitter;\n  #listener;\n  /**\n   *  Create a new **EventPayload** for %%emitter%% with\n   *  the %%listener%% and for %%filter%%.\n   */\n  constructor(emitter, listener, filter) {\n    this.#listener = listener;\n    defineProperties(this, {\n      emitter,\n      filter\n    });\n  }\n  /**\n   *  Unregister the triggered listener for future events.\n   */\n  async removeListener() {\n    if (this.#listener == null) {\n      return;\n    }\n    await this.emitter.off(this.filter, this.#listener);\n  }\n}","map":{"version":3,"sources":["../../src.ts/utils/events.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;AACH,SAAS,gBAAgB,QAAQ,iBAAiB;AA+DlD;;;;AAIG;AACH,OAAM,MAAO,YAAY,CAAA;EACrB;;AAEG;EACM,MAAM;EAEf;;AAEG;EACM,OAAO;EAEP,CAAA,QAAS;EAElB;;;AAGG;EACH,WAAA,CAAY,OAA4B,EAAE,QAAyB,EAAE,MAAS,EAAA;IAC1E,IAAI,CAAC,CAAA,QAAS,GAAG,QAAQ;IACzB,gBAAgB,CAAoB,IAAI,EAAE;MAAE,OAAO;MAAE;IAAM,CAAE,CAAC;EAClE;EAEA;;AAEG;EACH,MAAM,cAAc,CAAA,EAAA;IAChB,IAAI,IAAI,CAAC,CAAA,QAAS,IAAI,IAAI,EAAE;MAAE;IAAS;IACvC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA,QAAS,CAAC;EACvD;AACH","sourceRoot":"","sourcesContent":["/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload {\n    /**\n     *  The event filter.\n     */\n    filter;\n    /**\n     *  The **EventEmitterable**.\n     */\n    emitter;\n    #listener;\n    /**\n     *  Create a new **EventPayload** for %%emitter%% with\n     *  the %%listener%% and for %%filter%%.\n     */\n    constructor(emitter, listener, filter) {\n        this.#listener = listener;\n        defineProperties(this, { emitter, filter });\n    }\n    /**\n     *  Unregister the triggered listener for future events.\n     */\n    async removeListener() {\n        if (this.#listener == null) {\n            return;\n        }\n        await this.emitter.off(this.filter, this.#listener);\n    }\n}\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}