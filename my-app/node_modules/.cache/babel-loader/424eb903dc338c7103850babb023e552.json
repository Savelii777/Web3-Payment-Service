{"ast":null,"code":"var _jsxFileName = \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport Web3 from \"web3\";\nimport { useState } from \"react\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList from \"./TxList\";\nimport { initializeApp } from \"firebase/app\";\n// import { ethers } from \"ethers\";\nimport { getAuth, signInWithCustomToken, signOut } from \"firebase/auth\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport ConnectWalletButton from \"./components/ConnectWalletButton\";\nimport mobileCheck from \"./helpers/mobileCheck\";\nimport getLinker from \"./helpers/deepLink\";\n\n// const startPayment = async ({ setError, setTxs, ether, addr }) => {\n//   try {\n//     if (!window.ethereum)\n//       throw new Error(\"No crypto wallet found. Please install it.\");\n//\n//     await window.ethereum.send(\"eth_requestAccounts\");\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     const signer = provider.getSigner();\n//     ethers.utils.getAddress(addr);\n//     const tx = await signer.sendTransaction({\n//       to: addr,\n//       value: ethers.utils.parseEther(ether)\n//     });\n//     console.log({ ether, addr });\n//     console.log(\"tx\", tx);\n//     setTxs([tx]);\n//   } catch (err) {\n//     setError(err.message);\n//   }\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB1fGu9E8w2NUsf05uMKH1Coq6sEx6kVm0\",\n  authDomain: \"metamsk-a5083.firebaseapp.com\",\n  databaseURL: \"https://metamsk-a5083-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"metamsk-a5083\",\n  storageBucket: \"metamsk-a5083.appspot.com\",\n  messagingSenderId: \"807002056444\",\n  appId: \"1:807002056444:web:6fe0e3850f16a7988bd979\",\n  measurementId: \"G-S29PJYNV79\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst App = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [address, setAddress] = useState(\"\");\n  const [error, setError] = useState();\n  const [txs, setTxs] = useState([]);\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   const data = new FormData(e.target);\n  //   setError();\n  //   await startPayment({\n  //     setError,\n  //     setTxs,\n  //     ether: data.get(\"ether\"),\n  //     addr: data.get(\"addr\")\n  //   });\n  // };\n  const onPressConnect = async () => {\n    setLoading(true);\n    try {\n      var _window, _window$ethereum;\n      const yourWebUrl = \"mysite.com\"; // Replace with your domain\n      const deepLink = `https://metamask.app.link/dapp/${yourWebUrl}`;\n      const downloadMetamaskUrl = \"https://metamask.io/download.html\";\n      if ((_window = window) !== null && _window !== void 0 && (_window$ethereum = _window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.isMetaMask) {\n        // Desktop browser\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const account = Web3.utils.toChecksumAddress(accounts[0]);\n        await handleLogin(account);\n      } else if (mobileCheck()) {\n        // Mobile browser\n        const linker = getLinker(downloadMetamaskUrl);\n        linker.openURL(deepLink);\n      } else {\n        window.open(downloadMetamaskUrl);\n      }\n    } catch (error) {\n      console.log(error);\n      setAddress(\"\");\n    }\n    setLoading(false);\n  };\n  const handleLogin = async address => {\n    var _response$data, _jwtResponse$data;\n    const baseUrl = \"http://localhost:4000\";\n    const response = await axios.get(`${baseUrl}/message?address=${address}`);\n    const messageToSign = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.messageToSign;\n    if (!messageToSign) {\n      throw new Error(\"Invalid message to sign\");\n    }\n    const web3 = new Web3(Web3.givenProvider);\n    const signature = await web3.eth.personal.sign(messageToSign, address);\n    const jwtResponse = await axios.get(`${baseUrl}/jwt?address=${address}&signature=${signature}`);\n    const customToken = jwtResponse === null || jwtResponse === void 0 ? void 0 : (_jwtResponse$data = jwtResponse.data) === null || _jwtResponse$data === void 0 ? void 0 : _jwtResponse$data.customToken;\n    if (!customToken) {\n      throw new Error(\"Invalid JWT\");\n    }\n    await signInWithCustomToken(auth, customToken);\n    setAddress(address);\n  };\n  const onPressLogout = () => {\n    setAddress(\"\");\n    signOut(auth);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n        onPressConnect: onPressConnect,\n        onPressLogout: onPressLogout,\n        loading: loading,\n        address: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eIMtp9fc/BZKDr1otFHDgEYNl1g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Web3","useState","ErrorMessage","TxList","initializeApp","getAuth","signInWithCustomToken","signOut","axios","ConnectWalletButton","mobileCheck","getLinker","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","App","_s","loading","setLoading","address","setAddress","error","setError","txs","setTxs","onPressConnect","_window","_window$ethereum","yourWebUrl","deepLink","downloadMetamaskUrl","window","ethereum","isMetaMask","accounts","request","method","account","utils","toChecksumAddress","handleLogin","linker","openURL","open","console","log","_response$data","_jwtResponse$data","baseUrl","response","get","messageToSign","data","Error","web3","givenProvider","signature","eth","personal","sign","jwtResponse","customToken","onPressLogout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/savelii/Рабочий стол/Web3-Login/my-app/src/App.js"],"sourcesContent":["import Web3 from \"web3\";\nimport { useState } from \"react\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList from \"./TxList\";\nimport { initializeApp } from \"firebase/app\";\n// import { ethers } from \"ethers\";\nimport { getAuth, signInWithCustomToken, signOut } from \"firebase/auth\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport ConnectWalletButton from \"./components/ConnectWalletButton\";\nimport mobileCheck from \"./helpers/mobileCheck\";\nimport getLinker from \"./helpers/deepLink\";\n\n// const startPayment = async ({ setError, setTxs, ether, addr }) => {\n//   try {\n//     if (!window.ethereum)\n//       throw new Error(\"No crypto wallet found. Please install it.\");\n//\n//     await window.ethereum.send(\"eth_requestAccounts\");\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     const signer = provider.getSigner();\n//     ethers.utils.getAddress(addr);\n//     const tx = await signer.sendTransaction({\n//       to: addr,\n//       value: ethers.utils.parseEther(ether)\n//     });\n//     console.log({ ether, addr });\n//     console.log(\"tx\", tx);\n//     setTxs([tx]);\n//   } catch (err) {\n//     setError(err.message);\n//   }\n// };\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB1fGu9E8w2NUsf05uMKH1Coq6sEx6kVm0\",\n  authDomain: \"metamsk-a5083.firebaseapp.com\",\n  databaseURL: \"https://metamsk-a5083-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"metamsk-a5083\",\n  storageBucket: \"metamsk-a5083.appspot.com\",\n  messagingSenderId: \"807002056444\",\n  appId: \"1:807002056444:web:6fe0e3850f16a7988bd979\",\n  measurementId: \"G-S29PJYNV79\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [address, setAddress] = useState(\"\");\n  const [error, setError] = useState();\n  const [txs, setTxs] = useState([]);\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   const data = new FormData(e.target);\n  //   setError();\n  //   await startPayment({\n  //     setError,\n  //     setTxs,\n  //     ether: data.get(\"ether\"),\n  //     addr: data.get(\"addr\")\n  //   });\n  // };\n  const onPressConnect = async () => {\n    setLoading(true);\n\n    try {\n      const yourWebUrl = \"mysite.com\"; // Replace with your domain\n      const deepLink = `https://metamask.app.link/dapp/${yourWebUrl}`;\n      const downloadMetamaskUrl = \"https://metamask.io/download.html\";\n\n      if (window?.ethereum?.isMetaMask) {\n        // Desktop browser\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n\n        const account = Web3.utils.toChecksumAddress(accounts[0]);\n        await handleLogin(account);\n      } else if (mobileCheck()) {\n        // Mobile browser\n        const linker = getLinker(downloadMetamaskUrl);\n        linker.openURL(deepLink);\n      } else {\n        window.open(downloadMetamaskUrl);\n      }\n    } catch (error) {\n      console.log(error);\n      setAddress(\"\");\n    }\n\n    setLoading(false);\n  };\n\n  const handleLogin = async (address) => {\n    const baseUrl = \"http://localhost:4000\";\n    const response = await axios.get(`${baseUrl}/message?address=${address}`);\n    const messageToSign = response?.data?.messageToSign;\n\n    if (!messageToSign) {\n      throw new Error(\"Invalid message to sign\");\n    }\n\n    const web3 = new Web3(Web3.givenProvider);\n    const signature = await web3.eth.personal.sign(messageToSign, address);\n\n    const jwtResponse = await axios.get(\n      `${baseUrl}/jwt?address=${address}&signature=${signature}`\n    );\n\n    const customToken = jwtResponse?.data?.customToken;\n\n    if (!customToken) {\n      throw new Error(\"Invalid JWT\");\n    }\n\n    await signInWithCustomToken(auth, customToken);\n    setAddress(address);\n  };\n\n  const onPressLogout = () => {\n    setAddress(\"\");\n    signOut(auth);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ConnectWalletButton\n          onPressConnect={onPressConnect}\n          onPressLogout={onPressLogout}\n          loading={loading}\n          address={address}\n        />\n        {/*<form className=\"m-4\" onSubmit={handleSubmit}>*/}\n        {/*  <div className=\"credit-card w-full lg:w-1/2 sm:w-auto shadow-lg mx-auto rounded-xl bg-white\">*/}\n        {/*    <main className=\"mt-4 p-4\">*/}\n        {/*      <h1 className=\"text-xl font-semibold text-gray-700 text-center\">*/}\n        {/*        Send ETH payment*/}\n        {/*      </h1>*/}\n        {/*      <div className=\"\">*/}\n        {/*        <div className=\"my-3\">*/}\n        {/*          <input*/}\n        {/*              type=\"text\"*/}\n        {/*              name=\"addr\"*/}\n        {/*              className=\"input input-bordered block w-full focus:ring focus:outline-none\"*/}\n        {/*              placeholder=\"Recipient Address\"*/}\n        {/*          />*/}\n        {/*        </div>*/}\n        {/*        <div className=\"my-3\">*/}\n        {/*          <input*/}\n        {/*              name=\"ether\"*/}\n        {/*              type=\"text\"*/}\n        {/*              className=\"input input-bordered block w-full focus:ring focus:outline-none\"*/}\n        {/*              placeholder=\"Amount in ETH\"*/}\n        {/*          />*/}\n        {/*        </div>*/}\n        {/*      </div>*/}\n        {/*    </main>*/}\n        {/*    <footer className=\"p-4\">*/}\n        {/*      <button*/}\n        {/*          type=\"submit\"*/}\n        {/*          className=\"btn btn-primary submit-button focus:ring focus:outline-none w-full\"*/}\n        {/*      >*/}\n        {/*        Pay now*/}\n        {/*      </button>*/}\n        {/*      <ErrorMessage message={error} />*/}\n        {/*      <TxList txs={txs} />*/}\n        {/*    </footer>*/}\n        {/*  </div>*/}\n        {/*</form>*/}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}