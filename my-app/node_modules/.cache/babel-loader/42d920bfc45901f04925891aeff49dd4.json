{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n  assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n  return comp;\n}\nfunction ensNameSplit(name) {\n  const bytes = toUtf8Bytes(ensNormalize(name));\n  const comps = [];\n  if (name.length === 0) {\n    return comps;\n  }\n  let last = 0;\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i];\n    // A separator (i.e. \".\"); copy this component\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  }\n  // There was a stray separator at the end of the name\n  assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name) {\n  try {\n    if (name.length === 0) {\n      throw new Error(\"empty label\");\n    }\n    return ens_normalize(name);\n  } catch (error) {\n    assertArgument(false, \"invalid ENS name (\".concat(error.message, \")\"), \"name\", name);\n  }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n  return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name) {\n  assertArgument(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n  assertArgument(name.length, \"invalid ENS name (empty label)\", \"name\", name);\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n  return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name) {\n  return hexlify(concat(ensNameSplit(name).map(comp => {\n    // DNS does not allow components over 63 bytes in length\n    if (comp.length > 63) {\n      throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n    }\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":{"version":3,"sources":["../../src.ts/hash/namehash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name) {\n    try {\n        if (name.length === 0) {\n            throw new Error(\"empty label\");\n        }\n        return ens_normalize(name);\n    }\n    catch (error) {\n        assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n    }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name) {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    }\n    catch (error) { }\n    return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name) {\n    assertArgument(typeof (name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n    assertArgument(name.length, `invalid ENS name (empty label)`, \"name\", name);\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256((comps.pop()))]));\n    }\n    return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name) {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n//# sourceMappingURL=namehash.js.map"]},"metadata":{},"sourceType":"module"}