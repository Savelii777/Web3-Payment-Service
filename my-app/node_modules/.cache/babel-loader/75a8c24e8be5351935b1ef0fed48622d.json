{"ast":null,"code":"const getLinker = fallbackUrl => {\n  function DeepLinker(options) {\n    if (!options) {\n      throw new Error(\"no options\");\n    }\n\n    var hasFocus = true;\n    var didHide = false; // window is blurred when dialogs are shown\n\n    function onBlur() {\n      hasFocus = false;\n    } // document is hidden when native app is shown or browser is backgrounded\n\n\n    function onVisibilityChange(e) {\n      if (e.target.visibilityState === \"hidden\") {\n        didHide = true;\n      }\n    } // window is focused when dialogs are hidden, or browser comes into view\n\n\n    function onFocus() {\n      if (didHide) {\n        if (options.onReturn) {\n          options.onReturn();\n        }\n\n        didHide = false; // reset\n      } else {\n        // ignore duplicate focus event when returning from native app on\n        // iOS Safari 13.3+\n        if (!hasFocus && options.onFallback) {\n          // wait for app switch transition to fully complete - only then is\n          // 'visibilitychange' fired\n          setTimeout(function () {\n            // if browser was not hidden, the deep link failed\n            if (!didHide) {\n              options.onFallback();\n            }\n          }, 1000);\n        }\n      }\n\n      hasFocus = true;\n    } // add/remove event listeners\n    // `mode` can be \"add\" or \"remove\"\n\n\n    function bindEvents(mode) {\n      [[window, \"blur\", onBlur], [document, \"visibilitychange\", onVisibilityChange], [window, \"focus\", onFocus]].forEach(function (conf) {\n        conf[0][mode + \"EventListener\"](conf[1], conf[2]);\n      });\n    } // add event listeners\n\n\n    bindEvents(\"add\"); // expose public API\n\n    this.destroy = bindEvents.bind(null, \"remove\");\n\n    this.openURL = function (url) {\n      // it can take a while for the dialog to appear\n      var dialogTimeout = 500;\n      setTimeout(function () {\n        if (hasFocus && options.onIgnored) {\n          options.onIgnored();\n        }\n      }, dialogTimeout);\n      window.location = url;\n    };\n  }\n\n  const linker = new DeepLinker({\n    onIgnored: function () {\n      window.open(fallbackUrl);\n      console.log(\"browser failed to respond to the deep link\");\n    },\n    onFallback: function () {\n      console.log(\"dialog hidden or user returned to tab\");\n    },\n    onReturn: function () {\n      console.log(\"user returned to the page from the native app\");\n    }\n  });\n  return linker;\n};\n\nexport default getLinker;","map":{"version":3,"sources":["/home/savelii/Рабочий стол/Web3-Login/my-app/src/helpers/deepLink.js"],"names":["getLinker","fallbackUrl","DeepLinker","options","Error","hasFocus","didHide","onBlur","onVisibilityChange","e","target","visibilityState","onFocus","onReturn","onFallback","setTimeout","bindEvents","mode","window","document","forEach","conf","destroy","bind","openURL","url","dialogTimeout","onIgnored","location","linker","open","console","log"],"mappings":"AAAA,MAAMA,SAAS,GAAIC,WAAD,IAAiB;AACjC,WAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,QAAI,CAACA,OAAL,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN;AACD;;AAED,QAAIC,QAAQ,GAAG,IAAf;AACA,QAAIC,OAAO,GAAG,KAAd,CAN2B,CAQ3B;;AACA,aAASC,MAAT,GAAkB;AAChBF,MAAAA,QAAQ,GAAG,KAAX;AACD,KAX0B,CAa3B;;;AACA,aAASG,kBAAT,CAA4BC,CAA5B,EAA+B;AAC7B,UAAIA,CAAC,CAACC,MAAF,CAASC,eAAT,KAA6B,QAAjC,EAA2C;AACzCL,QAAAA,OAAO,GAAG,IAAV;AACD;AACF,KAlB0B,CAoB3B;;;AACA,aAASM,OAAT,GAAmB;AACjB,UAAIN,OAAJ,EAAa;AACX,YAAIH,OAAO,CAACU,QAAZ,EAAsB;AACpBV,UAAAA,OAAO,CAACU,QAAR;AACD;;AAEDP,QAAAA,OAAO,GAAG,KAAV,CALW,CAKM;AAClB,OAND,MAMO;AACL;AACA;AACA,YAAI,CAACD,QAAD,IAAaF,OAAO,CAACW,UAAzB,EAAqC;AACnC;AACA;AACAC,UAAAA,UAAU,CAAC,YAAY;AACrB;AACA,gBAAI,CAACT,OAAL,EAAc;AACZH,cAAAA,OAAO,CAACW,UAAR;AACD;AACF,WALS,EAKP,IALO,CAAV;AAMD;AACF;;AAEDT,MAAAA,QAAQ,GAAG,IAAX;AACD,KA5C0B,CA8C3B;AACA;;;AACA,aAASW,UAAT,CAAoBC,IAApB,EAA0B;AACxB,OACE,CAACC,MAAD,EAAS,MAAT,EAAiBX,MAAjB,CADF,EAEE,CAACY,QAAD,EAAW,kBAAX,EAA+BX,kBAA/B,CAFF,EAGE,CAACU,MAAD,EAAS,OAAT,EAAkBN,OAAlB,CAHF,EAIEQ,OAJF,CAIU,UAAUC,IAAV,EAAgB;AACxBA,QAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQJ,IAAI,GAAG,eAAf,EAAgCI,IAAI,CAAC,CAAD,CAApC,EAAyCA,IAAI,CAAC,CAAD,CAA7C;AACD,OAND;AAOD,KAxD0B,CA0D3B;;;AACAL,IAAAA,UAAU,CAAC,KAAD,CAAV,CA3D2B,CA6D3B;;AACA,SAAKM,OAAL,GAAeN,UAAU,CAACO,IAAX,CAAgB,IAAhB,EAAsB,QAAtB,CAAf;;AACA,SAAKC,OAAL,GAAe,UAAUC,GAAV,EAAe;AAC5B;AACA,UAAIC,aAAa,GAAG,GAApB;AAEAX,MAAAA,UAAU,CAAC,YAAY;AACrB,YAAIV,QAAQ,IAAIF,OAAO,CAACwB,SAAxB,EAAmC;AACjCxB,UAAAA,OAAO,CAACwB,SAAR;AACD;AACF,OAJS,EAIPD,aAJO,CAAV;AAMAR,MAAAA,MAAM,CAACU,QAAP,GAAkBH,GAAlB;AACD,KAXD;AAYD;;AAED,QAAMI,MAAM,GAAG,IAAI3B,UAAJ,CAAe;AAC5ByB,IAAAA,SAAS,EAAE,YAAY;AACrBT,MAAAA,MAAM,CAACY,IAAP,CAAY7B,WAAZ;AACA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD,KAJ2B;AAK5BlB,IAAAA,UAAU,EAAE,YAAY;AACtBiB,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACD,KAP2B;AAQ5BnB,IAAAA,QAAQ,EAAE,YAAY;AACpBkB,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACD;AAV2B,GAAf,CAAf;AAaA,SAAOH,MAAP;AACD,CA5FD;;AA8FA,eAAe7B,SAAf","sourcesContent":["const getLinker = (fallbackUrl) => {\n  function DeepLinker(options) {\n    if (!options) {\n      throw new Error(\"no options\");\n    }\n\n    var hasFocus = true;\n    var didHide = false;\n\n    // window is blurred when dialogs are shown\n    function onBlur() {\n      hasFocus = false;\n    }\n\n    // document is hidden when native app is shown or browser is backgrounded\n    function onVisibilityChange(e) {\n      if (e.target.visibilityState === \"hidden\") {\n        didHide = true;\n      }\n    }\n\n    // window is focused when dialogs are hidden, or browser comes into view\n    function onFocus() {\n      if (didHide) {\n        if (options.onReturn) {\n          options.onReturn();\n        }\n\n        didHide = false; // reset\n      } else {\n        // ignore duplicate focus event when returning from native app on\n        // iOS Safari 13.3+\n        if (!hasFocus && options.onFallback) {\n          // wait for app switch transition to fully complete - only then is\n          // 'visibilitychange' fired\n          setTimeout(function () {\n            // if browser was not hidden, the deep link failed\n            if (!didHide) {\n              options.onFallback();\n            }\n          }, 1000);\n        }\n      }\n\n      hasFocus = true;\n    }\n\n    // add/remove event listeners\n    // `mode` can be \"add\" or \"remove\"\n    function bindEvents(mode) {\n      [\n        [window, \"blur\", onBlur],\n        [document, \"visibilitychange\", onVisibilityChange],\n        [window, \"focus\", onFocus],\n      ].forEach(function (conf) {\n        conf[0][mode + \"EventListener\"](conf[1], conf[2]);\n      });\n    }\n\n    // add event listeners\n    bindEvents(\"add\");\n\n    // expose public API\n    this.destroy = bindEvents.bind(null, \"remove\");\n    this.openURL = function (url) {\n      // it can take a while for the dialog to appear\n      var dialogTimeout = 500;\n\n      setTimeout(function () {\n        if (hasFocus && options.onIgnored) {\n          options.onIgnored();\n        }\n      }, dialogTimeout);\n\n      window.location = url;\n    };\n  }\n\n  const linker = new DeepLinker({\n    onIgnored: function () {\n      window.open(fallbackUrl);\n      console.log(\"browser failed to respond to the deep link\");\n    },\n    onFallback: function () {\n      console.log(\"dialog hidden or user returned to tab\");\n    },\n    onReturn: function () {\n      console.log(\"user returned to the page from the native app\");\n    },\n  });\n\n  return linker;\n};\n\nexport default getLinker;\n"]},"metadata":{},"sourceType":"module"}