{"ast":null,"code":"/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { concat, dataLength, dataSlice, hexlify, isHexString, getBigInt, getBytes, getNumber, isCallException, isError, makeError, assert, assertArgument, FetchRequest, toBeArray, toQuantity, defineProperties, EventPayload, resolveProperties, toUtf8String } from \"../utils/index.js\";\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport { formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse } from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport { PollingBlockSubscriber, PollingBlockTagSubscriber, PollingEventSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber } from \"./subscriber-polling.js\";\n// Constants\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nfunction getTag(prefix, value) {\n  return prefix + \":\" + JSON.stringify(value, (k, v) => {\n    if (v == null) {\n      return \"null\";\n    }\n    if (typeof v === \"bigint\") {\n      return `bigint:${v.toString()}`;\n    }\n    if (typeof v === \"string\") {\n      return v.toLowerCase();\n    }\n    // Sort object keys\n    if (typeof v === \"object\" && !Array.isArray(v)) {\n      const keys = Object.keys(v);\n      keys.sort();\n      return keys.reduce((accum, key) => {\n        accum[key] = v[key];\n        return accum;\n      }, {});\n    }\n    return v;\n  });\n}\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nexport class UnmanagedSubscriber {\n  /**\n   *  The name fof the event.\n   */\n  name;\n  /**\n   *  Create a new UnmanagedSubscriber with %%name%%.\n   */\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n  start() {}\n  stop() {}\n  pause(dropWhilePaused) {}\n  resume() {}\n}\nfunction copy(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n  items = Array.from(new Set(items).values());\n  items.sort();\n  return items;\n}\nasync function getSubscription(_event, provider) {\n  if (_event == null) {\n    throw new Error(\"invalid event\");\n  }\n  // Normalize topic array info an EventFilter\n  if (Array.isArray(_event)) {\n    _event = {\n      topics: _event\n    };\n  }\n  if (typeof _event === \"string\") {\n    switch (_event) {\n      case \"block\":\n      case \"debug\":\n      case \"error\":\n      case \"finalized\":\n      case \"network\":\n      case \"pending\":\n      case \"safe\":\n        {\n          return {\n            type: _event,\n            tag: _event\n          };\n        }\n    }\n  }\n  if (isHexString(_event, 32)) {\n    const hash = _event.toLowerCase();\n    return {\n      type: \"transaction\",\n      tag: getTag(\"tx\", {\n        hash\n      }),\n      hash\n    };\n  }\n  if (_event.orphan) {\n    const event = _event;\n    // @TODO: Should lowercase and whatnot things here instead of copy...\n    return {\n      type: \"orphan\",\n      tag: getTag(\"orphan\", event),\n      filter: copy(event)\n    };\n  }\n  if (_event.address || _event.topics) {\n    const event = _event;\n    const filter = {\n      topics: (event.topics || []).map(t => {\n        if (t == null) {\n          return null;\n        }\n        if (Array.isArray(t)) {\n          return concisify(t.map(t => t.toLowerCase()));\n        }\n        return t.toLowerCase();\n      })\n    };\n    if (event.address) {\n      const addresses = [];\n      const promises = [];\n      const addAddress = addr => {\n        if (isHexString(addr)) {\n          addresses.push(addr);\n        } else {\n          promises.push((async () => {\n            addresses.push(await resolveAddress(addr, provider));\n          })());\n        }\n      };\n      if (Array.isArray(event.address)) {\n        event.address.forEach(addAddress);\n      } else {\n        addAddress(event.address);\n      }\n      if (promises.length) {\n        await Promise.all(promises);\n      }\n      filter.address = concisify(addresses.map(a => a.toLowerCase()));\n    }\n    return {\n      filter,\n      tag: getTag(\"event\", filter),\n      type: \"event\"\n    };\n  }\n  assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nconst defaultOptions = {\n  cacheTimeout: 250,\n  pollingInterval: 4000\n};\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nexport class AbstractProvider {\n  #subs;\n  #plugins;\n  // null=unpaused, true=paused+dropWhilePaused, false=paused\n  #pausedState;\n  #destroyed;\n  #networkPromise;\n  #anyNetwork;\n  #performCache;\n  // The most recent block number if running an event or -1 if no \"block\" event\n  #lastBlockNumber;\n  #nextTimer;\n  #timers;\n  #disableCcipRead;\n  #options;\n  /**\n   *  Create a new **AbstractProvider** connected to %%network%%, or\n   *  use the various network detection capabilities to discover the\n   *  [[Network]] if necessary.\n   */\n  constructor(_network, options) {\n    this.#options = Object.assign({}, defaultOptions, options || {});\n    if (_network === \"any\") {\n      this.#anyNetwork = true;\n      this.#networkPromise = null;\n    } else if (_network) {\n      const network = Network.from(_network);\n      this.#anyNetwork = false;\n      this.#networkPromise = Promise.resolve(network);\n      setTimeout(() => {\n        this.emit(\"network\", network, null);\n      }, 0);\n    } else {\n      this.#anyNetwork = false;\n      this.#networkPromise = null;\n    }\n    this.#lastBlockNumber = -1;\n    this.#performCache = new Map();\n    this.#subs = new Map();\n    this.#plugins = new Map();\n    this.#pausedState = null;\n    this.#destroyed = false;\n    this.#nextTimer = 1;\n    this.#timers = new Map();\n    this.#disableCcipRead = false;\n  }\n  get pollingInterval() {\n    return this.#options.pollingInterval;\n  }\n  /**\n   *  Returns ``this``, to allow an **AbstractProvider** to implement\n   *  the [[ContractRunner]] interface.\n   */\n  get provider() {\n    return this;\n  }\n  /**\n   *  Returns all the registered plug-ins.\n   */\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n  /**\n   *  Attach a new plug-in.\n   */\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    this.#plugins.set(plugin.name, plugin.connect(this));\n    return this;\n  }\n  /**\n   *  Get a plugin by name.\n   */\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n  /**\n   *  Prevent any CCIP-read operation, regardless of whether requested\n   *  in a [[call]] using ``enableCcipRead``.\n   */\n  get disableCcipRead() {\n    return this.#disableCcipRead;\n  }\n  set disableCcipRead(value) {\n    this.#disableCcipRead = !!value;\n  }\n  // Shares multiple identical requests made during the same 250ms\n  async #perform(req) {\n    const timeout = this.#options.cacheTimeout;\n    // Caching disabled\n    if (timeout < 0) {\n      return await this._perform(req);\n    }\n    // Create a tag\n    const tag = getTag(req.method, req);\n    let perform = this.#performCache.get(tag);\n    if (!perform) {\n      perform = this._perform(req);\n      this.#performCache.set(tag, perform);\n      setTimeout(() => {\n        if (this.#performCache.get(tag) === perform) {\n          this.#performCache.delete(tag);\n        }\n      }, timeout);\n    }\n    return await perform;\n  }\n  /**\n   *  Resolves to the data for executing the CCIP-read operations.\n   */\n  async ccipReadFetch(tx, calldata, urls) {\n    if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n      return null;\n    }\n    const sender = tx.to.toLowerCase();\n    const data = calldata.toLowerCase();\n    const errorMessages = [];\n    for (let i = 0; i < urls.length; i++) {\n      const url = urls[i];\n      // URL expansion\n      const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n      // If no {data} is present, use POST; otherwise GET\n      //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n      //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n      //    value.status = response.statusCode;\n      //    return value;\n      //});\n      const request = new FetchRequest(href);\n      if (url.indexOf(\"{data}\") === -1) {\n        request.body = {\n          data,\n          sender\n        };\n      }\n      this.emit(\"debug\", {\n        action: \"sendCcipReadFetchRequest\",\n        request,\n        index: i,\n        urls\n      });\n      let errorMessage = \"unknown error\";\n      const resp = await request.send();\n      try {\n        const result = resp.bodyJson;\n        if (result.data) {\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadFetchResult\",\n            request,\n            result\n          });\n          return result.data;\n        }\n        if (result.message) {\n          errorMessage = result.message;\n        }\n        this.emit(\"debug\", {\n          action: \"receiveCcipReadFetchError\",\n          request,\n          result\n        });\n      } catch (error) {}\n      // 4xx indicates the result is not present; stop\n      assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", {\n        reason: \"404_MISSING_RESOURCE\",\n        transaction: tx,\n        info: {\n          url,\n          errorMessage\n        }\n      });\n      // 5xx indicates server issue; try the next url\n      errorMessages.push(errorMessage);\n    }\n    assert(false, `error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n      reason: \"500_SERVER_ERROR\",\n      transaction: tx,\n      info: {\n        urls,\n        errorMessages\n      }\n    });\n  }\n  /**\n   *  Provides the opportunity for a sub-class to wrap a block before\n   *  returning it, to add additional properties or an alternate\n   *  sub-class of [[Block]].\n   */\n  _wrapBlock(value, network) {\n    return new Block(formatBlock(value), this);\n  }\n  /**\n   *  Provides the opportunity for a sub-class to wrap a log before\n   *  returning it, to add additional properties or an alternate\n   *  sub-class of [[Log]].\n   */\n  _wrapLog(value, network) {\n    return new Log(formatLog(value), this);\n  }\n  /**\n   *  Provides the opportunity for a sub-class to wrap a transaction\n   *  receipt before returning it, to add additional properties or an\n   *  alternate sub-class of [[TransactionReceipt]].\n   */\n  _wrapTransactionReceipt(value, network) {\n    return new TransactionReceipt(formatTransactionReceipt(value), this);\n  }\n  /**\n   *  Provides the opportunity for a sub-class to wrap a transaction\n   *  response before returning it, to add additional properties or an\n   *  alternate sub-class of [[TransactionResponse]].\n   */\n  _wrapTransactionResponse(tx, network) {\n    return new TransactionResponse(formatTransactionResponse(tx), this);\n  }\n  /**\n   *  Resolves to the Network, forcing a network detection using whatever\n   *  technique the sub-class requires.\n   *\n   *  Sub-classes **must** override this.\n   */\n  _detectNetwork() {\n    assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"_detectNetwork\"\n    });\n  }\n  /**\n   *  Sub-classes should use this to perform all built-in operations. All\n   *  methods sanitizes and normalizes the values passed into this.\n   *\n   *  Sub-classes **must** override this.\n   */\n  async _perform(req) {\n    assert(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n      operation: req.method,\n      info: req\n    });\n  }\n  // State\n  async getBlockNumber() {\n    const blockNumber = getNumber(await this.#perform({\n      method: \"getBlockNumber\"\n    }), \"%response\");\n    if (this.#lastBlockNumber >= 0) {\n      this.#lastBlockNumber = blockNumber;\n    }\n    return blockNumber;\n  }\n  /**\n   *  Returns or resolves to the address for %%address%%, resolving ENS\n   *  names and [[Addressable]] objects and returning if already an\n   *  address.\n   */\n  _getAddress(address) {\n    return resolveAddress(address, this);\n  }\n  /**\n   *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n   *  negative values and returning if already a valid block tag.\n   */\n  _getBlockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n      case \"finalized\":\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n        return blockTag;\n    }\n    if (isHexString(blockTag)) {\n      if (isHexString(blockTag, 32)) {\n        return blockTag;\n      }\n      return toQuantity(blockTag);\n    }\n    if (typeof blockTag === \"bigint\") {\n      blockTag = getNumber(blockTag, \"blockTag\");\n    }\n    if (typeof blockTag === \"number\") {\n      if (blockTag >= 0) {\n        return toQuantity(blockTag);\n      }\n      if (this.#lastBlockNumber >= 0) {\n        return toQuantity(this.#lastBlockNumber + blockTag);\n      }\n      return this.getBlockNumber().then(b => toQuantity(b + blockTag));\n    }\n    assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n  }\n  /**\n   *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n   *  names or [[Addressable]] object and returning if already a valid\n   *  filter.\n   */\n  _getFilter(filter) {\n    // Create a canonical representation of the topics\n    const topics = (filter.topics || []).map(t => {\n      if (t == null) {\n        return null;\n      }\n      if (Array.isArray(t)) {\n        return concisify(t.map(t => t.toLowerCase()));\n      }\n      return t.toLowerCase();\n    });\n    const blockHash = \"blockHash\" in filter ? filter.blockHash : undefined;\n    const resolve = (_address, fromBlock, toBlock) => {\n      let address = undefined;\n      switch (_address.length) {\n        case 0:\n          break;\n        case 1:\n          address = _address[0];\n          break;\n        default:\n          _address.sort();\n          address = _address;\n      }\n      if (blockHash) {\n        if (fromBlock != null || toBlock != null) {\n          throw new Error(\"invalid filter\");\n        }\n      }\n      const filter = {};\n      if (address) {\n        filter.address = address;\n      }\n      if (topics.length) {\n        filter.topics = topics;\n      }\n      if (fromBlock) {\n        filter.fromBlock = fromBlock;\n      }\n      if (toBlock) {\n        filter.toBlock = toBlock;\n      }\n      if (blockHash) {\n        filter.blockHash = blockHash;\n      }\n      return filter;\n    };\n    // Addresses could be async (ENS names or Addressables)\n    let address = [];\n    if (filter.address) {\n      if (Array.isArray(filter.address)) {\n        for (const addr of filter.address) {\n          address.push(this._getAddress(addr));\n        }\n      } else {\n        address.push(this._getAddress(filter.address));\n      }\n    }\n    let fromBlock = undefined;\n    if (\"fromBlock\" in filter) {\n      fromBlock = this._getBlockTag(filter.fromBlock);\n    }\n    let toBlock = undefined;\n    if (\"toBlock\" in filter) {\n      toBlock = this._getBlockTag(filter.toBlock);\n    }\n    if (address.filter(a => typeof a !== \"string\").length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n      return Promise.all([Promise.all(address), fromBlock, toBlock]).then(result => {\n        return resolve(result[0], result[1], result[2]);\n      });\n    }\n    return resolve(address, fromBlock, toBlock);\n  }\n  /**\n   *  Returns or resovles to a transaction for %%request%%, resolving\n   *  any ENS names or [[Addressable]] and returning if already a valid\n   *  transaction.\n   */\n  _getTransactionRequest(_request) {\n    const request = copyRequest(_request);\n    const promises = [];\n    [\"to\", \"from\"].forEach(key => {\n      if (request[key] == null) {\n        return;\n      }\n      const addr = resolveAddress(request[key], this);\n      if (isPromise(addr)) {\n        promises.push(async function () {\n          request[key] = await addr;\n        }());\n      } else {\n        request[key] = addr;\n      }\n    });\n    if (request.blockTag != null) {\n      const blockTag = this._getBlockTag(request.blockTag);\n      if (isPromise(blockTag)) {\n        promises.push(async function () {\n          request.blockTag = await blockTag;\n        }());\n      } else {\n        request.blockTag = blockTag;\n      }\n    }\n    if (promises.length) {\n      return async function () {\n        await Promise.all(promises);\n        return request;\n      }();\n    }\n    return request;\n  }\n  async getNetwork() {\n    // No explicit network was set and this is our first time\n    if (this.#networkPromise == null) {\n      // Detect the current network (shared with all calls)\n      const detectNetwork = this._detectNetwork().then(network => {\n        this.emit(\"network\", network, null);\n        return network;\n      }, error => {\n        // Reset the networkPromise on failure, so we will try again\n        if (this.#networkPromise === detectNetwork) {\n          this.#networkPromise = null;\n        }\n        throw error;\n      });\n      this.#networkPromise = detectNetwork;\n      return (await detectNetwork).clone();\n    }\n    const networkPromise = this.#networkPromise;\n    const [expected, actual] = await Promise.all([networkPromise, this._detectNetwork() // The actual connected network\n    ]);\n    if (expected.chainId !== actual.chainId) {\n      if (this.#anyNetwork) {\n        // The \"any\" network can change, so notify listeners\n        this.emit(\"network\", actual, expected);\n        // Update the network if something else hasn't already changed it\n        if (this.#networkPromise === networkPromise) {\n          this.#networkPromise = Promise.resolve(actual);\n        }\n      } else {\n        // Otherwise, we do not allow changes to the underlying network\n        assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n          event: \"changed\"\n        });\n      }\n    }\n    return expected.clone();\n  }\n  async getFeeData() {\n    const network = await this.getNetwork();\n    const getFeeDataFunc = async () => {\n      const {\n        _block,\n        gasPrice,\n        priorityFee\n      } = await resolveProperties({\n        _block: this.#getBlock(\"latest\", false),\n        gasPrice: (async () => {\n          try {\n            const value = await this.#perform({\n              method: \"getGasPrice\"\n            });\n            return getBigInt(value, \"%response\");\n          } catch (error) {}\n          return null;\n        })(),\n        priorityFee: (async () => {\n          try {\n            const value = await this.#perform({\n              method: \"getPriorityFee\"\n            });\n            return getBigInt(value, \"%response\");\n          } catch (error) {}\n          return null;\n        })()\n      });\n      let maxFeePerGas = null;\n      let maxPriorityFeePerGas = null;\n      // These are the recommended EIP-1559 heuristics for fee data\n      const block = this._wrapBlock(_block, network);\n      if (block && block.baseFeePerGas) {\n        maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt(\"1000000000\");\n        maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;\n      }\n      return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n    };\n    // Check for a FeeDataNetWorkPlugin\n    const plugin = network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n    if (plugin) {\n      const req = new FetchRequest(plugin.url);\n      const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n      return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n    }\n    return await getFeeDataFunc();\n  }\n  async estimateGas(_tx) {\n    let tx = this._getTransactionRequest(_tx);\n    if (isPromise(tx)) {\n      tx = await tx;\n    }\n    return getBigInt(await this.#perform({\n      method: \"estimateGas\",\n      transaction: tx\n    }), \"%response\");\n  }\n  async #call(tx, blockTag, attempt) {\n    assert(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n      reason: \"TOO_MANY_REDIRECTS\",\n      transaction: Object.assign({}, tx, {\n        blockTag,\n        enableCcipRead: true\n      })\n    });\n    // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n    const transaction = copyRequest(tx);\n    try {\n      return hexlify(await this._perform({\n        method: \"call\",\n        transaction,\n        blockTag\n      }));\n    } catch (error) {\n      // CCIP Read OffchainLookup\n      if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n        const data = error.data;\n        const txSender = await resolveAddress(transaction.to, this);\n        // Parse the CCIP Read Arguments\n        let ccipArgs;\n        try {\n          ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n        } catch (error) {\n          assert(false, error.message, \"OFFCHAIN_FAULT\", {\n            reason: \"BAD_DATA\",\n            transaction,\n            info: {\n              data\n            }\n          });\n        }\n        // Check the sender of the OffchainLookup matches the transaction\n        assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n          action: \"call\",\n          data,\n          reason: \"OffchainLookup\",\n          transaction: transaction,\n          invocation: null,\n          revert: {\n            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n            name: \"OffchainLookup\",\n            args: ccipArgs.errorArgs\n          }\n        });\n        const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n        assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n          reason: \"FETCH_FAILED\",\n          transaction,\n          info: {\n            data: error.data,\n            errorArgs: ccipArgs.errorArgs\n          }\n        });\n        const tx = {\n          to: txSender,\n          data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\n        };\n        this.emit(\"debug\", {\n          action: \"sendCcipReadCall\",\n          transaction: tx\n        });\n        try {\n          const result = await this.#call(tx, blockTag, attempt + 1);\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallResult\",\n            transaction: Object.assign({}, tx),\n            result\n          });\n          return result;\n        } catch (error) {\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallError\",\n            transaction: Object.assign({}, tx),\n            error\n          });\n          throw error;\n        }\n      }\n      throw error;\n    }\n  }\n  async #checkNetwork(promise) {\n    const {\n      value\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      value: promise\n    });\n    return value;\n  }\n  async call(_tx) {\n    const {\n      tx,\n      blockTag\n    } = await resolveProperties({\n      tx: this._getTransactionRequest(_tx),\n      blockTag: this._getBlockTag(_tx.blockTag)\n    });\n    return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n  }\n  // Account\n  async #getAccountValue(request, _address, _blockTag) {\n    let address = this._getAddress(_address);\n    let blockTag = this._getBlockTag(_blockTag);\n    if (typeof address !== \"string\" || typeof blockTag !== \"string\") {\n      [address, blockTag] = await Promise.all([address, blockTag]);\n    }\n    return await this.#checkNetwork(this.#perform(Object.assign(request, {\n      address,\n      blockTag\n    })));\n  }\n  async getBalance(address, blockTag) {\n    return getBigInt(await this.#getAccountValue({\n      method: \"getBalance\"\n    }, address, blockTag), \"%response\");\n  }\n  async getTransactionCount(address, blockTag) {\n    return getNumber(await this.#getAccountValue({\n      method: \"getTransactionCount\"\n    }, address, blockTag), \"%response\");\n  }\n  async getCode(address, blockTag) {\n    return hexlify(await this.#getAccountValue({\n      method: \"getCode\"\n    }, address, blockTag));\n  }\n  async getStorage(address, _position, blockTag) {\n    const position = getBigInt(_position, \"position\");\n    return hexlify(await this.#getAccountValue({\n      method: \"getStorage\",\n      position\n    }, address, blockTag));\n  }\n  // Write\n  async broadcastTransaction(signedTx) {\n    const {\n      blockNumber,\n      hash,\n      network\n    } = await resolveProperties({\n      blockNumber: this.getBlockNumber(),\n      hash: this._perform({\n        method: \"broadcastTransaction\",\n        signedTransaction: signedTx\n      }),\n      network: this.getNetwork()\n    });\n    const tx = Transaction.from(signedTx);\n    if (tx.hash !== hash) {\n      throw new Error(\"@TODO: the returned hash did not match\");\n    }\n    return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n  }\n  async #getBlock(block, includeTransactions) {\n    // @TODO: Add CustomBlockPlugin check\n    if (isHexString(block, 32)) {\n      return await this.#perform({\n        method: \"getBlock\",\n        blockHash: block,\n        includeTransactions\n      });\n    }\n    let blockTag = this._getBlockTag(block);\n    if (typeof blockTag !== \"string\") {\n      blockTag = await blockTag;\n    }\n    return await this.#perform({\n      method: \"getBlock\",\n      blockTag,\n      includeTransactions\n    });\n  }\n  // Queries\n  async getBlock(block, prefetchTxs) {\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#getBlock(block, !!prefetchTxs)\n    });\n    if (params == null) {\n      return null;\n    }\n    return this._wrapBlock(params, network);\n  }\n  async getTransaction(hash) {\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getTransaction\",\n        hash\n      })\n    });\n    if (params == null) {\n      return null;\n    }\n    return this._wrapTransactionResponse(params, network);\n  }\n  async getTransactionReceipt(hash) {\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getTransactionReceipt\",\n        hash\n      })\n    });\n    if (params == null) {\n      return null;\n    }\n    // Some backends did not backfill the effectiveGasPrice into old transactions\n    // in the receipt, so we look it up manually and inject it.\n    if (params.gasPrice == null && params.effectiveGasPrice == null) {\n      const tx = await this.#perform({\n        method: \"getTransaction\",\n        hash\n      });\n      if (tx == null) {\n        throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n      }\n      params.effectiveGasPrice = tx.gasPrice;\n    }\n    return this._wrapTransactionReceipt(params, network);\n  }\n  async getTransactionResult(hash) {\n    const {\n      result\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      result: this.#perform({\n        method: \"getTransactionResult\",\n        hash\n      })\n    });\n    if (result == null) {\n      return null;\n    }\n    return hexlify(result);\n  }\n  // Bloom-filter Queries\n  async getLogs(_filter) {\n    let filter = this._getFilter(_filter);\n    if (isPromise(filter)) {\n      filter = await filter;\n    }\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getLogs\",\n        filter\n      })\n    });\n    return params.map(p => this._wrapLog(p, network));\n  }\n  // ENS\n  _getProvider(chainId) {\n    assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"_getProvider()\"\n    });\n  }\n  async getResolver(name) {\n    return await EnsResolver.fromName(this, name);\n  }\n  async getAvatar(name) {\n    const resolver = await this.getResolver(name);\n    if (resolver) {\n      return await resolver.getAvatar();\n    }\n    return null;\n  }\n  async resolveName(name) {\n    const resolver = await this.getResolver(name);\n    if (resolver) {\n      return await resolver.getAddress();\n    }\n    return null;\n  }\n  async lookupAddress(address) {\n    address = getAddress(address);\n    const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n    try {\n      const ensAddr = await EnsResolver.getEnsAddress(this);\n      const ensContract = new Contract(ensAddr, [\"function resolver(bytes32) view returns (address)\"], this);\n      const resolver = await ensContract.resolver(node);\n      if (resolver == null || resolver === ZeroAddress) {\n        return null;\n      }\n      const resolverContract = new Contract(resolver, [\"function name(bytes32) view returns (string)\"], this);\n      const name = await resolverContract.name(node);\n      // Failed forward resolution\n      const check = await this.resolveName(name);\n      if (check !== address) {\n        return null;\n      }\n      return name;\n    } catch (error) {\n      // No data was returned from the resolver\n      if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n        return null;\n      }\n      // Something reerted\n      if (isError(error, \"CALL_EXCEPTION\")) {\n        return null;\n      }\n      throw error;\n    }\n    return null;\n  }\n  async waitForTransaction(hash, _confirms, timeout) {\n    const confirms = _confirms != null ? _confirms : 1;\n    if (confirms === 0) {\n      return this.getTransactionReceipt(hash);\n    }\n    return new Promise(async (resolve, reject) => {\n      let timer = null;\n      const listener = async blockNumber => {\n        try {\n          const receipt = await this.getTransactionReceipt(hash);\n          if (receipt != null) {\n            if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n              resolve(receipt);\n              //this.off(\"block\", listener);\n              if (timer) {\n                clearTimeout(timer);\n                timer = null;\n              }\n              return;\n            }\n          }\n        } catch (error) {\n          console.log(\"EEE\", error);\n        }\n        this.once(\"block\", listener);\n      };\n      if (timeout != null) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n          timer = null;\n          this.off(\"block\", listener);\n          reject(makeError(\"timeout\", \"TIMEOUT\", {\n            reason: \"timeout\"\n          }));\n        }, timeout);\n      }\n      listener(await this.getBlockNumber());\n    });\n  }\n  async waitForBlock(blockTag) {\n    assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n      operation: \"waitForBlock\"\n    });\n  }\n  /**\n   *  Clear a timer created using the [[_setTimeout]] method.\n   */\n  _clearTimeout(timerId) {\n    const timer = this.#timers.get(timerId);\n    if (!timer) {\n      return;\n    }\n    if (timer.timer) {\n      clearTimeout(timer.timer);\n    }\n    this.#timers.delete(timerId);\n  }\n  /**\n   *  Create a timer that will execute %%func%% after at least %%timeout%%\n   *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n   *  in the next event loop.\n   *\n   *  [Pausing](AbstractProvider-paused) the provider will pause any\n   *  associated timers.\n   */\n  _setTimeout(_func, timeout) {\n    if (timeout == null) {\n      timeout = 0;\n    }\n    const timerId = this.#nextTimer++;\n    const func = () => {\n      this.#timers.delete(timerId);\n      _func();\n    };\n    if (this.paused) {\n      this.#timers.set(timerId, {\n        timer: null,\n        func,\n        time: timeout\n      });\n    } else {\n      const timer = setTimeout(func, timeout);\n      this.#timers.set(timerId, {\n        timer,\n        func,\n        time: getTime()\n      });\n    }\n    return timerId;\n  }\n  /**\n   *  Perform %%func%% on each subscriber.\n   */\n  _forEachSubscriber(func) {\n    for (const sub of this.#subs.values()) {\n      func(sub.subscriber);\n    }\n  }\n  /**\n   *  Sub-classes may override this to customize subscription\n   *  implementations.\n   */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"debug\":\n      case \"error\":\n      case \"network\":\n        return new UnmanagedSubscriber(sub.type);\n      case \"block\":\n        {\n          const subscriber = new PollingBlockSubscriber(this);\n          subscriber.pollingInterval = this.pollingInterval;\n          return subscriber;\n        }\n      case \"safe\":\n      case \"finalized\":\n        return new PollingBlockTagSubscriber(this, sub.type);\n      case \"event\":\n        return new PollingEventSubscriber(this, sub.filter);\n      case \"transaction\":\n        return new PollingTransactionSubscriber(this, sub.hash);\n      case \"orphan\":\n        return new PollingOrphanSubscriber(this, sub.filter);\n    }\n    throw new Error(`unsupported event: ${sub.type}`);\n  }\n  /**\n   *  If a [[Subscriber]] fails and needs to replace itself, this\n   *  method may be used.\n   *\n   *  For example, this is used for providers when using the\n   *  ``eth_getFilterChanges`` method, which can return null if state\n   *  filters are not supported by the backend, allowing the Subscriber\n   *  to swap in a [[PollingEventSubscriber]].\n   */\n  _recoverSubscriber(oldSub, newSub) {\n    for (const sub of this.#subs.values()) {\n      if (sub.subscriber === oldSub) {\n        if (sub.started) {\n          sub.subscriber.stop();\n        }\n        sub.subscriber = newSub;\n        if (sub.started) {\n          newSub.start();\n        }\n        if (this.#pausedState != null) {\n          newSub.pause(this.#pausedState);\n        }\n        break;\n      }\n    }\n  }\n  async #hasSub(event, emitArgs) {\n    let sub = await getSubscription(event, this);\n    // This is a log that is removing an existing log; we actually want\n    // to emit an orphan event for the removed log\n    if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n      sub = await getSubscription({\n        orphan: \"drop-log\",\n        log: emitArgs[0]\n      }, this);\n    }\n    return this.#subs.get(sub.tag) || null;\n  }\n  async #getSub(event) {\n    const subscription = await getSubscription(event, this);\n    // Prevent tampering with our tag in any subclass' _getSubscriber\n    const tag = subscription.tag;\n    let sub = this.#subs.get(tag);\n    if (!sub) {\n      const subscriber = this._getSubscriber(subscription);\n      const addressableMap = new WeakMap();\n      const nameMap = new Map();\n      sub = {\n        subscriber,\n        tag,\n        addressableMap,\n        nameMap,\n        started: false,\n        listeners: []\n      };\n      this.#subs.set(tag, sub);\n    }\n    return sub;\n  }\n  async on(event, listener) {\n    const sub = await this.#getSub(event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n    if (!sub.started) {\n      sub.subscriber.start();\n      sub.started = true;\n      if (this.#pausedState != null) {\n        sub.subscriber.pause(this.#pausedState);\n      }\n    }\n    return this;\n  }\n  async once(event, listener) {\n    const sub = await this.#getSub(event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n    if (!sub.started) {\n      sub.subscriber.start();\n      sub.started = true;\n      if (this.#pausedState != null) {\n        sub.subscriber.pause(this.#pausedState);\n      }\n    }\n    return this;\n  }\n  async emit(event, ...args) {\n    const sub = await this.#hasSub(event, args);\n    // If there is not subscription or if a recent emit removed\n    // the last of them (which also deleted the sub) do nothing\n    if (!sub || sub.listeners.length === 0) {\n      return false;\n    }\n    ;\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({\n      listener,\n      once\n    }) => {\n      const payload = new EventPayload(this, once ? null : listener, event);\n      try {\n        listener.call(this, ...args, payload);\n      } catch (error) {}\n      return !once;\n    });\n    if (sub.listeners.length === 0) {\n      if (sub.started) {\n        sub.subscriber.stop();\n      }\n      this.#subs.delete(sub.tag);\n    }\n    return count > 0;\n  }\n  async listenerCount(event) {\n    if (event) {\n      const sub = await this.#hasSub(event);\n      if (!sub) {\n        return 0;\n      }\n      return sub.listeners.length;\n    }\n    let total = 0;\n    for (const {\n      listeners\n    } of this.#subs.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  async listeners(event) {\n    if (event) {\n      const sub = await this.#hasSub(event);\n      if (!sub) {\n        return [];\n      }\n      return sub.listeners.map(({\n        listener\n      }) => listener);\n    }\n    let result = [];\n    for (const {\n      listeners\n    } of this.#subs.values()) {\n      result = result.concat(listeners.map(({\n        listener\n      }) => listener));\n    }\n    return result;\n  }\n  async off(event, listener) {\n    const sub = await this.#hasSub(event);\n    if (!sub) {\n      return this;\n    }\n    if (listener) {\n      const index = sub.listeners.map(({\n        listener\n      }) => listener).indexOf(listener);\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n    if (!listener || sub.listeners.length === 0) {\n      if (sub.started) {\n        sub.subscriber.stop();\n      }\n      this.#subs.delete(sub.tag);\n    }\n    return this;\n  }\n  async removeAllListeners(event) {\n    if (event) {\n      const {\n        tag,\n        started,\n        subscriber\n      } = await this.#getSub(event);\n      if (started) {\n        subscriber.stop();\n      }\n      this.#subs.delete(tag);\n    } else {\n      for (const [tag, {\n        started,\n        subscriber\n      }] of this.#subs) {\n        if (started) {\n          subscriber.stop();\n        }\n        this.#subs.delete(tag);\n      }\n    }\n    return this;\n  }\n  // Alias for \"on\"\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  }\n  // Alias for \"off\"\n  async removeListener(event, listener) {\n    return this.off(event, listener);\n  }\n  /**\n   *  If this provider has been destroyed using the [[destroy]] method.\n   *\n   *  Once destroyed, all resources are reclaimed, internal event loops\n   *  and timers are cleaned up and no further requests may be sent to\n   *  the provider.\n   */\n  get destroyed() {\n    return this.#destroyed;\n  }\n  /**\n   *  Sub-classes may use this to shutdown any sockets or release their\n   *  resources and reject any pending requests.\n   *\n   *  Sub-classes **must** call ``super.destroy()``.\n   */\n  destroy() {\n    // Stop all listeners\n    this.removeAllListeners();\n    // Shut down all tiemrs\n    for (const timerId of this.#timers.keys()) {\n      this._clearTimeout(timerId);\n    }\n    this.#destroyed = true;\n  }\n  /**\n   *  Whether the provider is currently paused.\n   *\n   *  A paused provider will not emit any events, and generally should\n   *  not make any requests to the network, but that is up to sub-classes\n   *  to manage.\n   *\n   *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n   *  which will buffer any events that occur while paused until the\n   *  provider is unpaused.\n   */\n  get paused() {\n    return this.#pausedState != null;\n  }\n  set paused(pause) {\n    if (!!pause === this.paused) {\n      return;\n    }\n    if (this.paused) {\n      this.resume();\n    } else {\n      this.pause(false);\n    }\n  }\n  /**\n   *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n   *  while paused are dropped, otherwise all events will be emitted once\n   *  the provider is unpaused.\n   */\n  pause(dropWhilePaused) {\n    this.#lastBlockNumber = -1;\n    if (this.#pausedState != null) {\n      if (this.#pausedState == !!dropWhilePaused) {\n        return;\n      }\n      assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"pause\"\n      });\n    }\n    this._forEachSubscriber(s => s.pause(dropWhilePaused));\n    this.#pausedState = !!dropWhilePaused;\n    for (const timer of this.#timers.values()) {\n      // Clear the timer\n      if (timer.timer) {\n        clearTimeout(timer.timer);\n      }\n      // Remaining time needed for when we become unpaused\n      timer.time = getTime() - timer.time;\n    }\n  }\n  /**\n   *  Resume the provider.\n   */\n  resume() {\n    if (this.#pausedState == null) {\n      return;\n    }\n    this._forEachSubscriber(s => s.resume());\n    this.#pausedState = null;\n    for (const timer of this.#timers.values()) {\n      // Remaining time when we were paused\n      let timeout = timer.time;\n      if (timeout < 0) {\n        timeout = 0;\n      }\n      // Start time (in cause paused, so we con compute remaininf time)\n      timer.time = getTime();\n      // Start the timer\n      setTimeout(timer.func, timeout);\n    }\n  }\n}\nfunction _parseString(result, start) {\n  try {\n    const bytes = _parseBytes(result, start);\n    if (bytes) {\n      return toUtf8String(bytes);\n    }\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  try {\n    const offset = getNumber(dataSlice(result, start, start + 32));\n    const length = getNumber(dataSlice(result, offset, offset + 32));\n    return dataSlice(result, offset + 32, offset + 32 + length);\n  } catch (error) {}\n  return null;\n}\nfunction numPad(value) {\n  const result = toBeArray(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\nconst empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (let i = 0; i < datas.length; i++) {\n    result.push(empty);\n    byteCount += 32;\n  }\n  for (let i = 0; i < datas.length; i++) {\n    const data = getBytes(datas[i]);\n    // Update the bytes offset\n    result[i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return concat(result);\n}\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n  const result = {\n    sender: \"\",\n    urls: [],\n    calldata: \"\",\n    selector: \"\",\n    extraData: \"\",\n    errorArgs: []\n  };\n  assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n    reason: \"insufficient OffchainLookup data\"\n  });\n  const sender = dataSlice(data, 0, 32);\n  assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup sender\"\n  });\n  result.sender = dataSlice(sender, 12);\n  // Read the URLs from the response\n  try {\n    const urls = [];\n    const urlsOffset = getNumber(dataSlice(data, 32, 64));\n    const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n    const urlsData = dataSlice(data, urlsOffset + 32);\n    for (let u = 0; u < urlsLength; u++) {\n      const url = _parseString(urlsData, u * 32);\n      if (url == null) {\n        throw new Error(\"abort\");\n      }\n      urls.push(url);\n    }\n    result.urls = urls;\n  } catch (error) {\n    assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup urls\"\n    });\n  }\n  // Get the CCIP calldata to forward\n  try {\n    const calldata = _parseBytes(data, 64);\n    if (calldata == null) {\n      throw new Error(\"abort\");\n    }\n    result.calldata = calldata;\n  } catch (error) {\n    assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup calldata\"\n    });\n  }\n  // Get the callbackSelector (bytes4)\n  assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup callbaackSelector\"\n  });\n  result.selector = dataSlice(data, 96, 100);\n  // Get the extra data to send back to the contract as context\n  try {\n    const extraData = _parseBytes(data, 128);\n    if (extraData == null) {\n      throw new Error(\"abort\");\n    }\n    result.extraData = extraData;\n  } catch (error) {\n    assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup extraData\"\n    });\n  }\n  result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map(k => result[k]);\n  return result;\n}","map":{"version":3,"sources":["../../src.ts/providers/abstract-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { concat, dataLength, dataSlice, hexlify, isHexString, getBigInt, getBytes, getNumber, isCallException, isError, makeError, assert, assertArgument, FetchRequest, toBeArray, toQuantity, defineProperties, EventPayload, resolveProperties, toUtf8String } from \"../utils/index.js\";\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport { formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse } from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport { PollingBlockSubscriber, PollingBlockTagSubscriber, PollingEventSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber } from \"./subscriber-polling.js\";\n// Constants\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n    return (value && typeof (value.then) === \"function\");\n}\nfunction getTag(prefix, value) {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n        if (v == null) {\n            return \"null\";\n        }\n        if (typeof (v) === \"bigint\") {\n            return `bigint:${v.toString()}`;\n        }\n        if (typeof (v) === \"string\") {\n            return v.toLowerCase();\n        }\n        // Sort object keys\n        if (typeof (v) === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key) => {\n                accum[key] = v[key];\n                return accum;\n            }, {});\n        }\n        return v;\n    });\n}\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nexport class UnmanagedSubscriber {\n    /**\n     *  The name fof the event.\n     */\n    name;\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */\n    constructor(name) { defineProperties(this, { name }); }\n    start() { }\n    stop() { }\n    pause(dropWhilePaused) { }\n    resume() { }\n}\nfunction copy(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n    items = Array.from((new Set(items)).values());\n    items.sort();\n    return items;\n}\nasync function getSubscription(_event, provider) {\n    if (_event == null) {\n        throw new Error(\"invalid event\");\n    }\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) {\n        _event = { topics: _event };\n    }\n    if (typeof (_event) === \"string\") {\n        switch (_event) {\n            case \"block\":\n            case \"debug\":\n            case \"error\":\n            case \"finalized\":\n            case \"network\":\n            case \"pending\":\n            case \"safe\": {\n                return { type: _event, tag: _event };\n            }\n        }\n    }\n    if (isHexString(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\n    }\n    if (_event.orphan) {\n        const event = _event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\n    }\n    if ((_event.address || _event.topics)) {\n        const event = _event;\n        const filter = {\n            topics: ((event.topics || []).map((t) => {\n                if (t == null) {\n                    return null;\n                }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t) => t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            }))\n        };\n        if (event.address) {\n            const addresses = [];\n            const promises = [];\n            const addAddress = (addr) => {\n                if (isHexString(addr)) {\n                    addresses.push(addr);\n                }\n                else {\n                    promises.push((async () => {\n                        addresses.push(await resolveAddress(addr, provider));\n                    })());\n                }\n            };\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            }\n            else {\n                addAddress(event.address);\n            }\n            if (promises.length) {\n                await Promise.all(promises);\n            }\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n        }\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\nfunction getTime() { return (new Date()).getTime(); }\nconst defaultOptions = {\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nexport class AbstractProvider {\n    #subs;\n    #plugins;\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState;\n    #destroyed;\n    #networkPromise;\n    #anyNetwork;\n    #performCache;\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber;\n    #nextTimer;\n    #timers;\n    #disableCcipRead;\n    #options;\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */\n    constructor(_network, options) {\n        this.#options = Object.assign({}, defaultOptions, options || {});\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        }\n        else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\n        }\n        else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n        this.#lastBlockNumber = -1;\n        this.#performCache = new Map();\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n        this.#destroyed = false;\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n        this.#disableCcipRead = false;\n    }\n    get pollingInterval() { return this.#options.pollingInterval; }\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */\n    get provider() { return this; }\n    /**\n     *  Returns all the registered plug-ins.\n     */\n    get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new plug-in.\n     */\n    attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.connect(this));\n        return this;\n    }\n    /**\n     *  Get a plugin by name.\n     */\n    getPlugin(name) {\n        return (this.#plugins.get(name)) || null;\n    }\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */\n    get disableCcipRead() { return this.#disableCcipRead; }\n    set disableCcipRead(value) { this.#disableCcipRead = !!value; }\n    // Shares multiple identical requests made during the same 250ms\n    async #perform(req) {\n        const timeout = this.#options.cacheTimeout;\n        // Caching disabled\n        if (timeout < 0) {\n            return await this._perform(req);\n        }\n        // Create a tag\n        const tag = getTag(req.method, req);\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n            this.#performCache.set(tag, perform);\n            setTimeout(() => {\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, timeout);\n        }\n        return await perform;\n    }\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */\n    async ccipReadFetch(tx, calldata, urls) {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n            return null;\n        }\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n        const errorMessages = [];\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = { data, sender };\n            }\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n            let errorMessage = \"unknown error\";\n            const resp = await request.send();\n            try {\n                const result = resp.bodyJson;\n                if (result.data) {\n                    this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                    return result.data;\n                }\n                if (result.message) {\n                    errorMessage = result.message;\n                }\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            }\n            catch (error) { }\n            // 4xx indicates the result is not present; stop\n            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n        assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx, info: { urls, errorMessages }\n        });\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */\n    _wrapBlock(value, network) {\n        return new Block(formatBlock(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */\n    _wrapLog(value, network) {\n        return new Log(formatLog(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */\n    _wrapTransactionReceipt(value, network) {\n        return new TransactionReceipt(formatTransactionReceipt(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */\n    _wrapTransactionResponse(tx, network) {\n        return new TransactionResponse(formatTransactionResponse(tx), this);\n    }\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */\n    _detectNetwork() {\n        assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */\n    async _perform(req) {\n        assert(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n    // State\n    async getBlockNumber() {\n        const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n        if (this.#lastBlockNumber >= 0) {\n            this.#lastBlockNumber = blockNumber;\n        }\n        return blockNumber;\n    }\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */\n    _getAddress(address) {\n        return resolveAddress(address, this);\n    }\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */\n    _getBlockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        switch (blockTag) {\n            case \"earliest\":\n                return \"0x0\";\n            case \"finalized\":\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n                return blockTag;\n        }\n        if (isHexString(blockTag)) {\n            if (isHexString(blockTag, 32)) {\n                return blockTag;\n            }\n            return toQuantity(blockTag);\n        }\n        if (typeof (blockTag) === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n        }\n        if (typeof (blockTag) === \"number\") {\n            if (blockTag >= 0) {\n                return toQuantity(blockTag);\n            }\n            if (this.#lastBlockNumber >= 0) {\n                return toQuantity(this.#lastBlockNumber + blockTag);\n            }\n            return this.getBlockNumber().then((b) => toQuantity(b + blockTag));\n        }\n        assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */\n    _getFilter(filter) {\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || []).map((t) => {\n            if (t == null) {\n                return null;\n            }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t) => t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash : undefined;\n        const resolve = (_address, fromBlock, toBlock) => {\n            let address = undefined;\n            switch (_address.length) {\n                case 0: break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n            const filter = {};\n            if (address) {\n                filter.address = address;\n            }\n            if (topics.length) {\n                filter.topics = topics;\n            }\n            if (fromBlock) {\n                filter.fromBlock = fromBlock;\n            }\n            if (toBlock) {\n                filter.toBlock = toBlock;\n            }\n            if (blockHash) {\n                filter.blockHash = blockHash;\n            }\n            return filter;\n        };\n        // Addresses could be async (ENS names or Addressables)\n        let address = [];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address) {\n                    address.push(this._getAddress(addr));\n                }\n            }\n            else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n        let fromBlock = undefined;\n        if (\"fromBlock\" in filter) {\n            fromBlock = this._getBlockTag(filter.fromBlock);\n        }\n        let toBlock = undefined;\n        if (\"toBlock\" in filter) {\n            toBlock = this._getBlockTag(filter.toBlock);\n        }\n        if (address.filter((a) => (typeof (a) !== \"string\")).length ||\n            (fromBlock != null && typeof (fromBlock) !== \"string\") ||\n            (toBlock != null && typeof (toBlock) !== \"string\")) {\n            return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n        return resolve(address, fromBlock, toBlock);\n    }\n    /**\n     *  Returns or resovles to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */\n    _getTransactionRequest(_request) {\n        const request = copyRequest(_request);\n        const promises = [];\n        [\"to\", \"from\"].forEach((key) => {\n            if (request[key] == null) {\n                return;\n            }\n            const addr = resolveAddress(request[key], this);\n            if (isPromise(addr)) {\n                promises.push((async function () { request[key] = await addr; })());\n            }\n            else {\n                request[key] = addr;\n            }\n        });\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push((async function () { request.blockTag = await blockTag; })());\n            }\n            else {\n                request.blockTag = blockTag;\n            }\n        }\n        if (promises.length) {\n            return (async function () {\n                await Promise.all(promises);\n                return request;\n            })();\n        }\n        return request;\n    }\n    async getNetwork() {\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n            // Detect the current network (shared with all calls)\n            const detectNetwork = this._detectNetwork().then((network) => {\n                this.emit(\"network\", network, null);\n                return network;\n            }, (error) => {\n                // Reset the networkPromise on failure, so we will try again\n                if (this.#networkPromise === detectNetwork) {\n                    this.#networkPromise = null;\n                }\n                throw error;\n            });\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n        const networkPromise = this.#networkPromise;\n        const [expected, actual] = await Promise.all([\n            networkPromise,\n            this._detectNetwork() // The actual connected network\n        ]);\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            }\n            else {\n                // Otherwise, we do not allow changes to the underlying network\n                assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n        return expected.clone();\n    }\n    async getFeeData() {\n        const network = await this.getNetwork();\n        const getFeeDataFunc = async () => {\n            const { _block, gasPrice, priorityFee } = await resolveProperties({\n                _block: this.#getBlock(\"latest\", false),\n                gasPrice: ((async () => {\n                    try {\n                        const value = await this.#perform({ method: \"getGasPrice\" });\n                        return getBigInt(value, \"%response\");\n                    }\n                    catch (error) { }\n                    return null;\n                })()),\n                priorityFee: ((async () => {\n                    try {\n                        const value = await this.#perform({ method: \"getPriorityFee\" });\n                        return getBigInt(value, \"%response\");\n                    }\n                    catch (error) { }\n                    return null;\n                })())\n            });\n            let maxFeePerGas = null;\n            let maxPriorityFeePerGas = null;\n            // These are the recommended EIP-1559 heuristics for fee data\n            const block = this._wrapBlock(_block, network);\n            if (block && block.baseFeePerGas) {\n                maxPriorityFeePerGas = (priorityFee != null) ? priorityFee : BigInt(\"1000000000\");\n                maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\n            }\n            return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n        };\n        // Check for a FeeDataNetWorkPlugin\n        const plugin = network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        if (plugin) {\n            const req = new FetchRequest(plugin.url);\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n            return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n        }\n        return await getFeeDataFunc();\n    }\n    async estimateGas(_tx) {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) {\n            tx = await tx;\n        }\n        return getBigInt(await this.#perform({\n            method: \"estimateGas\", transaction: tx\n        }), \"%response\");\n    }\n    async #call(tx, blockTag, attempt) {\n        assert(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n            reason: \"TOO_MANY_REDIRECTS\",\n            transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })\n        });\n        // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n        const transaction = copyRequest(tx);\n        try {\n            return hexlify(await this._perform({ method: \"call\", transaction, blockTag }));\n        }\n        catch (error) {\n            // CCIP Read OffchainLookup\n            if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n                const data = error.data;\n                const txSender = await resolveAddress(transaction.to, this);\n                // Parse the CCIP Read Arguments\n                let ccipArgs;\n                try {\n                    ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n                }\n                catch (error) {\n                    assert(false, error.message, \"OFFCHAIN_FAULT\", {\n                        reason: \"BAD_DATA\", transaction, info: { data }\n                    });\n                }\n                // Check the sender of the OffchainLookup matches the transaction\n                assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                    action: \"call\",\n                    data,\n                    reason: \"OffchainLookup\",\n                    transaction: transaction,\n                    invocation: null,\n                    revert: {\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        name: \"OffchainLookup\",\n                        args: ccipArgs.errorArgs\n                    }\n                });\n                const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                    reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs }\n                });\n                const tx = {\n                    to: txSender,\n                    data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\n                };\n                this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\n                try {\n                    const result = await this.#call(tx, blockTag, attempt + 1);\n                    this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({}, tx), result });\n                    return result;\n                }\n                catch (error) {\n                    this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({}, tx), error });\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n    async #checkNetwork(promise) {\n        const { value } = await resolveProperties({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n    async call(_tx) {\n        const { tx, blockTag } = await resolveProperties({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n    }\n    // Account\n    async #getAccountValue(request, _address, _blockTag) {\n        let address = this._getAddress(_address);\n        let blockTag = this._getBlockTag(_blockTag);\n        if (typeof (address) !== \"string\" || typeof (blockTag) !== \"string\") {\n            [address, blockTag] = await Promise.all([address, blockTag]);\n        }\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n    }\n    async getBalance(address, blockTag) {\n        return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n    }\n    async getTransactionCount(address, blockTag) {\n        return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n    }\n    async getCode(address, blockTag) {\n        return hexlify(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n    }\n    async getStorage(address, _position, blockTag) {\n        const position = getBigInt(_position, \"position\");\n        return hexlify(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n    }\n    // Write\n    async broadcastTransaction(signedTx) {\n        const { blockNumber, hash, network } = await resolveProperties({\n            blockNumber: this.getBlockNumber(),\n            hash: this._perform({\n                method: \"broadcastTransaction\",\n                signedTransaction: signedTx\n            }),\n            network: this.getNetwork()\n        });\n        const tx = Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n    }\n    async #getBlock(block, includeTransactions) {\n        // @TODO: Add CustomBlockPlugin check\n        if (isHexString(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\", blockHash: block, includeTransactions\n            });\n        }\n        let blockTag = this._getBlockTag(block);\n        if (typeof (blockTag) !== \"string\") {\n            blockTag = await blockTag;\n        }\n        return await this.#perform({\n            method: \"getBlock\", blockTag, includeTransactions\n        });\n    }\n    // Queries\n    async getBlock(block, prefetchTxs) {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapBlock(params, network);\n    }\n    async getTransaction(hash) {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash })\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapTransactionResponse(params, network);\n    }\n    async getTransactionReceipt(hash) {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\n        });\n        if (params == null) {\n            return null;\n        }\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\n            if (tx == null) {\n                throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n            }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n        return this._wrapTransactionReceipt(params, network);\n    }\n    async getTransactionResult(hash) {\n        const { result } = await resolveProperties({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash })\n        });\n        if (result == null) {\n            return null;\n        }\n        return hexlify(result);\n    }\n    // Bloom-filter Queries\n    async getLogs(_filter) {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) {\n            filter = await filter;\n        }\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getLogs\", filter })\n        });\n        return params.map((p) => this._wrapLog(p, network));\n    }\n    // ENS\n    _getProvider(chainId) {\n        assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n    async getResolver(name) {\n        return await EnsResolver.fromName(this, name);\n    }\n    async getAvatar(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAvatar();\n        }\n        return null;\n    }\n    async resolveName(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAddress();\n        }\n        return null;\n    }\n    async lookupAddress(address) {\n        address = getAddress(address);\n        const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n        try {\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroAddress) {\n                return null;\n            }\n            const resolverContract = new Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) {\n                return null;\n            }\n            return name;\n        }\n        catch (error) {\n            // No data was returned from the resolver\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n            // Something reerted\n            if (isError(error, \"CALL_EXCEPTION\")) {\n                return null;\n            }\n            throw error;\n        }\n        return null;\n    }\n    async waitForTransaction(hash, _confirms, timeout) {\n        const confirms = (_confirms != null) ? _confirms : 1;\n        if (confirms === 0) {\n            return this.getTransactionReceipt(hash);\n        }\n        return new Promise(async (resolve, reject) => {\n            let timer = null;\n            const listener = (async (blockNumber) => {\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                }\n                catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            });\n            if (timeout != null) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n                }, timeout);\n            }\n            listener(await this.getBlockNumber());\n        });\n    }\n    async waitForBlock(blockTag) {\n        assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */\n    _clearTimeout(timerId) {\n        const timer = this.#timers.get(timerId);\n        if (!timer) {\n            return;\n        }\n        if (timer.timer) {\n            clearTimeout(timer.timer);\n        }\n        this.#timers.delete(timerId);\n    }\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */\n    _setTimeout(_func, timeout) {\n        if (timeout == null) {\n            timeout = 0;\n        }\n        const timerId = this.#nextTimer++;\n        const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n        };\n        if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n        }\n        else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer, func, time: getTime() });\n        }\n        return timerId;\n    }\n    /**\n     *  Perform %%func%% on each subscriber.\n     */\n    _forEachSubscriber(func) {\n        for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n        }\n    }\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */\n    _getSubscriber(sub) {\n        switch (sub.type) {\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\": {\n                const subscriber = new PollingBlockSubscriber(this);\n                subscriber.pollingInterval = this.pollingInterval;\n                return subscriber;\n            }\n            case \"safe\":\n            case \"finalized\":\n                return new PollingBlockTagSubscriber(this, sub.type);\n            case \"event\":\n                return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new PollingOrphanSubscriber(this, sub.filter);\n        }\n        throw new Error(`unsupported event: ${sub.type}`);\n    }\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */\n    _recoverSubscriber(oldSub, newSub) {\n        for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n                if (sub.started) {\n                    sub.subscriber.stop();\n                }\n                sub.subscriber = newSub;\n                if (sub.started) {\n                    newSub.start();\n                }\n                if (this.#pausedState != null) {\n                    newSub.pause(this.#pausedState);\n                }\n                break;\n            }\n        }\n    }\n    async #hasSub(event, emitArgs) {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n    async #getSub(event) {\n        const subscription = await getSubscription(event, this);\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };\n            this.#subs.set(tag, sub);\n        }\n        return sub;\n    }\n    async on(event, listener) {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: false });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n                sub.subscriber.pause(this.#pausedState);\n            }\n        }\n        return this;\n    }\n    async once(event, listener) {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: true });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) {\n                sub.subscriber.pause(this.#pausedState);\n            }\n        }\n        return this;\n    }\n    async emit(event, ...args) {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) {\n            return false;\n        }\n        ;\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\n            const payload = new EventPayload(this, (once ? null : listener), event);\n            try {\n                listener.call(this, ...args, payload);\n            }\n            catch (error) { }\n            return !once;\n        });\n        if (sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n        }\n        return (count > 0);\n    }\n    async listenerCount(event) {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        let total = 0;\n        for (const { listeners } of this.#subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n    async listeners(event) {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        let result = [];\n        for (const { listeners } of this.#subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n    async off(event, listener) {\n        const sub = await this.#hasSub(event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            this.#subs.delete(sub.tag);\n        }\n        return this;\n    }\n    async removeAllListeners(event) {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) {\n                subscriber.stop();\n            }\n            this.#subs.delete(tag);\n        }\n        else {\n            for (const [tag, { started, subscriber }] of this.#subs) {\n                if (started) {\n                    subscriber.stop();\n                }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    // Alias for \"on\"\n    async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    // Alias for \"off\"\n    async removeListener(event, listener) {\n        return this.off(event, listener);\n    }\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */\n    get destroyed() {\n        return this.#destroyed;\n    }\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */\n    destroy() {\n        // Stop all listeners\n        this.removeAllListeners();\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n        }\n        this.#destroyed = true;\n    }\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */\n    get paused() { return (this.#pausedState != null); }\n    set paused(pause) {\n        if (!!pause === this.paused) {\n            return;\n        }\n        if (this.paused) {\n            this.resume();\n        }\n        else {\n            this.pause(false);\n        }\n    }\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */\n    pause(dropWhilePaused) {\n        this.#lastBlockNumber = -1;\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) {\n                return;\n            }\n            assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n        for (const timer of this.#timers.values()) {\n            // Clear the timer\n            if (timer.timer) {\n                clearTimeout(timer.timer);\n            }\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n    /**\n     *  Resume the provider.\n     */\n    resume() {\n        if (this.#pausedState == null) {\n            return;\n        }\n        this._forEachSubscriber((s) => s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()) {\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) {\n                timeout = 0;\n            }\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\nfunction _parseString(result, start) {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) {\n            return toUtf8String(bytes);\n        }\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    try {\n        const offset = getNumber(dataSlice(result, start, start + 32));\n        const length = getNumber(dataSlice(result, offset, offset + 32));\n        return dataSlice(result, offset + 32, offset + 32 + length);\n    }\n    catch (error) { }\n    return null;\n}\nfunction numPad(value) {\n    const result = toBeArray(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\nconst empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(empty);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = getBytes(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return concat(result);\n}\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n    const result = {\n        sender: \"\", urls: [], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: []\n    };\n    assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n    const sender = dataSlice(data, 0, 32);\n    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n    // Read the URLs from the response\n    try {\n        const urls = [];\n        const urlsOffset = getNumber(dataSlice(data, 32, 64));\n        const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n        const urlsData = dataSlice(data, urlsOffset + 32);\n        for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n                throw new Error(\"abort\");\n            }\n            urls.push(url);\n        }\n        result.urls = urls;\n    }\n    catch (error) {\n        assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) {\n            throw new Error(\"abort\");\n        }\n        result.calldata = calldata;\n    }\n    catch (error) {\n        assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n    // Get the callbackSelector (bytes4)\n    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) {\n            throw new Error(\"abort\");\n        }\n        result.extraData = extraData;\n    }\n    catch (error) {\n        assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => result[k]);\n    return result;\n}\n//# sourceMappingURL=abstract-provider.js.map"]},"metadata":{},"sourceType":"module"}