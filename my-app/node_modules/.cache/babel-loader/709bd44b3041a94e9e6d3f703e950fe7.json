{"ast":null,"code":"import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _ripemd160 = function (data) {\n  return noble_ripemd160(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function () {\n  locked = true;\n};\nripemd160.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"ripemd160 is locked\");\n  }\n  __ripemd160 = func;\n};\nObject.freeze(ripemd160);","map":{"version":3,"sources":["../../src.ts/crypto/ripemd160.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,IAAI,eAAe,QAAQ,yBAAyB;AAEtE,SAAS,QAAQ,EAAG,OAAO,QAAQ,mBAAmB;AAKtD,IAAI,MAAM,GAAG,KAAK;AAElB,MAAM,UAAU,GAAG,SAAA,CAAS,IAAgB,EAAA;EACxC,OAAO,eAAe,CAAC,IAAI,CAAC;AAChC,CAAC;AAED,IAAI,WAAW,GAAoC,UAAU;AAE7D;;;;;;;;;;;;;;;;AAgBG;AACH,OAAM,SAAU,SAAS,CAAC,KAAgB,EAAA;EACtC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC;AACA,SAAS,CAAC,CAAC,GAAG,UAAU;AACxB,SAAS,CAAC,IAAI,GAAG,YAAA;EAAmB,MAAM,GAAG,IAAI;AAAE,CAAC;AACpD,SAAS,CAAC,QAAQ,GAAG,UAAS,IAAqC,EAAA;EAC/D,IAAI,MAAM,EAAE;IAAE,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC;EAAG;EAC3D,WAAW,GAAG,IAAI;AACtB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC","sourceRoot":"","sourcesContent":["import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _ripemd160 = function (data) {\n    return noble_ripemd160(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function () { locked = true; };\nripemd160.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160);\n//# sourceMappingURL=ripemd160.js.map"]},"metadata":{},"sourceType":"module"}