{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _defineProperty from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classStaticPrivateMethodGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js\";\nimport _classPrivateMethodGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\n/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, dataSlice, decodeBase58, defineProperties, encodeBase58, getBytes, hexlify, isBytesLike, getNumber, toBeArray, toBigInt, toBeHex, assertPrivate, assert, assertArgument } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport { encryptKeystoreJson, encryptKeystoreJsonSync } from \"./json-keystore.js\";\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\nconst HardenedBit = 0x80000000;\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n  let result = \"\";\n  while (value) {\n    result = Nibbles[value % 16] + result;\n    value = Math.trunc(value / 16);\n  }\n  while (result.length < length * 2) {\n    result = \"0\" + result;\n  }\n  return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n  const value = getBytes(_value);\n  const check = dataSlice(sha256(sha256(value)), 0, 4);\n  const bytes = concat([value, check]);\n  return encodeBase58(bytes);\n}\nconst _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n  const data = new Uint8Array(37);\n  if (index & HardenedBit) {\n    assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"deriveChild\"\n    });\n    // Data = 0x00 || ser_256(k_par)\n    data.set(getBytes(privateKey), 1);\n  } else {\n    // Data = ser_p(point(k_par))\n    data.set(getBytes(publicKey));\n  }\n  // Data += ser_32(i)\n  for (let i = 24; i >= 0; i -= 8) {\n    data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n  }\n  const I = getBytes(computeHmac(\"sha512\", chainCode, data));\n  return {\n    IL: I.slice(0, 32),\n    IR: I.slice(32)\n  };\n}\nfunction derivePath(node, path) {\n  const components = path.split(\"/\");\n  assertArgument(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n  if (components[0] === \"m\") {\n    components.shift();\n  }\n  let result = node;\n  for (let i = 0; i < components.length; i++) {\n    const component = components[i];\n    if (component.match(/^[0-9]+'$/)) {\n      const index = parseInt(component.substring(0, component.length - 1));\n      assertArgument(index < HardenedBit, \"invalid path index\", \"path[\".concat(i, \"]\"), component);\n      result = result.deriveChild(HardenedBit + index);\n    } else if (component.match(/^[0-9]+$/)) {\n      const index = parseInt(component);\n      assertArgument(index < HardenedBit, \"invalid path index\", \"path[\".concat(i, \"]\"), component);\n      result = result.deriveChild(index);\n    } else {\n      assertArgument(false, \"invalid path component\", \"path[\".concat(i, \"]\"), component);\n    }\n  }\n  return result;\n}\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nvar _account = /*#__PURE__*/new WeakSet();\nexport class HDNodeWallet extends BaseWallet {\n  /**\n   *  The compressed public key.\n   */\n\n  /**\n   *  The fingerprint.\n   *\n   *  A fingerprint allows quick qay to detect parent and child nodes,\n   *  but developers should be prepared to deal with collisions as it\n   *  is only 4 bytes.\n   */\n\n  /**\n   *  The parent fingerprint.\n   */\n\n  /**\n   *  The mnemonic used to create this HD Node, if available.\n   *\n   *  Sources such as extended keys do not encode the mnemonic, in\n   *  which case this will be ``null``.\n   */\n\n  /**\n   *  The chaincode, which is effectively a public key used\n   *  to derive children.\n   */\n\n  /**\n   *  The derivation path of this wallet.\n   *\n   *  Since extended keys do not provider full path details, this\n   *  may be ``null``, if instantiated from a source that does not\n   *  enocde it.\n   */\n\n  /**\n   *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n   *  the node is hardened.\n   */\n\n  /**\n   *  The depth of this wallet, which is the number of components\n   *  in its path.\n   */\n\n  /**\n   *  @private\n   */\n  constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\n    super(signingKey, provider);\n    _classPrivateMethodInitSpec(this, _account);\n    _defineProperty(this, \"publicKey\", void 0);\n    _defineProperty(this, \"fingerprint\", void 0);\n    _defineProperty(this, \"parentFingerprint\", void 0);\n    _defineProperty(this, \"mnemonic\", void 0);\n    _defineProperty(this, \"chainCode\", void 0);\n    _defineProperty(this, \"path\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"depth\", void 0);\n    assertPrivate(guard, _guard, \"HDNodeWallet\");\n    defineProperties(this, {\n      publicKey: signingKey.compressedPublicKey\n    });\n    const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    defineProperties(this, {\n      parentFingerprint,\n      fingerprint,\n      chainCode,\n      path,\n      index,\n      depth\n    });\n    defineProperties(this, {\n      mnemonic\n    });\n  }\n  connect(provider) {\n    return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n  }\n  /**\n   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n   *  %%password%%.\n   *\n   *  If %%progressCallback%% is specified, it will receive periodic\n   *  updates as the encryption process progreses.\n   */\n  async encrypt(password, progressCallback) {\n    return await encryptKeystoreJson(_classPrivateMethodGet(this, _account, _account2).call(this), password, {\n      progressCallback\n    });\n  }\n  /**\n   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n   *  %%password%%.\n   *\n   *  It is preferred to use the [async version](encrypt) instead,\n   *  which allows a [[ProgressCallback]] to keep the user informed.\n   *\n   *  This method will block the event loop (freezing all UI) until\n   *  it is complete, which may be a non-trivial duration.\n   */\n  encryptSync(password) {\n    return encryptKeystoreJsonSync(_classPrivateMethodGet(this, _account, _account2).call(this), password);\n  }\n  /**\n   *  The extended key.\n   *\n   *  This key will begin with the prefix ``xpriv`` and can be used to\n   *  reconstruct this HD Node to derive its children.\n   */\n  get extendedKey() {\n    // We only support the mainnet values for now, but if anyone needs\n    // testnet values, let me know. I believe current sentiment is that\n    // we should always use mainnet, and use BIP-44 to derive the network\n    //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n    //   - Testnet: public=0x043587CF, private=0x04358394\n    assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"extendedKey\"\n    });\n    return encodeBase58Check(concat([\"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint, zpad(this.index, 4), this.chainCode, concat([\"0x00\", this.privateKey])]));\n  }\n  /**\n   *  Returns true if this wallet has a path, providing a Type Guard\n   *  that the path is non-null.\n   */\n  hasPath() {\n    return this.path != null;\n  }\n  /**\n   *  Returns a neutered HD Node, which removes the private details\n   *  of an HD Node.\n   *\n   *  A neutered node has no private key, but can be used to derive\n   *  child addresses and other public data about the HD Node.\n   */\n  neuter() {\n    return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n  }\n  /**\n   *  Return the child for %%index%%.\n   */\n  deriveChild(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n    // Base path\n    let path = this.path;\n    if (path) {\n      path += \"/\" + (index & ~HardenedBit);\n      if (index & HardenedBit) {\n        path += \"'\";\n      }\n    }\n    const {\n      IR,\n      IL\n    } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n    const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n    return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n  }\n  /**\n   *  Return the HDNode for %%path%% from this node.\n   */\n  derivePath(path) {\n    return derivePath(this, path);\n  }\n  /**\n   *  Creates a new HD Node from %%extendedKey%%.\n   *\n   *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n   *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n   *  or full HD Node ([[HDNodeWallet) respectively.\n   */\n  static fromExtendedKey(extendedKey) {\n    const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n    assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n    switch (hexlify(bytes.slice(0, 4))) {\n      // Public Key\n      case \"0x0488b21e\":\n      case \"0x043587cf\":\n        {\n          const publicKey = hexlify(key);\n          return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n        }\n      // Private Key\n      case \"0x0488ade4\":\n      case \"0x04358394 \":\n        if (key[0] !== 0) {\n          break;\n        }\n        return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n    }\n    assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n  }\n  /**\n   *  Creates a new random HDNode.\n   */\n  static createRandom(password, path, wordlist) {\n    if (password == null) {\n      password = \"\";\n    }\n    if (path == null) {\n      path = defaultPath;\n    }\n    if (wordlist == null) {\n      wordlist = LangEn.wordlist();\n    }\n    const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);\n    return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n  }\n  /**\n   *  Create an HD Node from %%mnemonic%%.\n   */\n  static fromMnemonic(mnemonic, path) {\n    if (!path) {\n      path = defaultPath;\n    }\n    return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n  }\n  /**\n   *  Creates an HD Node from a mnemonic %%phrase%%.\n   */\n  static fromPhrase(phrase, password, path, wordlist) {\n    if (password == null) {\n      password = \"\";\n    }\n    if (path == null) {\n      path = defaultPath;\n    }\n    if (wordlist == null) {\n      wordlist = LangEn.wordlist();\n    }\n    const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);\n    return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n  }\n  /**\n   *  Creates an HD Node from a %%seed%%.\n   */\n  static fromSeed(seed) {\n    return _classStaticPrivateMethodGet(HDNodeWallet, HDNodeWallet, _fromSeed).call(HDNodeWallet, seed, null);\n  }\n}\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nfunction _account2() {\n  const account = {\n    address: this.address,\n    privateKey: this.privateKey\n  };\n  const m = this.mnemonic;\n  if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n    account.mnemonic = {\n      path: this.path,\n      locale: \"en\",\n      entropy: m.entropy\n    };\n  }\n  return account;\n}\nfunction _fromSeed(_seed, mnemonic) {\n  assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n  const seed = getBytes(_seed, \"seed\");\n  assertArgument(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n  const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n  const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n  return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n}\nexport class HDNodeVoidWallet extends VoidSigner {\n  /**\n   *  The compressed public key.\n   */\n\n  /**\n   *  The fingerprint.\n   *\n   *  A fingerprint allows quick qay to detect parent and child nodes,\n   *  but developers should be prepared to deal with collisions as it\n   *  is only 4 bytes.\n   */\n\n  /**\n   *  The parent node fingerprint.\n   */\n\n  /**\n   *  The chaincode, which is effectively a public key used\n   *  to derive children.\n   */\n\n  /**\n   *  The derivation path of this wallet.\n   *\n   *  Since extended keys do not provider full path details, this\n   *  may be ``null``, if instantiated from a source that does not\n   *  enocde it.\n   */\n\n  /**\n   *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n   *  the node is hardened.\n   */\n\n  /**\n   *  The depth of this wallet, which is the number of components\n   *  in its path.\n   */\n\n  /**\n   *  @private\n   */\n  constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\n    super(address, provider);\n    _defineProperty(this, \"publicKey\", void 0);\n    _defineProperty(this, \"fingerprint\", void 0);\n    _defineProperty(this, \"parentFingerprint\", void 0);\n    _defineProperty(this, \"chainCode\", void 0);\n    _defineProperty(this, \"path\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"depth\", void 0);\n    assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n    defineProperties(this, {\n      publicKey\n    });\n    const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n    defineProperties(this, {\n      publicKey,\n      fingerprint,\n      parentFingerprint,\n      chainCode,\n      path,\n      index,\n      depth\n    });\n  }\n  connect(provider) {\n    return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n  }\n  /**\n   *  The extended key.\n   *\n   *  This key will begin with the prefix ``xpub`` and can be used to\n   *  reconstruct this neutered key to derive its children addresses.\n   */\n  get extendedKey() {\n    // We only support the mainnet values for now, but if anyone needs\n    // testnet values, let me know. I believe current sentiment is that\n    // we should always use mainnet, and use BIP-44 to derive the network\n    //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n    //   - Testnet: public=0x043587CF, private=0x04358394\n    assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"extendedKey\"\n    });\n    return encodeBase58Check(concat([\"0x0488B21E\", zpad(this.depth, 1), this.parentFingerprint, zpad(this.index, 4), this.chainCode, this.publicKey]));\n  }\n  /**\n   *  Returns true if this wallet has a path, providing a Type Guard\n   *  that the path is non-null.\n   */\n  hasPath() {\n    return this.path != null;\n  }\n  /**\n   *  Return the child for %%index%%.\n   */\n  deriveChild(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n    // Base path\n    let path = this.path;\n    if (path) {\n      path += \"/\" + (index & ~HardenedBit);\n      if (index & HardenedBit) {\n        path += \"'\";\n      }\n    }\n    const {\n      IR,\n      IL\n    } = ser_I(index, this.chainCode, this.publicKey, null);\n    const Ki = SigningKey.addPoints(IL, this.publicKey, true);\n    const address = computeAddress(Ki);\n    return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);\n  }\n  /**\n   *  Return the signer for %%path%% from this node.\n   */\n  derivePath(path) {\n    return derivePath(this, path);\n  }\n}\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n/**\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index) {\n  const index = getNumber(_index, \"index\");\n  assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n  return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index) {\n  const index = getNumber(_index, \"index\");\n  assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n  return \"m/44'/60'/0'/0/\".concat(index);\n}","map":{"version":3,"sources":["../../src.ts/wallet/hdwallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, dataSlice, decodeBase58, defineProperties, encodeBase58, getBytes, hexlify, isBytesLike, getNumber, toBeArray, toBigInt, toBeHex, assertPrivate, assert, assertArgument } from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport { encryptKeystoreJson, encryptKeystoreJsonSync, } from \"./json-keystore.js\";\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\nconst HardenedBit = 0x80000000;\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n    let result = \"\";\n    while (value) {\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while (result.length < length * 2) {\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n    const value = getBytes(_value);\n    const check = dataSlice(sha256(sha256(value)), 0, 4);\n    const bytes = concat([value, check]);\n    return encodeBase58(bytes);\n}\nconst _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n    const data = new Uint8Array(37);\n    if (index & HardenedBit) {\n        assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n        // Data = 0x00 || ser_256(k_par)\n        data.set(getBytes(privateKey), 1);\n    }\n    else {\n        // Data = ser_p(point(k_par))\n        data.set(getBytes(publicKey));\n    }\n    // Data += ser_32(i)\n    for (let i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n    }\n    const I = getBytes(computeHmac(\"sha512\", chainCode, data));\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\n}\nfunction derivePath(node, path) {\n    const components = path.split(\"/\");\n    assertArgument(components.length > 0 && (components[0] === \"m\" || node.depth > 0), \"invalid path\", \"path\", path);\n    if (components[0] === \"m\") {\n        components.shift();\n    }\n    let result = node;\n    for (let i = 0; i < components.length; i++) {\n        const component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(HardenedBit + index);\n        }\n        else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\n            result = result.deriveChild(index);\n        }\n        else {\n            assertArgument(false, \"invalid path component\", `path[${i}]`, component);\n        }\n    }\n    return result;\n}\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nexport class HDNodeWallet extends BaseWallet {\n    /**\n     *  The compressed public key.\n     */\n    publicKey;\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    fingerprint;\n    /**\n     *  The parent fingerprint.\n     */\n    parentFingerprint;\n    /**\n     *  The mnemonic used to create this HD Node, if available.\n     *\n     *  Sources such as extended keys do not encode the mnemonic, in\n     *  which case this will be ``null``.\n     */\n    mnemonic;\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    chainCode;\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    path;\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    index;\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    depth;\n    /**\n     *  @private\n     */\n    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\n        super(signingKey, provider);\n        assertPrivate(guard, _guard, \"HDNodeWallet\");\n        defineProperties(this, { publicKey: signingKey.compressedPublicKey });\n        const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n        defineProperties(this, {\n            parentFingerprint, fingerprint,\n            chainCode, path, index, depth\n        });\n        defineProperties(this, { mnemonic });\n    }\n    connect(provider) {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n    #account() {\n        const account = { address: this.address, privateKey: this.privateKey };\n        const m = this.mnemonic;\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n            account.mnemonic = {\n                path: this.path,\n                locale: \"en\",\n                entropy: m.entropy\n            };\n        }\n        return account;\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password, progressCallback) {\n        return await encryptKeystoreJson(this.#account(), password, { progressCallback });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password) {\n        return encryptKeystoreJsonSync(this.#account(), password);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n        return encodeBase58Check(concat([\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\n            zpad(this.index, 4), this.chainCode,\n            concat([\"0x00\", this.privateKey])\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath() { return (this.path != null); }\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */\n    neuter() {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n    }\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index) {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n        return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n    }\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */\n    derivePath(path) {\n        return derivePath(this, path);\n    }\n    static #fromSeed(_seed, mnemonic) {\n        assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const seed = getBytes(_seed, \"seed\");\n        assertArgument(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n        const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n    }\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */\n    static fromExtendedKey(extendedKey) {\n        const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n        assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\": {\n                const publicKey = hexlify(key);\n                return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n            }\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n        assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n    /**\n     *  Creates a new random HDNode.\n     */\n    static createRandom(password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Create an HD Node from %%mnemonic%%.\n     */\n    static fromMnemonic(mnemonic, path) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */\n    static fromPhrase(phrase, password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = LangEn.wordlist();\n        }\n        const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */\n    static fromSeed(seed) {\n        return HDNodeWallet.#fromSeed(seed, null);\n    }\n}\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nexport class HDNodeVoidWallet extends VoidSigner {\n    /**\n     *  The compressed public key.\n     */\n    publicKey;\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    fingerprint;\n    /**\n     *  The parent node fingerprint.\n     */\n    parentFingerprint;\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    chainCode;\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    path;\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    index;\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    depth;\n    /**\n     *  @private\n     */\n    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\n        super(address, provider);\n        assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n        defineProperties(this, { publicKey });\n        const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n        defineProperties(this, {\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\n        });\n    }\n    connect(provider) {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n        return encodeBase58Check(concat([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey,\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath() { return (this.path != null); }\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index) {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = SigningKey.addPoints(IL, this.publicKey, true);\n        const address = computeAddress(Ki);\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);\n    }\n    /**\n     *  Return the signer for %%path%% from this node.\n     */\n    derivePath(path) {\n        return derivePath(this, path);\n    }\n}\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n/**\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/${index}'/0/0`;\n}\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index) {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/0'/0/${index}`;\n}\n//# sourceMappingURL=hdwallet.js.map"]},"metadata":{},"sourceType":"module"}