{"ast":null,"code":"// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n  /**\n   *  The Contract Interface.\n   */\n  interface;\n  /**\n   *  The matching event.\n   */\n  fragment;\n  /**\n   *  The parsed arguments passed to the event by ``emit``.\n   */\n  args;\n  /**\n   * @_ignore:\n   */\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    defineProperties(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n  /**\n   *  The name of the event.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The signature of the event.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n  /**\n   *  The error encounted when trying to decode the log.\n   */\n  error;\n  /**\n   * @_ignore:\n   */\n  constructor(log, error) {\n    super(log, log.provider);\n    defineProperties(this, {\n      error\n    });\n  }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n  #iface;\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    this.#iface = iface;\n  }\n  /**\n   *  The parsed logs for any [[Log]] which has a matching event in the\n   *  Contract ABI.\n   */\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n      if (fragment) {\n        try {\n          return new EventLog(log, this.#iface, fragment);\n        } catch (error) {\n          return new UndecodedEventLog(log, error);\n        }\n      }\n      return log;\n    });\n  }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n  #iface;\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    this.#iface = iface;\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(confirms) {\n    const receipt = await super.wait(confirms);\n    if (receipt == null) {\n      return null;\n    }\n    return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n  }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n  /**\n   *  The log with no matching events.\n   */\n  log;\n  /**\n   *  @_event:\n   */\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    defineProperties(this, {\n      log\n    });\n  }\n  /**\n   *  Resolves to the block the event occured in.\n   */\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n  /**\n   *  Resolves to the transaction the event occured in.\n   */\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n  /**\n   *  Resolves to the transaction receipt the event occured in.\n   */\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n  /**\n   *  @_ignore:\n   */\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    defineProperties(this, {\n      args,\n      fragment\n    });\n  }\n  /**\n   *  The event name.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The event signature.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}","map":{"version":3,"sources":["../../src.ts/contract/wrappers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    interface;\n    /**\n     *  The matching event.\n     */\n    fragment;\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    args;\n    /**\n     * @_ignore:\n     */\n    constructor(log, iface, fragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties(this, { args, fragment, interface: iface });\n    }\n    /**\n     *  The name of the event.\n     */\n    get eventName() { return this.fragment.name; }\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature() { return this.fragment.format(); }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    error;\n    /**\n     * @_ignore:\n     */\n    constructor(log, error) {\n        super(log, log.provider);\n        defineProperties(this, { error });\n    }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    #iface;\n    /**\n     *  @_ignore:\n     */\n    constructor(iface, provider, tx) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs() {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment);\n                }\n                catch (error) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n            return log;\n        });\n    }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    #iface;\n    /**\n     *  @_ignore:\n     */\n    constructor(iface, provider, tx) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms) {\n        const receipt = await super.wait(confirms);\n        if (receipt == null) {\n            return null;\n        }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n    /**\n     *  The log with no matching events.\n     */\n    log;\n    /**\n     *  @_event:\n     */\n    constructor(contract, listener, filter, log) {\n        super(contract, listener, filter);\n        defineProperties(this, { log });\n    }\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock() {\n        return await this.log.getBlock();\n    }\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction() {\n        return await this.log.getTransaction();\n    }\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt() {\n        return await this.log.getTransactionReceipt();\n    }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n    /**\n     *  @_ignore:\n     */\n    constructor(contract, listener, filter, fragment, _log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties(this, { args, fragment });\n    }\n    /**\n     *  The event name.\n     */\n    get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The event signature.\n     */\n    get eventSignature() {\n        return this.fragment.format();\n    }\n}\n//# sourceMappingURL=wrappers.js.map"]},"metadata":{},"sourceType":"module"}