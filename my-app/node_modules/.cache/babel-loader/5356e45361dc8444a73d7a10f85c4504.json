{"ast":null,"code":"import { assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n  #request;\n  /**\n   *  Connnect to the %%ethereum%% provider, optionally forcing the\n   *  %%network%%.\n   */\n  constructor(ethereum, network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    this.#request = async (method, params) => {\n      const payload = {\n        method,\n        params\n      };\n      this.emit(\"debug\", {\n        action: \"sendEip1193Request\",\n        payload\n      });\n      try {\n        const result = await ethereum.request(payload);\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Result\",\n          result\n        });\n        return result;\n      } catch (e) {\n        const error = new Error(e.message);\n        error.code = e.code;\n        error.data = e.data;\n        error.payload = payload;\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Error\",\n          error\n        });\n        throw error;\n      }\n    };\n  }\n  async send(method, params) {\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n    try {\n      const result = await this.#request(payload.method, payload.params || []);\n      return [{\n        id: payload.id,\n        result\n      }];\n    } catch (e) {\n      return [{\n        id: payload.id,\n        error: {\n          code: e.code,\n          data: e.data,\n          message: e.message\n        }\n      }];\n    }\n  }\n  getRpcError(payload, error) {\n    error = JSON.parse(JSON.stringify(error));\n    // EIP-1193 gives us some machine-readable error codes, so rewrite\n    // them into \n    switch (error.error.code || -1) {\n      case 4001:\n        error.error.message = `ethers-user-denied: ${error.error.message}`;\n        break;\n      case 4200:\n        error.error.message = `ethers-unsupported: ${error.error.message}`;\n        break;\n    }\n    return super.getRpcError(payload, error);\n  }\n  /**\n   *  Resolves to ``true`` if the provider manages the %%address%%.\n   */\n  async hasSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accounts = await this.send(\"eth_accounts\", []);\n    if (typeof address === \"number\") {\n      return accounts.length > address;\n    }\n    address = address.toLowerCase();\n    return accounts.filter(a => a.toLowerCase() === address).length !== 0;\n  }\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    if (!(await this.hasSigner(address))) {\n      try {\n        //const resp = \n        await this.#request(\"eth_requestAccounts\", []);\n        //console.log(\"RESP\", resp);\n      } catch (error) {\n        const payload = error.payload;\n        throw this.getRpcError(payload, {\n          id: payload.id,\n          error\n        });\n      }\n    }\n    return await super.getSigner(address);\n  }\n}","map":{"version":3,"sources":["../../src.ts/providers/provider-browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n    #request;\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */\n    constructor(ethereum, network) {\n        super(network, { batchMaxCount: 1 });\n        this.#request = async (method, params) => {\n            const payload = { method, params };\n            this.emit(\"debug\", { action: \"sendEip1193Request\", payload });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", { action: \"receiveEip1193Result\", result });\n                return result;\n            }\n            catch (e) {\n                const error = new Error(e.message);\n                error.code = e.code;\n                error.data = e.data;\n                error.payload = payload;\n                this.emit(\"debug\", { action: \"receiveEip1193Error\", error });\n                throw error;\n            }\n        };\n    }\n    async send(method, params) {\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n        try {\n            const result = await this.#request(payload.method, payload.params || []);\n            return [{ id: payload.id, result }];\n        }\n        catch (e) {\n            return [{\n                    id: payload.id,\n                    error: { code: e.code, data: e.data, message: e.message }\n                }];\n        }\n    }\n    getRpcError(payload, error) {\n        error = JSON.parse(JSON.stringify(error));\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch (error.error.code || -1) {\n            case 4001:\n                error.error.message = `ethers-user-denied: ${error.error.message}`;\n                break;\n            case 4200:\n                error.error.message = `ethers-unsupported: ${error.error.message}`;\n                break;\n        }\n        return super.getRpcError(payload, error);\n    }\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */\n    async hasSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accounts = await this.send(\"eth_accounts\", []);\n        if (typeof (address) === \"number\") {\n            return (accounts.length > address);\n        }\n        address = address.toLowerCase();\n        return accounts.filter((a) => (a.toLowerCase() === address)).length !== 0;\n    }\n    async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        if (!(await this.hasSigner(address))) {\n            try {\n                //const resp = \n                await this.#request(\"eth_requestAccounts\", []);\n                //console.log(\"RESP\", resp);\n            }\n            catch (error) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, { id: payload.id, error });\n            }\n        }\n        return await super.getSigner(address);\n    }\n}\n//# sourceMappingURL=provider-browser.js.map"]},"metadata":{},"sourceType":"module"}