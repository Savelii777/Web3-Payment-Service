{"ast":null,"code":"export function pkcs7Pad(data) {\n  const padder = 16 - data.length % 16;\n  const result = new Uint8Array(data.length + padder);\n  result.set(data);\n  for (let i = data.length; i < result.length; i++) {\n    result[i] = padder;\n  }\n  return result;\n}\nexport function pkcs7Strip(data) {\n  if (data.length < 16) {\n    throw new TypeError('PKCS#7 invalid length');\n  }\n  const padder = data[data.length - 1];\n  if (padder > 16) {\n    throw new TypeError('PKCS#7 padding byte out of range');\n  }\n  const length = data.length - padder;\n  for (let i = 0; i < padder; i++) {\n    if (data[length + i] !== padder) {\n      throw new TypeError('PKCS#7 invalid padding byte');\n    }\n  }\n  return new Uint8Array(data.subarray(0, length));\n}","map":{"version":3,"sources":["../src.ts/padding.ts"],"names":[],"mappings":"AACA,OAAM,SAAU,QAAQ,CAAC,IAAgB,EAAA;EACrC,MAAM,MAAM,GAAG,EAAE,GAAI,IAAI,CAAC,MAAM,GAAG,EAAG;EAEtC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACnD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;EAEhB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM;EACrB;EAED,OAAO,MAAM;AACjB;AAEA,OAAM,SAAU,UAAU,CAAC,IAAgB,EAAA;EACvC,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE;IAAE,MAAM,IAAI,SAAS,CAAC,uBAAuB,CAAC;EAAG;EAEvE,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;EACpC,IAAI,MAAM,GAAG,EAAE,EAAE;IAAE,MAAM,IAAI,SAAS,CAAC,kCAAkC,CAAC;EAAG;EAE7E,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,MAAM;EACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7B,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,EAAE;MAC7B,MAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC;IACrD;EACJ;EAED,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACnD","sourceRoot":"","sourcesContent":["export function pkcs7Pad(data) {\n    const padder = 16 - (data.length % 16);\n    const result = new Uint8Array(data.length + padder);\n    result.set(data);\n    for (let i = data.length; i < result.length; i++) {\n        result[i] = padder;\n    }\n    return result;\n}\nexport function pkcs7Strip(data) {\n    if (data.length < 16) {\n        throw new TypeError('PKCS#7 invalid length');\n    }\n    const padder = data[data.length - 1];\n    if (padder > 16) {\n        throw new TypeError('PKCS#7 padding byte out of range');\n    }\n    const length = data.length - padder;\n    for (let i = 0; i < padder; i++) {\n        if (data[length + i] !== padder) {\n            throw new TypeError('PKCS#7 invalid padding byte');\n        }\n    }\n    return new Uint8Array(data.subarray(0, length));\n}\n//# sourceMappingURL=padding.js.map"]},"metadata":{},"sourceType":"module"}