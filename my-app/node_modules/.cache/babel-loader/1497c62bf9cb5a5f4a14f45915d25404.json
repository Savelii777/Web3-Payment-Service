{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key) {\n  let pubkey;\n  if (typeof key === \"string\") {\n    pubkey = SigningKey.computePublicKey(key, false);\n  } else {\n    pubkey = key.publicKey;\n  }\n  return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest, signature) {\n  return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}","map":{"version":3,"sources":["../../src.ts/transaction/address.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,qBAAqB;AAChD,SAAS,SAAS,EAAE,UAAU,QAAQ,oBAAoB;AAK1D;;;;AAIG;AACH,OAAM,SAAU,cAAc,CAAC,GAAwB,EAAA;EACnD,IAAI,MAAc;EAClB,IAAI,OAAO,GAAI,KAAK,QAAQ,EAAE;IAC1B,MAAM,GAAG,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC;GACnD,MAAM;IACH,MAAM,GAAG,GAAG,CAAC,SAAS;EACzB;EACD,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;AAC1E;AAEA;;;AAGG;AACH,OAAM,SAAU,cAAc,CAAC,MAAiB,EAAE,SAAwB,EAAA;EACtE,OAAO,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACzE","sourceRoot":"","sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key) {\n    let pubkey;\n    if (typeof (key) === \"string\") {\n        pubkey = SigningKey.computePublicKey(key, false);\n    }\n    else {\n        pubkey = key.publicKey;\n    }\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest, signature) {\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"module"}