{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n  return getAddress(value);\n}\nfunction handleAccessList(value, param) {\n  try {\n    return accessListify(value);\n  } catch (error) {\n    assertArgument(false, error.message, param, value);\n  }\n}\nfunction handleNumber(_value, param) {\n  if (_value === \"0x\") {\n    return 0;\n  }\n  return getNumber(_value, param);\n}\nfunction handleUint(_value, param) {\n  if (_value === \"0x\") {\n    return BN_0;\n  }\n  const value = getBigInt(_value, param);\n  assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n  return value;\n}\nfunction formatNumber(_value, name) {\n  const value = getBigInt(_value, \"value\");\n  const result = toBeArray(value);\n  assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n  return result;\n}\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\nfunction _parseLegacy(data) {\n  const fields = decodeRlp(data);\n  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n  const tx = {\n    type: 0,\n    nonce: handleNumber(fields[0], \"nonce\"),\n    gasPrice: handleUint(fields[1], \"gasPrice\"),\n    gasLimit: handleUint(fields[2], \"gasLimit\"),\n    to: handleAddress(fields[3]),\n    value: handleUint(fields[4], \"value\"),\n    data: hexlify(fields[5]),\n    chainId: BN_0\n  };\n  // Legacy unsigned transaction\n  if (fields.length === 6) {\n    return tx;\n  }\n  const v = handleUint(fields[6], \"v\");\n  const r = handleUint(fields[7], \"r\");\n  const s = handleUint(fields[8], \"s\");\n  if (r === BN_0 && s === BN_0) {\n    // EIP-155 unsigned transaction\n    tx.chainId = v;\n  } else {\n    // Compute the EIP-155 chain ID (or 0 for legacy)\n    let chainId = (v - BN_35) / BN_2;\n    if (chainId < BN_0) {\n      chainId = BN_0;\n    }\n    tx.chainId = chainId;\n    // Signed Legacy Transaction\n    assertArgument(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n    tx.signature = Signature.from({\n      r: zeroPadValue(fields[7], 32),\n      s: zeroPadValue(fields[8], 32),\n      v\n    });\n    tx.hash = keccak256(data);\n  }\n  return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n  const fields = [formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? getAddress(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\"];\n  let chainId = BN_0;\n  if (tx.chainId != BN_0) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = getBigInt(tx.chainId, \"tx.chainId\");\n    // We have a chainId in the tx and an EIP-155 v in the signature,\n    // make sure they agree with each other\n    assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  } else if (tx.signature) {\n    // No explicit chainId, but EIP-155 have a derived implicit chainId\n    const legacy = tx.signature.legacyChainId;\n    if (legacy != null) {\n      chainId = legacy;\n    }\n  }\n  // Requesting an unsigned transaction\n  if (!sig) {\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== BN_0) {\n      fields.push(toBeArray(chainId));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    return encodeRlp(fields);\n  }\n  // @TODO: We should probably check that tx.signature, chainId, and sig\n  //        match but that logic could break existing code, so schedule\n  //        this for the next major bump.\n  // Compute the EIP-155 v\n  let v = BigInt(27 + sig.yParity);\n  if (chainId !== BN_0) {\n    v = Signature.getChainIdV(chainId, sig.v);\n  } else if (BigInt(sig.v) !== v) {\n    assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  }\n  // Add the signature\n  fields.push(toBeArray(v));\n  fields.push(toBeArray(sig.r));\n  fields.push(toBeArray(sig.s));\n  return encodeRlp(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n  let yParity;\n  try {\n    yParity = handleNumber(fields[0], \"yParity\");\n    if (yParity !== 0 && yParity !== 1) {\n      throw new Error(\"bad yParity\");\n    }\n  } catch (error) {\n    assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n  }\n  const r = zeroPadValue(fields[1], 32);\n  const s = zeroPadValue(fields[2], 32);\n  const signature = Signature.from({\n    r,\n    s,\n    yParity\n  });\n  tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n  const fields = decodeRlp(getBytes(data).slice(1));\n  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n  const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n  const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n  const tx = {\n    type: 2,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleUint(fields[4], \"gasLimit\"),\n    to: handleAddress(fields[5]),\n    value: handleUint(fields[6], \"value\"),\n    data: hexlify(fields[7]),\n    accessList: handleAccessList(fields[8], \"accessList\")\n  };\n  // Unsigned EIP-1559 Transaction\n  if (fields.length === 9) {\n    return tx;\n  }\n  tx.hash = keccak256(data);\n  _parseEipSignature(tx, fields.slice(9));\n  return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? getAddress(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"yParity\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n  }\n  return concat([\"0x02\", encodeRlp(fields)]);\n}\nfunction _parseEip2930(data) {\n  const fields = decodeRlp(getBytes(data).slice(1));\n  assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n  const tx = {\n    type: 1,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    gasPrice: handleUint(fields[2], \"gasPrice\"),\n    gasLimit: handleUint(fields[3], \"gasLimit\"),\n    to: handleAddress(fields[4]),\n    value: handleUint(fields[5], \"value\"),\n    data: hexlify(fields[6]),\n    accessList: handleAccessList(fields[7], \"accessList\")\n  };\n  // Unsigned EIP-2930 Transaction\n  if (fields.length === 8) {\n    return tx;\n  }\n  tx.hash = keccak256(data);\n  _parseEipSignature(tx, fields.slice(8));\n  return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? getAddress(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n  }\n  return concat([\"0x01\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction {\n  #type;\n  #to;\n  #data;\n  #nonce;\n  #gasLimit;\n  #gasPrice;\n  #maxPriorityFeePerGas;\n  #maxFeePerGas;\n  #value;\n  #chainId;\n  #sig;\n  #accessList;\n  /**\n   *  The transaction type.\n   *\n   *  If null, the type will be automatically inferred based on\n   *  explicit properties.\n   */\n  get type() {\n    return this.#type;\n  }\n  set type(value) {\n    switch (value) {\n      case null:\n        this.#type = null;\n        break;\n      case 0:\n      case \"legacy\":\n        this.#type = 0;\n        break;\n      case 1:\n      case \"berlin\":\n      case \"eip-2930\":\n        this.#type = 1;\n        break;\n      case 2:\n      case \"london\":\n      case \"eip-1559\":\n        this.#type = 2;\n        break;\n      default:\n        assertArgument(false, \"unsupported transaction type\", \"type\", value);\n    }\n  }\n  /**\n   *  The name of the transaction type.\n   */\n  get typeName() {\n    switch (this.type) {\n      case 0:\n        return \"legacy\";\n      case 1:\n        return \"eip-2930\";\n      case 2:\n        return \"eip-1559\";\n    }\n    return null;\n  }\n  /**\n   *  The ``to`` address for the transaction or ``null`` if the\n   *  transaction is an ``init`` transaction.\n   */\n  get to() {\n    return this.#to;\n  }\n  set to(value) {\n    this.#to = value == null ? null : getAddress(value);\n  }\n  /**\n   *  The transaction nonce.\n   */\n  get nonce() {\n    return this.#nonce;\n  }\n  set nonce(value) {\n    this.#nonce = getNumber(value, \"value\");\n  }\n  /**\n   *  The gas limit.\n   */\n  get gasLimit() {\n    return this.#gasLimit;\n  }\n  set gasLimit(value) {\n    this.#gasLimit = getBigInt(value);\n  }\n  /**\n   *  The gas price.\n   *\n   *  On legacy networks this defines the fee that will be paid. On\n   *  EIP-1559 networks, this should be ``null``.\n   */\n  get gasPrice() {\n    const value = this.#gasPrice;\n    if (value == null && (this.type === 0 || this.type === 1)) {\n      return BN_0;\n    }\n    return value;\n  }\n  set gasPrice(value) {\n    this.#gasPrice = value == null ? null : getBigInt(value, \"gasPrice\");\n  }\n  /**\n   *  The maximum priority fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxPriorityFeePerGas() {\n    const value = this.#maxPriorityFeePerGas;\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxPriorityFeePerGas(value) {\n    this.#maxPriorityFeePerGas = value == null ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n  }\n  /**\n   *  The maximum total fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxFeePerGas() {\n    const value = this.#maxFeePerGas;\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxFeePerGas(value) {\n    this.#maxFeePerGas = value == null ? null : getBigInt(value, \"maxFeePerGas\");\n  }\n  /**\n   *  The transaction data. For ``init`` transactions this is the\n   *  deployment code.\n   */\n  get data() {\n    return this.#data;\n  }\n  set data(value) {\n    this.#data = hexlify(value);\n  }\n  /**\n   *  The amount of ether (in wei) to send in this transactions.\n   */\n  get value() {\n    return this.#value;\n  }\n  set value(value) {\n    this.#value = getBigInt(value, \"value\");\n  }\n  /**\n   *  The chain ID this transaction is valid on.\n   */\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = getBigInt(value);\n  }\n  /**\n   *  If signed, the signature for this transaction.\n   */\n  get signature() {\n    return this.#sig || null;\n  }\n  set signature(value) {\n    this.#sig = value == null ? null : Signature.from(value);\n  }\n  /**\n   *  The access list.\n   *\n   *  An access list permits discounted (but pre-paid) access to\n   *  bytecode and state variable access within contract execution.\n   */\n  get accessList() {\n    const value = this.#accessList || null;\n    if (value == null) {\n      if (this.type === 1 || this.type === 2) {\n        return [];\n      }\n      return null;\n    }\n    return value;\n  }\n  set accessList(value) {\n    this.#accessList = value == null ? null : accessListify(value);\n  }\n  /**\n   *  Creates a new Transaction with default values.\n   */\n  constructor() {\n    this.#type = null;\n    this.#to = null;\n    this.#nonce = 0;\n    this.#gasLimit = BigInt(0);\n    this.#gasPrice = null;\n    this.#maxPriorityFeePerGas = null;\n    this.#maxFeePerGas = null;\n    this.#data = \"0x\";\n    this.#value = BigInt(0);\n    this.#chainId = BigInt(0);\n    this.#sig = null;\n    this.#accessList = null;\n  }\n  /**\n   *  The transaction hash, if signed. Otherwise, ``null``.\n   */\n  get hash() {\n    if (this.signature == null) {\n      return null;\n    }\n    return keccak256(this.serialized);\n  }\n  /**\n   *  The pre-image hash of this transaction.\n   *\n   *  This is the digest that a [[Signer]] must sign to authorize\n   *  this transaction.\n   */\n  get unsignedHash() {\n    return keccak256(this.unsignedSerialized);\n  }\n  /**\n   *  The sending address, if signed. Otherwise, ``null``.\n   */\n  get from() {\n    if (this.signature == null) {\n      return null;\n    }\n    return recoverAddress(this.unsignedHash, this.signature);\n  }\n  /**\n   *  The public key of the sender, if signed. Otherwise, ``null``.\n   */\n  get fromPublicKey() {\n    if (this.signature == null) {\n      return null;\n    }\n    return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n  }\n  /**\n   *  Returns true if signed.\n   *\n   *  This provides a Type Guard that properties requiring a signed\n   *  transaction are non-null.\n   */\n  isSigned() {\n    //isSigned(): this is SignedTransaction {\n    return this.signature != null;\n  }\n  /**\n   *  The serialized transaction.\n   *\n   *  This throws if the transaction is unsigned. For the pre-image,\n   *  use [[unsignedSerialized]].\n   */\n  get serialized() {\n    assert(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this, this.signature);\n      case 1:\n        return _serializeEip2930(this, this.signature);\n      case 2:\n        return _serializeEip1559(this, this.signature);\n    }\n    assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n  }\n  /**\n   *  The transaction pre-image.\n   *\n   *  The hash of this is the digest which needs to be signed to\n   *  authorize this transaction.\n   */\n  get unsignedSerialized() {\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this);\n      case 1:\n        return _serializeEip2930(this);\n      case 2:\n        return _serializeEip1559(this);\n    }\n    assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".unsignedSerialized\"\n    });\n  }\n  /**\n   *  Return the most \"likely\" type; currently the highest\n   *  supported transaction type.\n   */\n  inferType() {\n    return this.inferTypes().pop();\n  }\n  /**\n   *  Validates the explicit properties and returns a list of compatible\n   *  transaction types.\n   */\n  inferTypes() {\n    // Checks that there are no conflicting properties set\n    const hasGasPrice = this.gasPrice != null;\n    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n    const hasAccessList = this.accessList != null;\n    //if (hasGasPrice && hasFee) {\n    //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n    //}\n    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n      assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n        value: this\n      });\n    }\n    //if (this.type === 2 && hasGasPrice) {\n    //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n    //}\n    assert(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n      value: this\n    });\n    assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n      value: this\n    });\n    const types = [];\n    // Explicit type\n    if (this.type != null) {\n      types.push(this.type);\n    } else {\n      if (hasFee) {\n        types.push(2);\n      } else if (hasGasPrice) {\n        types.push(1);\n        if (!hasAccessList) {\n          types.push(0);\n        }\n      } else if (hasAccessList) {\n        types.push(1);\n        types.push(2);\n      } else {\n        types.push(0);\n        types.push(1);\n        types.push(2);\n      }\n    }\n    types.sort();\n    return types;\n  }\n  /**\n   *  Returns true if this transaction is a legacy transaction (i.e.\n   *  ``type === 0``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if this transaction is berlin hardform transaction (i.e.\n   *  ``type === 1``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if this transaction is london hardform transaction (i.e.\n   *  ``type === 2``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Create a copy of this transaciton.\n   */\n  clone() {\n    return Transaction.from(this);\n  }\n  /**\n   *  Return a JSON-friendly object.\n   */\n  toJSON() {\n    const s = v => {\n      if (v == null) {\n        return null;\n      }\n      return v.toString();\n    };\n    return {\n      type: this.type,\n      to: this.to,\n      //            from: this.from,\n      data: this.data,\n      nonce: this.nonce,\n      gasLimit: s(this.gasLimit),\n      gasPrice: s(this.gasPrice),\n      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n      maxFeePerGas: s(this.maxFeePerGas),\n      value: s(this.value),\n      chainId: s(this.chainId),\n      sig: this.signature ? this.signature.toJSON() : null,\n      accessList: this.accessList\n    };\n  }\n  /**\n   *  Create a **Transaction** from a serialized transaction or a\n   *  Transaction-like object.\n   */\n  static from(tx) {\n    if (tx == null) {\n      return new Transaction();\n    }\n    if (typeof tx === \"string\") {\n      const payload = getBytes(tx);\n      if (payload[0] >= 0x7f) {\n        // @TODO: > vs >= ??\n        return Transaction.from(_parseLegacy(payload));\n      }\n      switch (payload[0]) {\n        case 1:\n          return Transaction.from(_parseEip2930(payload));\n        case 2:\n          return Transaction.from(_parseEip1559(payload));\n      }\n      assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"from\"\n      });\n    }\n    const result = new Transaction();\n    if (tx.type != null) {\n      result.type = tx.type;\n    }\n    if (tx.to != null) {\n      result.to = tx.to;\n    }\n    if (tx.nonce != null) {\n      result.nonce = tx.nonce;\n    }\n    if (tx.gasLimit != null) {\n      result.gasLimit = tx.gasLimit;\n    }\n    if (tx.gasPrice != null) {\n      result.gasPrice = tx.gasPrice;\n    }\n    if (tx.maxPriorityFeePerGas != null) {\n      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n    }\n    if (tx.maxFeePerGas != null) {\n      result.maxFeePerGas = tx.maxFeePerGas;\n    }\n    if (tx.data != null) {\n      result.data = tx.data;\n    }\n    if (tx.value != null) {\n      result.value = tx.value;\n    }\n    if (tx.chainId != null) {\n      result.chainId = tx.chainId;\n    }\n    if (tx.signature != null) {\n      result.signature = Signature.from(tx.signature);\n    }\n    if (tx.accessList != null) {\n      result.accessList = tx.accessList;\n    }\n    if (tx.hash != null) {\n      assertArgument(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n      assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n    }\n    if (tx.from != null) {\n      assertArgument(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n      assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n    }\n    return result;\n  }\n}","map":{"version":3,"sources":["../../src.ts/transaction/transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport { keccak256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleAccessList(value, param) {\n    try {\n        return accessListify(value);\n    }\n    catch (error) {\n        assertArgument(false, error.message, param, value);\n    }\n}\nfunction handleNumber(_value, param) {\n    if (_value === \"0x\") {\n        return 0;\n    }\n    return getNumber(_value, param);\n}\nfunction handleUint(_value, param) {\n    if (_value === \"0x\") {\n        return BN_0;\n    }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\nfunction formatNumber(_value, name) {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _parseLegacy(data) {\n    const fields = decodeRlp(data);\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n        type: 0,\n        nonce: handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to: handleAddress(fields[3]),\n        value: handleUint(fields[4], \"value\"),\n        data: hexlify(fields[5]),\n        chainId: BN_0\n    };\n    // Legacy unsigned transaction\n    if (fields.length === 6) {\n        return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n    }\n    else {\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) {\n            chainId = BN_0;\n        }\n        tx.chainId = chainId;\n        // Signed Legacy Transaction\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\n        tx.signature = Signature.from({\n            r: zeroPadValue(fields[7], 32),\n            s: zeroPadValue(fields[8], 32),\n            v\n        });\n        tx.hash = keccak256(data);\n    }\n    return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n    const fields = [\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n    ];\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) {\n            chainId = legacy;\n        }\n    }\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push(toBeArray(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n        return encodeRlp(fields);\n    }\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = Signature.getChainIdV(chainId, sig.v);\n    }\n    else if (BigInt(sig.v) !== v) {\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    // Add the signature\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n    return encodeRlp(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n    let yParity;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) {\n            throw new Error(\"bad yParity\");\n        }\n    }\n    catch (error) {\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n    const signature = Signature.from({ r, s, yParity });\n    tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n    const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n    const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n    const tx = {\n        type: 2,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: hexlify(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\"),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) {\n        return tx;\n    }\n    tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(9));\n    return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x02\", encodeRlp(fields)]);\n}\nfunction _parseEip2930(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n    const tx = {\n        type: 1,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\n        to: handleAddress(fields[4]),\n        value: handleUint(fields[5], \"value\"),\n        data: hexlify(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) {\n        return tx;\n    }\n    tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(8));\n    return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to) : \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x01\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction {\n    #type;\n    #to;\n    #data;\n    #nonce;\n    #gasLimit;\n    #gasPrice;\n    #maxPriorityFeePerGas;\n    #maxFeePerGas;\n    #value;\n    #chainId;\n    #sig;\n    #accessList;\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */\n    get type() { return this.#type; }\n    set type(value) {\n        switch (value) {\n            case null:\n                this.#type = null;\n                break;\n            case 0:\n            case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n                this.#type = 2;\n                break;\n            default:\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n    /**\n     *  The name of the transaction type.\n     */\n    get typeName() {\n        switch (this.type) {\n            case 0: return \"legacy\";\n            case 1: return \"eip-2930\";\n            case 2: return \"eip-1559\";\n        }\n        return null;\n    }\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */\n    get to() { return this.#to; }\n    set to(value) {\n        this.#to = (value == null) ? null : getAddress(value);\n    }\n    /**\n     *  The transaction nonce.\n     */\n    get nonce() { return this.#nonce; }\n    set nonce(value) { this.#nonce = getNumber(value, \"value\"); }\n    /**\n     *  The gas limit.\n     */\n    get gasLimit() { return this.#gasLimit; }\n    set gasLimit(value) { this.#gasLimit = getBigInt(value); }\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */\n    get gasPrice() {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_0;\n        }\n        return value;\n    }\n    set gasPrice(value) {\n        this.#gasPrice = (value == null) ? null : getBigInt(value, \"gasPrice\");\n    }\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxPriorityFeePerGas() {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value) {\n        this.#maxPriorityFeePerGas = (value == null) ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n    }\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxFeePerGas() {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value) {\n        this.#maxFeePerGas = (value == null) ? null : getBigInt(value, \"maxFeePerGas\");\n    }\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */\n    get data() { return this.#data; }\n    set data(value) { this.#data = hexlify(value); }\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */\n    get value() { return this.#value; }\n    set value(value) {\n        this.#value = getBigInt(value, \"value\");\n    }\n    /**\n     *  The chain ID this transaction is valid on.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = getBigInt(value); }\n    /**\n     *  If signed, the signature for this transaction.\n     */\n    get signature() { return this.#sig || null; }\n    set signature(value) {\n        this.#sig = (value == null) ? null : Signature.from(value);\n    }\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */\n    get accessList() {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2) {\n                return [];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value) {\n        this.#accessList = (value == null) ? null : accessListify(value);\n    }\n    /**\n     *  Creates a new Transaction with default values.\n     */\n    constructor() {\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BigInt(0);\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BigInt(0);\n        this.#chainId = BigInt(0);\n        this.#sig = null;\n        this.#accessList = null;\n    }\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */\n    get hash() {\n        if (this.signature == null) {\n            return null;\n        }\n        return keccak256(this.serialized);\n    }\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */\n    get unsignedHash() {\n        return keccak256(this.unsignedSerialized);\n    }\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */\n    get from() {\n        if (this.signature == null) {\n            return null;\n        }\n        return recoverAddress(this.unsignedHash, this.signature);\n    }\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */\n    get fromPublicKey() {\n        if (this.signature == null) {\n            return null;\n        }\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */\n    isSigned() {\n        //isSigned(): this is SignedTransaction {\n        return this.signature != null;\n    }\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */\n    get serialized() {\n        assert(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this, this.signature);\n            case 1:\n                return _serializeEip2930(this, this.signature);\n            case 2:\n                return _serializeEip1559(this, this.signature);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n    }\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */\n    get unsignedSerialized() {\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this);\n            case 1:\n                return _serializeEip2930(this);\n            case 2:\n                return _serializeEip1559(this);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".unsignedSerialized\" });\n    }\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */\n    inferType() {\n        return (this.inferTypes().pop());\n    }\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */\n    inferTypes() {\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\n        const hasAccessList = (this.accessList != null);\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n        }\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\n        const types = [];\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n        }\n        else {\n            if (hasFee) {\n                types.push(2);\n            }\n            else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) {\n                    types.push(0);\n                }\n            }\n            else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            }\n            else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n            }\n        }\n        types.sort();\n        return types;\n    }\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Create a copy of this transaciton.\n     */\n    clone() {\n        return Transaction.from(this);\n    }\n    /**\n     *  Return a JSON-friendly object.\n     */\n    toJSON() {\n        const s = (v) => {\n            if (v == null) {\n                return null;\n            }\n            return v.toString();\n        };\n        return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n        };\n    }\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */\n    static from(tx) {\n        if (tx == null) {\n            return new Transaction();\n        }\n        if (typeof (tx) === \"string\") {\n            const payload = getBytes(tx);\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\n                return Transaction.from(_parseLegacy(payload));\n            }\n            switch (payload[0]) {\n                case 1: return Transaction.from(_parseEip2930(payload));\n                case 2: return Transaction.from(_parseEip1559(payload));\n            }\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n        }\n        const result = new Transaction();\n        if (tx.type != null) {\n            result.type = tx.type;\n        }\n        if (tx.to != null) {\n            result.to = tx.to;\n        }\n        if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n        }\n        if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n        }\n        if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n        }\n        if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        }\n        if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n        }\n        if (tx.data != null) {\n            result.data = tx.data;\n        }\n        if (tx.value != null) {\n            result.value = tx.value;\n        }\n        if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n        }\n        if (tx.signature != null) {\n            result.signature = Signature.from(tx.signature);\n        }\n        if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n        }\n        if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n        if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"module"}