{"ast":null,"code":"/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */\nimport { assertArgument } from \"./errors.js\";\nimport { FixedNumber } from \"./fixednumber.js\";\nimport { getNumber } from \"./maths.js\";\nconst names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */\nexport function formatUnits(value, unit) {\n  let decimals = 18;\n  if (typeof unit === \"string\") {\n    const index = names.indexOf(unit);\n    assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n    decimals = 3 * index;\n  } else if (unit != null) {\n    decimals = getNumber(unit, \"unit\");\n  }\n  return FixedNumber.fromValue(value, decimals, {\n    decimals,\n    width: 512\n  }).toString();\n}\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */\nexport function parseUnits(value, unit) {\n  assertArgument(typeof value === \"string\", \"value must be a string\", \"value\", value);\n  let decimals = 18;\n  if (typeof unit === \"string\") {\n    const index = names.indexOf(unit);\n    assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n    decimals = 3 * index;\n  } else if (unit != null) {\n    decimals = getNumber(unit, \"unit\");\n  }\n  return FixedNumber.fromString(value, {\n    decimals,\n    width: 512\n  }).value;\n}\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */\nexport function formatEther(wei) {\n  return formatUnits(wei, 18);\n}\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */\nexport function parseEther(ether) {\n  return parseUnits(ether, 18);\n}","map":{"version":3,"sources":["../../src.ts/utils/units.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAoBG;AACH,SAAS,cAAc,QAAQ,aAAa;AAC5C,SAAS,WAAW,QAAQ,kBAAkB;AAC9C,SAAS,SAAS,QAAQ,YAAY;AAKtC,MAAM,KAAK,GAAG,CACV,KAAK,EACL,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,EACP,QAAQ,EACR,OAAO,CACV;AAED;;;;;AAKG;AACH,OAAM,SAAU,WAAW,CAAC,KAAmB,EAAE,IAAuB,EAAA;EACpE,IAAI,QAAQ,GAAG,EAAE;EACjB,IAAI,OAAO,IAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;IACjC,cAAc,CAAC,KAAK,IAAI,CAAC,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,CAAC;IACxD,QAAQ,GAAG,CAAC,GAAG,KAAK;GACvB,MAAM,IAAI,IAAI,IAAI,IAAI,EAAE;IACrB,QAAQ,GAAG,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC;EACrC;EAED,OAAO,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE;IAAE,QAAQ;IAAE,KAAK,EAAE;EAAG,CAAE,CAAC,CAAC,QAAQ,CAAA,CAAE;AACtF;AAEA;;;;AAIG;AACH,OAAM,SAAU,UAAU,CAAC,KAAa,EAAE,IAAuB,EAAA;EAC7D,cAAc,CAAC,OAAO,KAAM,KAAK,QAAQ,EAAE,wBAAwB,EAAE,OAAO,EAAE,KAAK,CAAC;EAEpF,IAAI,QAAQ,GAAG,EAAE;EACjB,IAAI,OAAO,IAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;IACjC,cAAc,CAAC,KAAK,IAAI,CAAC,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,CAAC;IACxD,QAAQ,GAAG,CAAC,GAAG,KAAK;GACvB,MAAM,IAAI,IAAI,IAAI,IAAI,EAAE;IACrB,QAAQ,GAAG,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC;EACrC;EAED,OAAO,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE;IAAE,QAAQ;IAAE,KAAK,EAAE;EAAG,CAAE,CAAC,CAAC,KAAK;AACxE;AAEA;;AAEG;AACH,OAAM,SAAU,WAAW,CAAC,GAAiB,EAAA;EACzC,OAAO,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC;AAC/B;AAEA;;;AAGG;AACH,OAAM,SAAU,UAAU,CAAC,KAAa,EAAA;EACpC,OAAO,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC;AAChC","sourceRoot":"","sourcesContent":["/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */\nimport { assertArgument } from \"./errors.js\";\nimport { FixedNumber } from \"./fixednumber.js\";\nimport { getNumber } from \"./maths.js\";\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */\nexport function formatUnits(value, unit) {\n    let decimals = 18;\n    if (typeof (unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    }\n    else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n    return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();\n}\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */\nexport function parseUnits(value, unit) {\n    assertArgument(typeof (value) === \"string\", \"value must be a string\", \"value\", value);\n    let decimals = 18;\n    if (typeof (unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    }\n    else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n    return FixedNumber.fromString(value, { decimals, width: 512 }).value;\n}\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=units.js.map"]},"metadata":{},"sourceType":"module"}