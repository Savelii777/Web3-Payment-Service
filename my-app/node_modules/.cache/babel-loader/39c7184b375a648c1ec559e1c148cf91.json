{"ast":null,"code":"import { getAddress } from \"../../address/index.js\";\nimport { toBeHex } from \"../../utils/maths.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class AddressCoder extends Coder {\n  constructor(localName) {\n    super(\"address\", \"address\", localName, false);\n  }\n  defaultValue() {\n    return \"0x0000000000000000000000000000000000000000\";\n  }\n  encode(writer, _value) {\n    let value = Typed.dereference(_value, \"string\");\n    try {\n      value = getAddress(value);\n    } catch (error) {\n      return this._throwError(error.message, _value);\n    }\n    return writer.writeValue(value);\n  }\n  decode(reader) {\n    return getAddress(toBeHex(reader.readValue(), 20));\n  }\n}","map":{"version":3,"sources":["../../../src.ts/abi/coders/address.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,wBAAwB;AACnD,SAAS,OAAO,QAAQ,sBAAsB;AAE9C,SAAS,KAAK,QAAQ,aAAa;AACnC,SAAS,KAAK,QAAQ,qBAAqB;AAK3C;;AAEG;AACH,OAAM,MAAO,YAAa,SAAQ,KAAK,CAAA;EAEnC,WAAA,CAAY,SAAiB,EAAA;IACzB,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;EACjD;EAEA,YAAY,CAAA,EAAA;IACR,OAAO,4CAA4C;EACvD;EAEA,MAAM,CAAC,MAAc,EAAE,MAAsB,EAAA;IACzC,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC/C,IAAI;MACA,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;KAC5B,CAAC,OAAO,KAAU,EAAE;MACjB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;IACjD;IACD,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;EACnC;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAA,CAAE,EAAE,EAAE,CAAC,CAAC;EACtD;AACH","sourceRoot":"","sourcesContent":["import { getAddress } from \"../../address/index.js\";\nimport { toBeHex } from \"../../utils/maths.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, _value) {\n        let value = Typed.dereference(_value, \"string\");\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(toBeHex(reader.readValue(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"module"}