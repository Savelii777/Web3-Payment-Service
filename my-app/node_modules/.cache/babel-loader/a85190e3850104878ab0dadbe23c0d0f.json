{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateMethodGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\n/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n  let message = \"missing revert data\";\n  let reason = null;\n  const invocation = null;\n  let revert = null;\n  if (data) {\n    message = \"execution reverted\";\n    const bytes = getBytes(data);\n    data = hexlify(data);\n    if (bytes.length === 0) {\n      message += \" (no data present; likely require(false) occurred\";\n      reason = \"require(false)\";\n    } else if (bytes.length % 32 !== 4) {\n      message += \" (could not decode reason; invalid data length)\";\n    } else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n      // Error(string)\n      try {\n        reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        revert = {\n          signature: \"Error(string)\",\n          name: \"Error\",\n          args: [reason]\n        };\n        message += \": \".concat(JSON.stringify(reason));\n      } catch (error) {\n        message += \" (could not decode reason; invalid string data)\";\n      }\n    } else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n      // Panic(uint256)\n      try {\n        const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n        revert = {\n          signature: \"Panic(uint256)\",\n          name: \"Panic\",\n          args: [code]\n        };\n        reason = \"Panic due to \".concat(PanicReasons.get(code) || \"UNKNOWN\", \"(\").concat(code, \")\");\n        message += \": \".concat(reason);\n      } catch (error) {\n        message += \" (could not decode panic code)\";\n      }\n    } else {\n      message += \" (unknown custom error)\";\n    }\n  }\n  const transaction = {\n    to: tx.to ? getAddress(tx.to) : null,\n    data: tx.data || \"0x\"\n  };\n  if (tx.from) {\n    transaction.from = getAddress(tx.from);\n  }\n  return makeError(message, \"CALL_EXCEPTION\", {\n    action,\n    data,\n    reason,\n    transaction,\n    invocation,\n    revert\n  });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nvar _getCoder = /*#__PURE__*/new WeakSet();\nexport class AbiCoder {\n  constructor() {\n    _classPrivateMethodInitSpec(this, _getCoder);\n  }\n  /**\n   *  Get the default values for the given %%types%%.\n   *\n   *  For example, a ``uint`` is by default ``0`` and ``bool``\n   *  is by default ``false``.\n   */\n  getDefaultValue(types) {\n    const coders = types.map(type => _classPrivateMethodGet(this, _getCoder, _getCoder2).call(this, ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.defaultValue();\n  }\n  /**\n   *  Encode the %%values%% as the %%types%% into ABI data.\n   *\n   *  @returns DataHexstring\n   */\n  encode(types, values) {\n    assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n    const coders = types.map(type => _classPrivateMethodGet(this, _getCoder, _getCoder2).call(this, ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    const writer = new Writer();\n    coder.encode(writer, values);\n    return writer.data;\n  }\n  /**\n   *  Decode the ABI %%data%% as the %%types%% into values.\n   *\n   *  If %%loose%% decoding is enabled, then strict padding is\n   *  not enforced. Some older versions of Solidity incorrectly\n   *  padded event data emitted from ``external`` functions.\n   */\n  decode(types, data, loose) {\n    const coders = types.map(type => _classPrivateMethodGet(this, _getCoder, _getCoder2).call(this, ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.decode(new Reader(data, loose));\n  }\n  /**\n   *  Returns the shared singleton instance of a default [[AbiCoder]].\n   *\n   *  On the first call, the instance is created internally.\n   */\n  static defaultAbiCoder() {\n    if (defaultCoder == null) {\n      defaultCoder = new AbiCoder();\n    }\n    return defaultCoder;\n  }\n  /**\n   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n   *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n   *  the Transaction %%tx%%.\n   */\n  static getBuiltinCallException(action, tx, data) {\n    return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n  }\n}\nfunction _getCoder2(param) {\n  if (param.isArray()) {\n    return new ArrayCoder(_classPrivateMethodGet(this, _getCoder, _getCoder2).call(this, param.arrayChildren), param.arrayLength, param.name);\n  }\n  if (param.isTuple()) {\n    return new TupleCoder(param.components.map(c => _classPrivateMethodGet(this, _getCoder, _getCoder2).call(this, c)), param.name);\n  }\n  switch (param.baseType) {\n    case \"address\":\n      return new AddressCoder(param.name);\n    case \"bool\":\n      return new BooleanCoder(param.name);\n    case \"string\":\n      return new StringCoder(param.name);\n    case \"bytes\":\n      return new BytesCoder(param.name);\n    case \"\":\n      return new NullCoder(param.name);\n  }\n  // u?int[0-9]*\n  let match = param.type.match(paramTypeNumber);\n  if (match) {\n    let size = parseInt(match[2] || \"256\");\n    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n    return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n  }\n  // bytes[0-9]+\n  match = param.type.match(paramTypeBytes);\n  if (match) {\n    let size = parseInt(match[1]);\n    assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n    return new FixedBytesCoder(size, param.name);\n  }\n  assertArgument(false, \"invalid type\", \"type\", param.type);\n}","map":{"version":3,"sources":["../../src.ts/abi/abi-coder.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;AAWG;AAEH;AAEA,SAAS,mBAAmB,EAAE,cAAc,QAAQ,mBAAmB;AAEvE,SAAgB,MAAM,EAAU,MAAM,QAAQ,4BAA4B;AAC1E,SAAS,YAAY,QAAQ,qBAAqB;AAClD,SAAS,UAAU,QAAQ,mBAAmB;AAC9C,SAAS,YAAY,QAAQ,qBAAqB;AAClD,SAAS,UAAU,QAAQ,mBAAmB;AAC9C,SAAS,eAAe,QAAQ,yBAAyB;AACzD,SAAS,SAAS,QAAQ,kBAAkB;AAC5C,SAAS,WAAW,QAAQ,oBAAoB;AAChD,SAAS,WAAW,QAAQ,oBAAoB;AAChD,SAAS,UAAU,QAAQ,mBAAmB;AAC9C,SAAS,SAAS,QAAQ,gBAAgB;AAE1C,SAAS,UAAU,QAAQ,qBAAqB;AAChD,SAAS,QAAQ,EAAE,OAAO,EAAE,SAAS,QAAQ,mBAAmB;AAOhE;AACA,MAAM,YAAY,GAAwB,IAAI,GAAG,CAAA,CAAE;AACnD,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC;AACvC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC;AACtC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC;AAClC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC;AACxC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,kBAAkB,CAAC;AAC1C,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,kBAAkB,CAAC;AAC1C,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC;AACzC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC;AAC3C,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC;AACvC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,6BAA6B,CAAC;AAErD,MAAM,cAAc,GAAG,IAAI,MAAM,CAAC,iBAAiB,CAAC;AACpD,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC;AAGvD,IAAI,YAAY,GAAoB,IAAI;AAGxC,SAAS,uBAAuB,CAAC,MAA2B,EAAE,EAA+D,EAAE,IAAsB,EAAE,QAAkB,EAAA;EACrK,IAAI,OAAO,GAAG,qBAAqB;EAEnC,IAAI,MAAM,GAAkB,IAAI;EAChC,MAAM,UAAU,GAAG,IAAI;EACvB,IAAI,MAAM,GAAiE,IAAI;EAE/E,IAAI,IAAI,EAAE;IACN,OAAO,GAAG,oBAAoB;IAE9B,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC5B,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAEpB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;MACpB,OAAO,IAAI,mDAAmD;MAC9D,MAAM,GAAG,gBAAgB;KAE5B,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,EAAE,KAAK,CAAC,EAAE;MAChC,OAAO,IAAI,iDAAiD;KAE/D,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;MACpD;MACA,IAAI;QACA,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAE,QAAQ,CAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,GAAG;UACL,SAAS,EAAE,eAAe;UAC1B,IAAI,EAAE,OAAO;UACb,IAAI,EAAE,CAAE,MAAM;SACjB;QACD,OAAO,SAAA,MAAA,CAAU,IAAI,CAAC,SAAS,CAAC,MAAM,CAAE,CAAE;OAE7C,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,IAAI,iDAAiD;MAC/D;KAEJ,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;MACpD;MACA,IAAI;QACA,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAE,SAAS,CAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,GAAG;UACL,SAAS,EAAE,gBAAgB;UAC3B,IAAI,EAAE,OAAO;UACb,IAAI,EAAE,CAAE,IAAI;SACf;QACD,MAAM,mBAAA,MAAA,CAAoB,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,SAAU,OAAA,MAAA,CAAK,IAAK,MAAG;QAC3E,OAAO,SAAA,MAAA,CAAU,MAAO,CAAE;OAC7B,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,IAAI,gCAAgC;MAC9C;KACJ,MAAM;MACH,OAAO,IAAI,yBAAyB;IACvC;EACJ;EAED,MAAM,WAAW,GAA6B;IAC1C,EAAE,EAAG,EAAE,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE,IAAK;IACrC,IAAI,EAAG,EAAE,CAAC,IAAI,IAAI;GACrB;EACD,IAAI,EAAE,CAAC,IAAI,EAAE;IAAE,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC;EAAG;EAExD,OAAO,SAAS,CAAC,OAAO,EAAE,gBAAgB,EAAE;IACxC,MAAM;IAAE,IAAI;IAAE,MAAM;IAAE,WAAW;IAAE,UAAU;IAAE;GAClD,CAAC;AACN;AAEA;;;AAGG;AAHH,IAAA,SAAA,oBAAA,OAAA;AAIA,OAAM,MAAO,QAAQ,CAAA;EAAA,YAAA;IAAA,2BAAA,OAAA,SAAA;EAAA;EA4CjB;;;;;AAKG;EACH,eAAe,CAAC,KAAwC,EAAA;IACpD,MAAM,MAAM,GAAiB,KAAK,CAAC,GAAG,CAAE,IAAI,IAAA,sBAAA,CAAK,IAAI,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAJ,IAAI,EAAW,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtF,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC;IACzC,OAAO,KAAK,CAAC,YAAY,CAAA,CAAE;EAC/B;EAEA;;;;AAIG;EACH,MAAM,CAAC,KAAwC,EAAE,MAA0B,EAAA;IACvE,mBAAmB,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,8BAA8B,CAAC;IAEhF,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAE,IAAI,IAAA,sBAAA,CAAK,IAAI,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAJ,IAAI,EAAW,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,MAAM,KAAK,GAAI,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAE;IAE3C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAA,CAAE;IAC3B,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;IAC5B,OAAO,MAAM,CAAC,IAAI;EACtB;EAEA;;;;;;AAMG;EACH,MAAM,CAAC,KAAwC,EAAE,IAAe,EAAE,KAAe,EAAA;IAC7E,MAAM,MAAM,GAAiB,KAAK,CAAC,GAAG,CAAE,IAAI,IAAA,sBAAA,CAAK,IAAI,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAJ,IAAI,EAAW,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtF,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC;IACzC,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;EAChD;EAEA;;;;AAIG;EACH,OAAO,eAAe,CAAA,EAAA;IAClB,IAAI,YAAY,IAAI,IAAI,EAAE;MACtB,YAAY,GAAG,IAAI,QAAQ,CAAA,CAAE;IAChC;IACD,OAAO,YAAY;EACvB;EAEA;;;;AAIG;EACH,OAAO,uBAAuB,CAAC,MAA2B,EAAE,EAA+D,EAAE,IAAsB,EAAA;IAC/I,OAAO,uBAAuB,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,eAAe,CAAA,CAAE,CAAC;EAChF;;AACH,SAAA,WAvGa,KAAgB,EAAA;EACtB,IAAI,KAAK,CAAC,OAAO,CAAA,CAAE,EAAE;IACjB,OAAO,IAAI,UAAU,CAAA,sBAAA,CAAC,IAAI,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAJ,IAAI,EAAW,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC;EAC5F;EAED,IAAI,KAAK,CAAC,OAAO,CAAA,CAAE,EAAE;IACjB,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAE,CAAC,IAAA,sBAAA,CAAK,IAAI,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAJ,IAAI,EAAW,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;EACpF;EAED,QAAQ,KAAK,CAAC,QAAQ;IAClB,KAAK,SAAS;MACV,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;IACvC,KAAK,MAAM;MACP,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;IACvC,KAAK,QAAQ;MACT,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;IACtC,KAAK,OAAO;MACR,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;IACrC,KAAK,EAAE;MACH,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;EACvC;EAED;EACA,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;EAC7C,IAAI,KAAK,EAAE;IACP,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;IACtC,cAAc,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,GAAG,IAAK,IAAI,GAAG,CAAC,KAAM,CAAC,EACxD,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC;IAC1D,OAAO,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,EAAG,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EAAG,KAAK,CAAC,IAAI,CAAC;EACrE;EAED;EACA,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;EACxC,IAAI,KAAK,EAAE;IACP,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7B,cAAc,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE,sBAAsB,EAAE,OAAO,EAAE,KAAK,CAAC;IAChF,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC;EAC/C;EAED,cAAc,CAAC,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC;AAC7D","sourceRoot":"","sourcesContent":["/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n        message = \"execution reverted\";\n        const bytes = getBytes(data);\n        data = hexlify(data);\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n        }\n        else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [reason]\n                };\n                message += `: ${JSON.stringify(reason)}`;\n            }\n            catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [code]\n                };\n                reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n                message += `: ${reason}`;\n            }\n            catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        }\n        else {\n            message += \" (unknown custom error)\";\n        }\n    }\n    const transaction = {\n        to: (tx.to ? getAddress(tx.to) : null),\n        data: (tx.data || \"0x\")\n    };\n    if (tx.from) {\n        transaction.from = getAddress(tx.from);\n    }\n    return makeError(message, \"CALL_EXCEPTION\", {\n        action, data, reason, transaction, invocation, revert\n    });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nexport class AbiCoder {\n    #getCoder(param) {\n        if (param.isArray()) {\n            return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n        }\n        if (param.isTuple()) {\n            return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);\n        }\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new FixedBytesCoder(size, param.name);\n        }\n        assertArgument(false, \"invalid type\", \"type\", param.type);\n    }\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */\n    getDefaultValue(types) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */\n    encode(types, values) {\n        assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = new Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */\n    decode(types, data, loose) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(new Reader(data, loose));\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */\n    static defaultAbiCoder() {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */\n    static getBuiltinCallException(action, tx, data) {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n}\n//# sourceMappingURL=abi-coder.js.map"]},"metadata":{},"sourceType":"module"}