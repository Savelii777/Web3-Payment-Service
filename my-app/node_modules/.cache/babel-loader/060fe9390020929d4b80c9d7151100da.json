{"ast":null,"code":"var _jsxFileName = \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Web3 from \"web3\";\nimport { useState } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithCustomToken, signOut } from \"firebase/auth\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport ConnectWalletButton from \"./components/ConnectWalletButton\";\nimport mobileCheck from \"./helpers/mobileCheck\";\nimport getLinker from \"./helpers/deepLink\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst startPayment = async _ref => {\n  let {\n    setError,\n    setTxs,\n    ether,\n    addr\n  } = _ref;\n\n  try {\n    if (!window.ethereum) throw new Error(\"No crypto wallet found. Please install it.\");\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    ethers.utils.getAddress(addr);\n    const tx = await signer.sendTransaction({\n      to: addr,\n      value: ethers.utils.parseEther(ether)\n    });\n    console.log({\n      ether,\n      addr\n    });\n    console.log(\"tx\", tx);\n    setTxs([tx]);\n  } catch (err) {\n    setError(err.message);\n  }\n};\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB1fGu9E8w2NUsf05uMKH1Coq6sEx6kVm0\",\n  authDomain: \"metamsk-a5083.firebaseapp.com\",\n  databaseURL: \"https://metamsk-a5083-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"metamsk-a5083\",\n  storageBucket: \"metamsk-a5083.appspot.com\",\n  messagingSenderId: \"807002056444\",\n  appId: \"1:807002056444:web:6fe0e3850f16a7988bd979\",\n  measurementId: \"G-S29PJYNV79\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [address, setAddress] = useState(\"\");\n\n  const onPressConnect = async () => {\n    setLoading(true);\n\n    try {\n      var _window, _window$ethereum;\n\n      const yourWebUrl = \"mysite.com\"; // Replace with your domain\n\n      const deepLink = `https://metamask.app.link/dapp/${yourWebUrl}`;\n      const downloadMetamaskUrl = \"https://metamask.io/download.html\";\n\n      if ((_window = window) !== null && _window !== void 0 && (_window$ethereum = _window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.isMetaMask) {\n        // Desktop browser\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const account = Web3.utils.toChecksumAddress(accounts[0]);\n        await handleLogin(account);\n      } else if (mobileCheck()) {\n        // Mobile browser\n        const linker = getLinker(downloadMetamaskUrl);\n        linker.openURL(deepLink);\n      } else {\n        window.open(downloadMetamaskUrl);\n      }\n    } catch (error) {\n      console.log(error);\n      setAddress(\"\");\n    }\n\n    setLoading(false);\n  };\n\n  const handleLogin = async address => {\n    var _response$data, _jwtResponse$data;\n\n    const baseUrl = \"http://localhost:4000\";\n    const response = await axios.get(`${baseUrl}/message?address=${address}`);\n    const messageToSign = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.messageToSign;\n\n    if (!messageToSign) {\n      throw new Error(\"Invalid message to sign\");\n    }\n\n    const web3 = new Web3(Web3.givenProvider);\n    const signature = await web3.eth.personal.sign(messageToSign, address);\n    const jwtResponse = await axios.get(`${baseUrl}/jwt?address=${address}&signature=${signature}`);\n    const customToken = jwtResponse === null || jwtResponse === void 0 ? void 0 : (_jwtResponse$data = jwtResponse.data) === null || _jwtResponse$data === void 0 ? void 0 : _jwtResponse$data.customToken;\n\n    if (!customToken) {\n      throw new Error(\"Invalid JWT\");\n    }\n\n    await signInWithCustomToken(auth, customToken);\n    setAddress(address);\n  };\n\n  const onPressLogout = () => {\n    setAddress(\"\");\n    signOut(auth);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n        onPressConnect: onPressConnect,\n        onPressLogout: onPressLogout,\n        loading: loading,\n        address: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"jb+CYBCLatwOT2t8Rs5oNf2j6JQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/savelii/Рабочий стол/Web3-Login/my-app/src/App.js"],"names":["Web3","useState","initializeApp","getAuth","signInWithCustomToken","signOut","axios","ConnectWalletButton","mobileCheck","getLinker","startPayment","setError","setTxs","ether","addr","window","ethereum","Error","send","provider","ethers","providers","Web3Provider","signer","getSigner","utils","getAddress","tx","sendTransaction","to","value","parseEther","console","log","err","message","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","App","loading","setLoading","address","setAddress","onPressConnect","yourWebUrl","deepLink","downloadMetamaskUrl","isMetaMask","accounts","request","method","account","toChecksumAddress","handleLogin","linker","openURL","open","error","baseUrl","response","get","messageToSign","data","web3","givenProvider","signature","eth","personal","sign","jwtResponse","customToken","onPressLogout"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { useState } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithCustomToken, signOut } from \"firebase/auth\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport ConnectWalletButton from \"./components/ConnectWalletButton\";\nimport mobileCheck from \"./helpers/mobileCheck\";\nimport getLinker from \"./helpers/deepLink\";\n\nconst startPayment = async ({ setError, setTxs, ether, addr }) => {\n  try {\n    if (!window.ethereum)\n      throw new Error(\"No crypto wallet found. Please install it.\");\n\n    await window.ethereum.send(\"eth_requestAccounts\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    ethers.utils.getAddress(addr);\n    const tx = await signer.sendTransaction({\n      to: addr,\n      value: ethers.utils.parseEther(ether)\n    });\n    console.log({ ether, addr });\n    console.log(\"tx\", tx);\n    setTxs([tx]);\n  } catch (err) {\n    setError(err.message);\n  }\n};\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB1fGu9E8w2NUsf05uMKH1Coq6sEx6kVm0\",\n  authDomain: \"metamsk-a5083.firebaseapp.com\",\n  databaseURL: \"https://metamsk-a5083-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"metamsk-a5083\",\n  storageBucket: \"metamsk-a5083.appspot.com\",\n  messagingSenderId: \"807002056444\",\n  appId: \"1:807002056444:web:6fe0e3850f16a7988bd979\",\n  measurementId: \"G-S29PJYNV79\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [address, setAddress] = useState(\"\");\n\n  const onPressConnect = async () => {\n    setLoading(true);\n\n    try {\n      const yourWebUrl = \"mysite.com\"; // Replace with your domain\n      const deepLink = `https://metamask.app.link/dapp/${yourWebUrl}`;\n      const downloadMetamaskUrl = \"https://metamask.io/download.html\";\n\n      if (window?.ethereum?.isMetaMask) {\n        // Desktop browser\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n\n        const account = Web3.utils.toChecksumAddress(accounts[0]);\n        await handleLogin(account);\n      } else if (mobileCheck()) {\n        // Mobile browser\n        const linker = getLinker(downloadMetamaskUrl);\n        linker.openURL(deepLink);\n      } else {\n        window.open(downloadMetamaskUrl);\n      }\n    } catch (error) {\n      console.log(error);\n      setAddress(\"\");\n    }\n\n    setLoading(false);\n  };\n\n  const handleLogin = async (address) => {\n    const baseUrl = \"http://localhost:4000\";\n    const response = await axios.get(`${baseUrl}/message?address=${address}`);\n    const messageToSign = response?.data?.messageToSign;\n\n    if (!messageToSign) {\n      throw new Error(\"Invalid message to sign\");\n    }\n\n    const web3 = new Web3(Web3.givenProvider);\n    const signature = await web3.eth.personal.sign(messageToSign, address);\n\n    const jwtResponse = await axios.get(\n      `${baseUrl}/jwt?address=${address}&signature=${signature}`\n    );\n\n    const customToken = jwtResponse?.data?.customToken;\n\n    if (!customToken) {\n      throw new Error(\"Invalid JWT\");\n    }\n\n    await signInWithCustomToken(auth, customToken);\n    setAddress(address);\n  };\n\n  const onPressLogout = () => {\n    setAddress(\"\");\n    signOut(auth);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ConnectWalletButton\n          onPressConnect={onPressConnect}\n          onPressLogout={onPressLogout}\n          loading={loading}\n          address={address}\n        />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}