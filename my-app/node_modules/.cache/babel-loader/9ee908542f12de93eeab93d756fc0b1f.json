{"ast":null,"code":"import { assert } from \"./errors.js\";\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nexport function createGetUrl(options) {\n  async function getUrl(req, _signal) {\n    const protocol = req.url.split(\":\")[0].toLowerCase();\n    assert(protocol === \"http\" || protocol === \"https\", \"unsupported protocol \".concat(protocol), \"UNSUPPORTED_OPERATION\", {\n      info: {\n        protocol\n      },\n      operation: \"request\"\n    });\n    assert(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"request\"\n    });\n    let signal = undefined;\n    if (_signal) {\n      const controller = new AbortController();\n      signal = controller.signal;\n      _signal.addListener(() => {\n        controller.abort();\n      });\n    }\n    const init = {\n      method: req.method,\n      headers: new Headers(Array.from(req)),\n      body: req.body || undefined,\n      signal\n    };\n    const resp = await fetch(req.url, init);\n    const headers = {};\n    resp.headers.forEach((value, key) => {\n      headers[key.toLowerCase()] = value;\n    });\n    const respBody = await resp.arrayBuffer();\n    const body = respBody == null ? null : new Uint8Array(respBody);\n    return {\n      statusCode: resp.status,\n      statusMessage: resp.statusText,\n      headers,\n      body\n    };\n  }\n  return getUrl;\n}\n// @TODO: remove in v7; provided for backwards compat\nconst defaultGetUrl = createGetUrl({});\nexport async function getUrl(req, _signal) {\n  return defaultGetUrl(req, _signal);\n}","map":{"version":3,"sources":["../../src.ts/utils/geturl-browser.ts"],"names":[],"mappings":"AAAA,SAAS,MAAM,QAAQ,aAAa;AA6BpC;AAEA,OAAM,SAAU,YAAY,CAAC,OAA6B,EAAA;EAEtD,eAAe,MAAM,CAAC,GAAiB,EAAE,OAA2B,EAAA;IAChE,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAA,CAAE;IAEpD,MAAM,CAAC,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,OAAO,0BAAA,MAAA,CAA2B,QAAS,GAAI,uBAAuB,EAAE;MAC/G,IAAI,EAAE;QAAE;MAAQ,CAAE;MAClB,SAAS,EAAE;KACd,CAAC;IAEF,MAAM,CAAC,QAAQ,KAAK,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,2BAA2B,EAAE,6CAA6C,EAAE,uBAAuB,EAAE;MACxJ,SAAS,EAAE;KACd,CAAC;IAEF,IAAI,MAAM,GAA4B,SAAS;IAC/C,IAAI,OAAO,EAAE;MACT,MAAM,UAAU,GAAG,IAAI,eAAe,CAAA,CAAE;MACxC,MAAM,GAAG,UAAU,CAAC,MAAM;MAC1B,OAAO,CAAC,WAAW,CAAC,MAAK;QAAG,UAAU,CAAC,KAAK,CAAA,CAAE;MAAE,CAAC,CAAC;IACrD;IAED,MAAM,IAAI,GAAG;MACT,MAAM,EAAE,GAAG,CAAC,MAAM;MAClB,OAAO,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MACrC,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,SAAS;MAC3B;KACH;IAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC;IAEvC,MAAM,OAAO,GAA2B,CAAA,CAAG;IAC3C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAI;MAChC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAA,CAAE,CAAC,GAAG,KAAK;IACtC,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAA,CAAE;IACzC,MAAM,IAAI,GAAI,QAAQ,IAAI,IAAI,GAAI,IAAI,GAAE,IAAI,UAAU,CAAC,QAAQ,CAAC;IAEhE,OAAO;MACH,UAAU,EAAE,IAAI,CAAC,MAAM;MACvB,aAAa,EAAE,IAAI,CAAC,UAAU;MAC9B,OAAO;MAAE;KACZ;EACL;EAEA,OAAO,MAAM;AACjB;AAEA;AACA,MAAM,aAAa,GAAoB,YAAY,CAAC,CAAA,CAAG,CAAC;AAExD,OAAO,eAAe,MAAM,CAAC,GAAiB,EAAE,OAA2B,EAAA;EACvE,OAAO,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC;AACtC","sourceRoot":"","sourcesContent":["import { assert } from \"./errors.js\";\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nexport function createGetUrl(options) {\n    async function getUrl(req, _signal) {\n        const protocol = req.url.split(\":\")[0].toLowerCase();\n        assert(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\n            info: { protocol },\n            operation: \"request\"\n        });\n        assert(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"request\"\n        });\n        let signal = undefined;\n        if (_signal) {\n            const controller = new AbortController();\n            signal = controller.signal;\n            _signal.addListener(() => { controller.abort(); });\n        }\n        const init = {\n            method: req.method,\n            headers: new Headers(Array.from(req)),\n            body: req.body || undefined,\n            signal\n        };\n        const resp = await fetch(req.url, init);\n        const headers = {};\n        resp.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n        const respBody = await resp.arrayBuffer();\n        const body = (respBody == null) ? null : new Uint8Array(respBody);\n        return {\n            statusCode: resp.status,\n            statusMessage: resp.statusText,\n            headers, body\n        };\n    }\n    return getUrl;\n}\n// @TODO: remove in v7; provided for backwards compat\nconst defaultGetUrl = createGetUrl({});\nexport async function getUrl(req, _signal) {\n    return defaultGetUrl(req, _signal);\n}\n//# sourceMappingURL=geturl-browser.js.map"]},"metadata":{},"sourceType":"module"}