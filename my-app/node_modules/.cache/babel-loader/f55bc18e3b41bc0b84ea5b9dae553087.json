{"ast":null,"code":"import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nconst _sha256 = function (data) {\n  return createHash(\"sha256\").update(data).digest();\n};\nconst _sha512 = function (data) {\n  return createHash(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false,\n  locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function () {\n  locked256 = true;\n};\nsha256.register = function (func) {\n  if (locked256) {\n    throw new Error(\"sha256 is locked\");\n  }\n  __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function () {\n  locked512 = true;\n};\nsha512.register = function (func) {\n  if (locked512) {\n    throw new Error(\"sha512 is locked\");\n  }\n  __sha512 = func;\n};\nObject.freeze(sha256);","map":{"version":3,"sources":["../../src.ts/crypto/sha2.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,aAAa;AAExC,SAAS,QAAQ,EAAE,OAAO,QAAQ,mBAAmB;AAKrD,MAAM,OAAO,GAAG,SAAA,CAAS,IAAgB,EAAA;EACrC,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA,CAAE;AACrD,CAAC;AAED,MAAM,OAAO,GAAG,SAAA,CAAS,IAAgB,EAAA;EACrC,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA,CAAE;AACrD,CAAC;AAED,IAAI,QAAQ,GAAoC,OAAO;AACvD,IAAI,QAAQ,GAAoC,OAAO;AAEvD,IAAI,SAAS,GAAG,KAAK;EAAE,SAAS,GAAG,KAAK;AAGxC;;;;;;;;;;;;;;;;AAgBG;AACH,OAAM,SAAU,MAAM,CAAC,KAAgB,EAAA;EACnC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClC;AACA,MAAM,CAAC,CAAC,GAAG,OAAO;AAClB,MAAM,CAAC,IAAI,GAAG,YAAA;EAAmB,SAAS,GAAG,IAAI;AAAE,CAAC;AACpD,MAAM,CAAC,QAAQ,GAAG,UAAS,IAAqC,EAAA;EAC5D,IAAI,SAAS,EAAE;IAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC;EAAG;EACvD,QAAQ,GAAG,IAAI;AACnB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;AAGrB;;;;;;;;;;;;;;;AAeG;AACH,OAAM,SAAU,MAAM,CAAC,KAAgB,EAAA;EACnC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClC;AACA,MAAM,CAAC,CAAC,GAAG,OAAO;AAClB,MAAM,CAAC,IAAI,GAAG,YAAA;EAAmB,SAAS,GAAG,IAAI;AAAE,CAAC;AACpD,MAAM,CAAC,QAAQ,GAAG,UAAS,IAAqC,EAAA;EAC5D,IAAI,SAAS,EAAE;IAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC;EAAG;EACvD,QAAQ,GAAG,IAAI;AACnB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC","sourceRoot":"","sourcesContent":["import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nconst _sha256 = function (data) {\n    return createHash(\"sha256\").update(data).digest();\n};\nconst _sha512 = function (data) {\n    return createHash(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false, locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function () { locked256 = true; };\nsha256.register = function (func) {\n    if (locked256) {\n        throw new Error(\"sha256 is locked\");\n    }\n    __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function () { locked512 = true; };\nsha512.register = function (func) {\n    if (locked512) {\n        throw new Error(\"sha512 is locked\");\n    }\n    __sha512 = func;\n};\nObject.freeze(sha256);\n//# sourceMappingURL=sha2.js.map"]},"metadata":{},"sourceType":"module"}