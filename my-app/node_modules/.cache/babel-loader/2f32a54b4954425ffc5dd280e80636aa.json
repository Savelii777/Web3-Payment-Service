{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value) {\n  return keccak256(toUtf8Bytes(value));\n}","map":{"version":3,"sources":["../../src.ts/hash/id.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,oBAAoB;AAC9C,SAAS,WAAW,QAAQ,mBAAmB;AAE/C;;;;;;;;;;AAUG;AACH,OAAM,SAAU,EAAE,CAAC,KAAa,EAAA;EAC5B,OAAO,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxC","sourceRoot":"","sourcesContent":["import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value) {\n    return keccak256(toUtf8Bytes(value));\n}\n//# sourceMappingURL=id.js.map"]},"metadata":{},"sourceType":"module"}