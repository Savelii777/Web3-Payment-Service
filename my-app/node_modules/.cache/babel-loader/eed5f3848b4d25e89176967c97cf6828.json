{"ast":null,"code":"import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n  let initial = 97;\n  return words.reduce((accum, word) => {\n    if (word === sep) {\n      initial++;\n    } else if (word.match(Word)) {\n      accum.push(String.fromCharCode(initial) + word);\n    } else {\n      initial = 97;\n      accum.push(word);\n    }\n    return accum;\n  }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n  // Replace all the substitutions with their expanded form\n  for (let i = subsChrs.length - 1; i >= 0; i--) {\n    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n  }\n  // Get all tle clumps; each suffix, first-increment and second-increment\n  const clumps = [];\n  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n    if (semi) {\n      for (let i = parseInt(semi); i >= 0; i--) {\n        clumps.push(\";\");\n      }\n    } else {\n      clumps.push(item.toLowerCase());\n    }\n    return \"\";\n  });\n  /* c8 ignore start */\n  if (leftover) {\n    throw new Error(\"leftovers: \".concat(JSON.stringify(leftover)));\n  }\n  /* c8 ignore stop */\n  return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n  assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n  return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}","map":{"version":3,"sources":["../../src.ts/wordlists/decode-owl.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,mBAAmB;AAGlD,MAAM,QAAQ,GAAG,+BAA+B;AAChD,MAAM,IAAI,GAAG,WAAW;AAExB,SAAS,MAAM,CAAC,KAAoB,EAAE,GAAW,EAAA;EAC7C,IAAI,OAAO,GAAG,EAAE;EAChB,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,KAAI;IAChC,IAAI,IAAI,KAAK,GAAG,EAAE;MACd,OAAO,EAAE;KACZ,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;MACzB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;KAClD,MAAM;MACH,OAAO,GAAG,EAAE;MACZ,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB;IACD,OAAO,KAAK;EAChB,CAAC,EAAiB,EAAE,CAAC;AACzB;AAEA;;AAEG;AACH,OAAM,SAAU,MAAM,CAAC,IAAY,EAAE,IAAY,EAAA;EAE7C;EACA,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;IAC3C,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACxE;EAED;EACA,MAAM,MAAM,GAAkB,EAAG;EACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,4BAA4B,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,KAAI;IAClF,IAAI,IAAI,EAAE;MACN,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;MAAG;KAClE,MAAM;MACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAA,CAAE,CAAC;IAClC;IACD,OAAO,EAAE;EACb,CAAC,CAAC;EACF;EACA,IAAI,QAAQ,EAAE;IAAE,MAAM,IAAI,KAAK,eAAA,MAAA,CAAgB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAE,CAAE,CAAC;EAAG;EAC9E;EAEA,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;AAC3C;AAEA;;AAEG;AACH,OAAM,SAAU,SAAS,CAAC,IAAY,EAAA;EAClC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,uBAAuB,EAAE,MAAM,EAAE,IAAI,CAAC;EAEtE,OAAO,MAAM,CACT,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,EACvC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;AACnD","sourceRoot":"","sourcesContent":["import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n    let initial = 97;\n    return words.reduce((accum, word) => {\n        if (word === sep) {\n            initial++;\n        }\n        else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        }\n        else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n    // Replace all the substitutions with their expanded form\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps = [];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n        if (semi) {\n            for (let i = parseInt(semi); i >= 0; i--) {\n                clumps.push(\";\");\n            }\n        }\n        else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */\n    if (leftover) {\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\n    }\n    /* c8 ignore stop */\n    return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n    assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}\n//# sourceMappingURL=decode-owl.js.map"]},"metadata":{},"sourceType":"module"}