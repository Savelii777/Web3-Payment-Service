{"ast":null,"code":"import _defineProperty from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider {\n  /**\n   *  The Application ID for the Pocket connection.\n   */\n\n  /**\n   *  The Application Secret for making authenticated requests\n   *  to the Pocket connection.\n   */\n\n  /**\n   *  Create a new **PocketProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  constructor(_network, applicationId, applicationSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n    const options = {\n      staticNetwork: network\n    };\n    const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    super(request, network, options);\n    _defineProperty(this, \"applicationId\", void 0);\n    _defineProperty(this, \"applicationSecret\", void 0);\n    defineProperties(this, {\n      applicationId,\n      applicationSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%% with\n   *  %%applicationId%%.\n   */\n  static getRequest(network, applicationId, applicationSecret) {\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    const request = new FetchRequest(\"https://\".concat(getHost(network.name), \"/v1/lb/\").concat(applicationId));\n    request.allowGzip = true;\n    if (applicationSecret) {\n      request.setCredentials(\"\", applicationSecret);\n    }\n    if (applicationId === defaultApplicationId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"PocketProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}","map":{"version":3,"sources":["../../src.ts/providers/provider-pocket.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;AAYG;AACH,SACI,gBAAgB,EAAE,YAAY,EAAE,cAAc,QAC3C,mBAAmB;AAG1B,SAAS,mBAAmB,QAAQ,gBAAgB;AACpD,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,eAAe,QAAQ,uBAAuB;AAKvD,MAAM,oBAAoB,GAAG,0BAA0B;AAEvD,SAAS,OAAO,CAAC,IAAY,EAAA;EACzB,QAAQ,IAAI;IACR,KAAK,SAAS;MACV,OAAQ,kCAAkC;IAC9C,KAAK,QAAQ;MACT,OAAO,iCAAiC;IAE5C,KAAK,OAAO;MACR,OAAO,mCAAmC;IAC9C,KAAK,cAAc;MACf,OAAO,yCAAyC;EACvD;EAED,cAAc,CAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAE,IAAI,CAAC;AACjE;AAGA;;;;;;;;AAQG;AACH,OAAM,MAAO,cAAe,SAAQ,eAAe,CAAA;EAE/C;;AAEG;;EAGH;;;AAGG;;EAGH;;;;;AAKG;EACH,WAAA,CAAY,QAAqB,EAAE,aAA6B,EAAE,iBAAiC,EAAA;IAC/F,IAAI,QAAQ,IAAI,IAAI,EAAE;MAAE,QAAQ,GAAG,SAAS;IAAG;IAC/C,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtC,IAAI,aAAa,IAAI,IAAI,EAAE;MAAE,aAAa,GAAG,oBAAoB;IAAG;IACpE,IAAI,iBAAiB,IAAI,IAAI,EAAE;MAAE,iBAAiB,GAAG,IAAI;IAAG;IAE5D,MAAM,OAAO,GAAG;MAAE,aAAa,EAAE;IAAO,CAAE;IAE1C,MAAM,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE,iBAAiB,CAAC;IACpF,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IAAC,eAAA;IAAA,eAAA;IAEjC,gBAAgB,CAAiB,IAAI,EAAE;MAAE,aAAa;MAAE;IAAiB,CAAE,CAAC;EAChF;EAEA,YAAY,CAAC,OAAe,EAAA;IACxB,IAAI;MACA,OAAO,IAAI,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC;KACjF,CAAC,OAAO,KAAK,EAAE,CAAA;IAChB,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;EACtC;EAEA;;;AAGG;EACH,OAAO,UAAU,CAAC,OAAgB,EAAE,aAA6B,EAAE,iBAAiC,EAAA;IAChG,IAAI,aAAa,IAAI,IAAI,EAAE;MAAE,aAAa,GAAG,oBAAoB;IAAG;IAEpE,MAAM,OAAO,GAAG,IAAI,YAAY,YAAA,MAAA,CAAc,OAAO,CAAC,OAAO,CAAC,IAAI,CAAE,aAAA,MAAA,CAAW,aAAc,CAAE,CAAC;IAChG,OAAO,CAAC,SAAS,GAAG,IAAI;IAExB,IAAI,iBAAiB,EAAE;MACnB,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,iBAAiB,CAAC;IAChD;IAED,IAAI,aAAa,KAAK,oBAAoB,EAAE;MACxC,OAAO,CAAC,SAAS,GAAG,OAAO,OAAO,EAAE,QAAQ,EAAE,OAAO,KAAI;QACrD,mBAAmB,CAAC,gBAAgB,CAAC;QACrC,OAAO,IAAI;MACf,CAAC;IACJ;IAED,OAAO,OAAO;EAClB;EAEA,mBAAmB,CAAA,EAAA;IACf,OAAQ,IAAI,CAAC,aAAa,KAAK,oBAAoB;EACvD;AACH","sourceRoot":"","sourcesContent":["/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider {\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    applicationId;\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    applicationSecret;\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network, applicationId, applicationSecret) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        if (applicationSecret == null) {\n            applicationSecret = null;\n        }\n        const options = { staticNetwork: network };\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n        defineProperties(this, { applicationId, applicationSecret });\n    }\n    _getProvider(chainId) {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network, applicationId, applicationSecret) {\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\n        request.allowGzip = true;\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n//# sourceMappingURL=provider-pocket.js.map"]},"metadata":{},"sourceType":"module"}