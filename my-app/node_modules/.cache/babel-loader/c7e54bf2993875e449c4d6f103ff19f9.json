{"ast":null,"code":"/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"rpc.ankr.com/eth\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider {\n  /**\n   *  The API key for the Ankr connection.\n   */\n  apiKey;\n  /**\n   *  Create a new **AnkrProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    // Ankr does not support filterId, so we force polling\n    const options = {\n      polling: true,\n      staticNetwork: network\n    };\n    const request = AnkrProvider.getRequest(network, apiKey);\n    super(request, network, options);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AnkrProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%% with\n   *  %%apiKey%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"AnkrProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  getRpcError(payload, error) {\n    if (payload.method === \"eth_sendRawTransaction\") {\n      if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n        error.error.message = \"replacement transaction underpriced\";\n      }\n    }\n    return super.getRpcError(payload, error);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"sources":["../../src.ts/providers/provider-ankr.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAYG;AACH,SACI,gBAAgB,EAAE,YAAY,EAAE,cAAc,QAC3C,mBAAmB;AAG1B,SAAS,mBAAmB,QAAQ,gBAAgB;AACpD,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,eAAe,QAAQ,uBAAuB;AAOvD,MAAM,aAAa,GAAG,kEAAkE;AAExF,SAAS,OAAO,CAAC,IAAY,EAAA;EACzB,QAAQ,IAAI;IACR,KAAK,SAAS;MACV,OAAO,kBAAkB;IAC7B,KAAK,QAAQ;MACT,OAAO,yBAAyB;IACpC,KAAK,OAAO;MACR,OAAO,sBAAsB;IACjC,KAAK,UAAU;MACX,OAAO,uBAAuB;EACrC;EAED,cAAc,CAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAE,IAAI,CAAC;AACjE;AAGA;;;;;;;;AAQG;AACH,OAAM,MAAO,YAAa,SAAQ,eAAe,CAAA;EAE7C;;AAEG;EACM,MAAM;EAEf;;;;;AAKG;EACH,WAAA,CAAY,QAAqB,EAAE,MAAsB,EAAA;IACrD,IAAI,QAAQ,IAAI,IAAI,EAAE;MAAE,QAAQ,GAAG,SAAS;IAAG;IAC/C,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtC,IAAI,MAAM,IAAI,IAAI,EAAE;MAAE,MAAM,GAAG,aAAa;IAAG;IAE/C;IACA,MAAM,OAAO,GAAG;MAAE,OAAO,EAAE,IAAI;MAAE,aAAa,EAAE;IAAO,CAAE;IAEzD,MAAM,OAAO,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC;IACxD,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IAEhC,gBAAgB,CAAe,IAAI,EAAE;MAAE;IAAM,CAAE,CAAC;EACpD;EAEA,YAAY,CAAC,OAAe,EAAA;IACxB,IAAI;MACA,OAAO,IAAI,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC;KAChD,CAAC,OAAO,KAAK,EAAE,CAAA;IAChB,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;EACtC;EAEA;;;AAGG;EACH,OAAO,UAAU,CAAC,OAAgB,EAAE,MAAsB,EAAA;IACtD,IAAI,MAAM,IAAI,IAAI,EAAE;MAAE,MAAM,GAAG,aAAa;IAAG;IAE/C,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,YAAa,OAAO,CAAC,OAAO,CAAC,IAAI,CAAE,IAAK,MAAO,EAAE,CAAC;IACnF,OAAO,CAAC,SAAS,GAAG,IAAI;IAExB,IAAI,MAAM,KAAK,aAAa,EAAE;MAC1B,OAAO,CAAC,SAAS,GAAG,OAAO,OAAO,EAAE,QAAQ,EAAE,OAAO,KAAI;QACrD,mBAAmB,CAAC,cAAc,CAAC;QACnC,OAAO,IAAI;MACf,CAAC;IACJ;IAED,OAAO,OAAO;EAClB;EAEA,WAAW,CAAC,OAAuB,EAAE,KAAmB,EAAA;IACpD,IAAI,OAAO,CAAC,MAAM,KAAK,wBAAwB,EAAE;MAC7C,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,KAAK,+CAA+C,EAAE;QACjG,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,qCAAqC;MAC9D;IACJ;IAED,OAAO,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC;EAC5C;EAEA,mBAAmB,CAAA,EAAA;IACf,OAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;EACzC;AACH","sourceRoot":"","sourcesContent":["/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider {\n    /**\n     *  The API key for the Ankr connection.\n     */\n    apiKey;\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        // Ankr does not support filterId, so we force polling\n        const options = { polling: true, staticNetwork: network };\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n        defineProperties(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"AnkrProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    getRpcError(payload, error) {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n        return super.getRpcError(payload, error);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=provider-ankr.js.map"]},"metadata":{},"sourceType":"module"}