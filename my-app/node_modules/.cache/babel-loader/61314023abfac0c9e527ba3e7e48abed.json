{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateMethodGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nimport { getBytes } from \"./data.js\";\nimport { assert, assertArgument, assertPrivate } from \"./errors.js\";\nimport { getBigInt, getNumber, fromTwos, mask, toBigInt } from \"./maths.js\";\nimport { defineProperties } from \"./properties.js\";\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) {\n  Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n  let result = Zeros;\n  while (result.length < decimals) {\n    result += result;\n  }\n  return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n  const width = BigInt(format.width);\n  if (format.signed) {\n    const limit = BN_1 << width - BN_1;\n    assert(safeOp == null || val >= -limit && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    if (val > BN_0) {\n      val = fromTwos(mask(val, width), width);\n    } else {\n      val = -fromTwos(mask(-val, width), width);\n    }\n  } else {\n    const limit = BN_1 << width;\n    assert(safeOp == null || val >= 0 && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    val = (val % limit + limit) % limit & limit - BN_1;\n  }\n  return val;\n}\nfunction getFormat(value) {\n  if (typeof value === \"number\") {\n    value = \"fixed128x\".concat(value);\n  }\n  let signed = true;\n  let width = 128;\n  let decimals = 18;\n  if (typeof value === \"string\") {\n    // Parse the format string\n    if (value === \"fixed\") {\n      // defaults...\n    } else if (value === \"ufixed\") {\n      signed = false;\n    } else {\n      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n      assertArgument(match, \"invalid fixed format\", \"format\", value);\n      signed = match[1] !== \"u\";\n      width = parseInt(match[2]);\n      decimals = parseInt(match[3]);\n    }\n  } else if (value) {\n    // Extract the values from the object\n    const v = value;\n    const check = (key, type, defaultValue) => {\n      if (v[key] == null) {\n        return defaultValue;\n      }\n      assertArgument(typeof v[key] === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n      return v[key];\n    };\n    signed = check(\"signed\", \"boolean\", signed);\n    width = check(\"width\", \"number\", width);\n    decimals = check(\"decimals\", \"number\", decimals);\n  }\n  assertArgument(width % 8 === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n  assertArgument(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n  const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n  return {\n    signed,\n    width,\n    decimals,\n    name\n  };\n}\nfunction toString(val, decimals) {\n  let negative = \"\";\n  if (val < BN_0) {\n    negative = \"-\";\n    val *= BN_N1;\n  }\n  let str = val.toString();\n  // No decimal point for whole values\n  if (decimals === 0) {\n    return negative + str;\n  }\n  // Pad out to the whole component (including a whole digit)\n  while (str.length <= decimals) {\n    str = Zeros + str;\n  }\n  // Insert the decimal point\n  const index = str.length - decimals;\n  str = str.substring(0, index) + \".\" + str.substring(index);\n  // Trim the whole component (leaving at least one 0)\n  while (str[0] === \"0\" && str[1] !== \".\") {\n    str = str.substring(1);\n  }\n  // Trim the decimal component (leaving at least one 0)\n  while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n    str = str.substring(0, str.length - 1);\n  }\n  return negative + str;\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nvar _format2 = /*#__PURE__*/new WeakMap();\nvar _val = /*#__PURE__*/new WeakMap();\nvar _tens = /*#__PURE__*/new WeakMap();\nvar _checkFormat = /*#__PURE__*/new WeakSet();\nvar _checkValue = /*#__PURE__*/new WeakSet();\nvar _add = /*#__PURE__*/new WeakSet();\nvar _sub = /*#__PURE__*/new WeakSet();\nvar _mul = /*#__PURE__*/new WeakSet();\nvar _div = /*#__PURE__*/new WeakSet();\nexport class FixedNumber {\n  /**\n   *  The specific fixed-point arithmetic field for this value.\n   */\n\n  // The actual value (accounting for decimals)\n\n  // A base-10 value to multiple values by to maintain the magnitude\n\n  /**\n   *  This is a property so console.log shows a human-meaningful value.\n   *\n   *  @private\n   */\n\n  // Use this when changing this file to get some typing info,\n  // but then switch to any to mask the internal type\n  //constructor(guard: any, value: bigint, format: _FixedFormat) {\n  /**\n   *  @private\n   */\n  constructor(guard, value, format) {\n    _classPrivateMethodInitSpec(this, _div);\n    _classPrivateMethodInitSpec(this, _mul);\n    _classPrivateMethodInitSpec(this, _sub);\n    _classPrivateMethodInitSpec(this, _add);\n    _classPrivateMethodInitSpec(this, _checkValue);\n    _classPrivateMethodInitSpec(this, _checkFormat);\n    _defineProperty(this, \"format\", void 0);\n    _classPrivateFieldInitSpec(this, _format2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _val, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _tens, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"_value\", void 0);\n    assertPrivate(guard, _guard, \"FixedNumber\");\n    _classPrivateFieldSet(this, _val, value);\n    _classPrivateFieldSet(this, _format2, format);\n    const _value = toString(value, format.decimals);\n    defineProperties(this, {\n      format: format.name,\n      _value\n    });\n    _classPrivateFieldSet(this, _tens, getTens(format.decimals));\n  }\n  /**\n   *  If true, negative values are permitted, otherwise only\n   *  positive values and zero are allowed.\n   */\n  get signed() {\n    return _classPrivateFieldGet(this, _format2).signed;\n  }\n  /**\n   *  The number of bits available to store the value.\n   */\n  get width() {\n    return _classPrivateFieldGet(this, _format2).width;\n  }\n  /**\n   *  The number of decimal places in the fixed-point arithment field.\n   */\n  get decimals() {\n    return _classPrivateFieldGet(this, _format2).decimals;\n  }\n  /**\n   *  The value as an integer, based on the smallest unit the\n   *  [[decimals]] allow.\n   */\n  get value() {\n    return _classPrivateFieldGet(this, _val);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\n   *  to %%other%%, ignoring overflow.\n   */\n  addUnsafe(other) {\n    return _classPrivateMethodGet(this, _add, _add2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\n   *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  add(other) {\n    return _classPrivateMethodGet(this, _add, _add2).call(this, other, \"add\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n   *  from %%this%%, ignoring overflow.\n   */\n  subUnsafe(other) {\n    return _classPrivateMethodGet(this, _sub, _sub2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n   *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  sub(other) {\n    return _classPrivateMethodGet(this, _sub, _sub2).call(this, other, \"sub\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%, ignoring overflow and underflow (precision loss).\n   */\n  mulUnsafe(other) {\n    return _classPrivateMethodGet(this, _mul, _mul2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  mul(other) {\n    return _classPrivateMethodGet(this, _mul, _mul2).call(this, other, \"mul\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs or if underflow (precision loss) occurs.\n   */\n  mulSignal(other) {\n    _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, other);\n    const value = _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(other, _val);\n    assert(value % _classPrivateFieldGet(this, _tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n      operation: \"mulSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, value / _classPrivateFieldGet(this, _tens), \"mulSignal\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%, ignoring underflow (precision loss). A\n   *  [[NumericFaultError]] is thrown if overflow occurs.\n   */\n  divUnsafe(other) {\n    return _classPrivateMethodGet(this, _div, _div2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%, ignoring underflow (precision loss). A\n   *  [[NumericFaultError]] is thrown if overflow occurs.\n   */\n  div(other) {\n    return _classPrivateMethodGet(this, _div, _div2).call(this, other, \"div\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n   *  (precision loss) occurs.\n   */\n  divSignal(other) {\n    assert(_classPrivateFieldGet(other, _val) !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n      operation: \"div\",\n      fault: \"divide-by-zero\",\n      value: this\n    });\n    _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, other);\n    const value = _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(this, _tens);\n    assert(value % _classPrivateFieldGet(other, _val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n      operation: \"divSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, value / _classPrivateFieldGet(other, _val), \"divSignal\");\n  }\n  /**\n   *  Returns a comparison result between %%this%% and %%other%%.\n   *\n   *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n   *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n   *  both are equal.\n   */\n  cmp(other) {\n    let a = this.value,\n      b = other.value;\n    // Coerce a and b to the same magnitude\n    const delta = this.decimals - other.decimals;\n    if (delta > 0) {\n      b *= getTens(delta);\n    } else if (delta < 0) {\n      a *= getTens(-delta);\n    }\n    // Comnpare\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  }\n  /**\n   *  Returns true if %%other%% is equal to %%this%%.\n   */\n  eq(other) {\n    return this.cmp(other) === 0;\n  }\n  /**\n   *  Returns true if %%other%% is less than to %%this%%.\n   */\n  lt(other) {\n    return this.cmp(other) < 0;\n  }\n  /**\n   *  Returns true if %%other%% is less than or equal to %%this%%.\n   */\n  lte(other) {\n    return this.cmp(other) <= 0;\n  }\n  /**\n   *  Returns true if %%other%% is greater than to %%this%%.\n   */\n  gt(other) {\n    return this.cmp(other) > 0;\n  }\n  /**\n   *  Returns true if %%other%% is greater than or equal to %%this%%.\n   */\n  gte(other) {\n    return this.cmp(other) >= 0;\n  }\n  /**\n   *  Returns a new [[FixedNumber]] which is the largest **integer**\n   *  that is less than or equal to %%this%%.\n   *\n   *  The decimal component of the result will always be ``0``.\n   */\n  floor() {\n    let val = _classPrivateFieldGet(this, _val);\n    if (_classPrivateFieldGet(this, _val) < BN_0) {\n      val -= _classPrivateFieldGet(this, _tens) - BN_1;\n    }\n    val = _classPrivateFieldGet(this, _val) / _classPrivateFieldGet(this, _tens) * _classPrivateFieldGet(this, _tens);\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, val, \"floor\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] which is the smallest **integer**\n   *  that is greater than or equal to %%this%%.\n   *\n   *  The decimal component of the result will always be ``0``.\n   */\n  ceiling() {\n    let val = _classPrivateFieldGet(this, _val);\n    if (_classPrivateFieldGet(this, _val) > BN_0) {\n      val += _classPrivateFieldGet(this, _tens) - BN_1;\n    }\n    val = _classPrivateFieldGet(this, _val) / _classPrivateFieldGet(this, _tens) * _classPrivateFieldGet(this, _tens);\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, val, \"ceiling\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the decimal component\n   *  rounded up on ties at %%decimals%% places.\n   */\n  round(decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n    // Not enough precision to not already be rounded\n    if (decimals >= this.decimals) {\n      return this;\n    }\n    const delta = this.decimals - decimals;\n    const bump = BN_5 * getTens(delta - 1);\n    let value = this.value + bump;\n    const tens = getTens(delta);\n    value = value / tens * tens;\n    checkValue(value, _classPrivateFieldGet(this, _format2), \"round\");\n    return new FixedNumber(_guard, value, _classPrivateFieldGet(this, _format2));\n  }\n  /**\n   *  Returns true if %%this%% is equal to ``0``.\n   */\n  isZero() {\n    return _classPrivateFieldGet(this, _val) === BN_0;\n  }\n  /**\n   *  Returns true if %%this%% is less than ``0``.\n   */\n  isNegative() {\n    return _classPrivateFieldGet(this, _val) < BN_0;\n  }\n  /**\n   *  Returns the string representation of %%this%%.\n   */\n  toString() {\n    return this._value;\n  }\n  /**\n   *  Returns a float approximation.\n   *\n   *  Due to IEEE 754 precission (or lack thereof), this function\n   *  can only return an approximation and most values will contain\n   *  rounding errors.\n   */\n  toUnsafeFloat() {\n    return parseFloat(this.toString());\n  }\n  /**\n   *  Return a new [[FixedNumber]] with the same value but has had\n   *  its field set to %%format%%.\n   *\n   *  This will throw if the value cannot fit into %%format%%.\n   */\n  toFormat(format) {\n    return FixedNumber.fromString(this.toString(), format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] for %%value%% divided by\n   *  %%decimal%% places with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n   *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n   *  or underflow (precision loss).\n   */\n  static fromValue(_value, _decimals, _format) {\n    const decimals = _decimals == null ? 0 : getNumber(_decimals);\n    const format = getFormat(_format);\n    let value = getBigInt(_value, \"value\");\n    const delta = decimals - format.decimals;\n    if (delta > 0) {\n      const tens = getTens(delta);\n      assert(value % tens === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n        operation: \"fromValue\",\n        fault: \"underflow\",\n        value: _value\n      });\n      value /= tens;\n    } else if (delta < 0) {\n      value *= getTens(-delta);\n    }\n    checkValue(value, format, \"fromValue\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n   *  in %%format%%, either due to overflow or underflow (precision loss).\n   */\n  static fromString(_value, _format) {\n    const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n    assertArgument(match && match[2].length + match[3].length > 0, \"invalid FixedNumber string value\", \"value\", _value);\n    const format = getFormat(_format);\n    let whole = match[2] || \"0\",\n      decimal = match[3] || \"\";\n    // Pad out the decimals\n    while (decimal.length < format.decimals) {\n      decimal += Zeros;\n    }\n    // Check precision is safe\n    assert(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n      operation: \"fromString\",\n      fault: \"underflow\",\n      value: _value\n    });\n    // Remove extra padding\n    decimal = decimal.substring(0, format.decimals);\n    const value = BigInt(match[1] + whole + decimal);\n    checkValue(value, format, \"fromString\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] with the big-endian representation\n   *  %%value%% with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n   *  in %%format%% due to overflow.\n   */\n  static fromBytes(_value, _format) {\n    let value = toBigInt(getBytes(_value, \"value\"));\n    const format = getFormat(_format);\n    if (format.signed) {\n      value = fromTwos(value, format.width);\n    }\n    checkValue(value, format, \"fromBytes\");\n    return new FixedNumber(_guard, value, format);\n  }\n}\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");\nfunction _checkFormat2(other) {\n  assertArgument(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n}\nfunction _checkValue2(val, safeOp) {\n  /*\n          const width = BigInt(this.width);\n          if (this.signed) {\n              const limit = (BN_1 << (width - BN_1));\n              assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                  operation: <string>safeOp, fault: \"overflow\", value: val\n              });\n  \n              if (val > BN_0) {\n                  val = fromTwos(mask(val, width), width);\n              } else {\n                  val = -fromTwos(mask(-val, width), width);\n              }\n  \n          } else {\n              const masked = mask(val, width);\n              assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                  operation: <string>safeOp, fault: \"overflow\", value: val\n              });\n              val = masked;\n          }\n  */\n  val = checkValue(val, _classPrivateFieldGet(this, _format2), safeOp);\n  return new FixedNumber(_guard, val, _classPrivateFieldGet(this, _format2));\n}\nfunction _add2(o, safeOp) {\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) + _classPrivateFieldGet(o, _val), safeOp);\n}\nfunction _sub2(o, safeOp) {\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) - _classPrivateFieldGet(o, _val), safeOp);\n}\nfunction _mul2(o, safeOp) {\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(o, _val) / _classPrivateFieldGet(this, _tens), safeOp);\n}\nfunction _div2(o, safeOp) {\n  assert(_classPrivateFieldGet(o, _val) !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n    operation: \"div\",\n    fault: \"divide-by-zero\",\n    value: this\n  });\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(this, _tens) / _classPrivateFieldGet(o, _val), safeOp);\n}","map":{"version":3,"sources":["../../src.ts/utils/fixednumber.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nimport { getBytes } from \"./data.js\";\nimport { assert, assertArgument, assertPrivate } from \"./errors.js\";\nimport { getBigInt, getNumber, fromTwos, mask, toBigInt } from \"./maths.js\";\nimport { defineProperties } from \"./properties.js\";\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) {\n    Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n    let result = Zeros;\n    while (result.length < decimals) {\n        result += result;\n    }\n    return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n    const width = BigInt(format.width);\n    if (format.signed) {\n        const limit = (BN_1 << (width - BN_1));\n        assert(safeOp == null || (val >= -limit && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp, fault: \"overflow\", value: val\n        });\n        if (val > BN_0) {\n            val = fromTwos(mask(val, width), width);\n        }\n        else {\n            val = -fromTwos(mask(-val, width), width);\n        }\n    }\n    else {\n        const limit = (BN_1 << width);\n        assert(safeOp == null || (val >= 0 && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp, fault: \"overflow\", value: val\n        });\n        val = (((val % limit) + limit) % limit) & (limit - BN_1);\n    }\n    return val;\n}\nfunction getFormat(value) {\n    if (typeof (value) === \"number\") {\n        value = `fixed128x${value}`;\n    }\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n    if (typeof (value) === \"string\") {\n        // Parse the format string\n        if (value === \"fixed\") {\n            // defaults...\n        }\n        else if (value === \"ufixed\") {\n            signed = false;\n        }\n        else {\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n            assertArgument(match, \"invalid fixed format\", \"format\", value);\n            signed = (match[1] !== \"u\");\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n        }\n    }\n    else if (value) {\n        // Extract the values from the object\n        const v = value;\n        const check = (key, type, defaultValue) => {\n            if (v[key] == null) {\n                return defaultValue;\n            }\n            assertArgument(typeof (v[key]) === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n            return v[key];\n        };\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n    }\n    assertArgument((width % 8) === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n    assertArgument(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n    const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    return { signed, width, decimals, name };\n}\nfunction toString(val, decimals) {\n    let negative = \"\";\n    if (val < BN_0) {\n        negative = \"-\";\n        val *= BN_N1;\n    }\n    let str = val.toString();\n    // No decimal point for whole values\n    if (decimals === 0) {\n        return (negative + str);\n    }\n    // Pad out to the whole component (including a whole digit)\n    while (str.length <= decimals) {\n        str = Zeros + str;\n    }\n    // Insert the decimal point\n    const index = str.length - decimals;\n    str = str.substring(0, index) + \".\" + str.substring(index);\n    // Trim the whole component (leaving at least one 0)\n    while (str[0] === \"0\" && str[1] !== \".\") {\n        str = str.substring(1);\n    }\n    // Trim the decimal component (leaving at least one 0)\n    while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n        str = str.substring(0, str.length - 1);\n    }\n    return (negative + str);\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nexport class FixedNumber {\n    /**\n     *  The specific fixed-point arithmetic field for this value.\n     */\n    format;\n    #format;\n    // The actual value (accounting for decimals)\n    #val;\n    // A base-10 value to multiple values by to maintain the magnitude\n    #tens;\n    /**\n     *  This is a property so console.log shows a human-meaningful value.\n     *\n     *  @private\n     */\n    _value;\n    // Use this when changing this file to get some typing info,\n    // but then switch to any to mask the internal type\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\n    /**\n     *  @private\n     */\n    constructor(guard, value, format) {\n        assertPrivate(guard, _guard, \"FixedNumber\");\n        this.#val = value;\n        this.#format = format;\n        const _value = toString(value, format.decimals);\n        defineProperties(this, { format: format.name, _value });\n        this.#tens = getTens(format.decimals);\n    }\n    /**\n     *  If true, negative values are permitted, otherwise only\n     *  positive values and zero are allowed.\n     */\n    get signed() { return this.#format.signed; }\n    /**\n     *  The number of bits available to store the value.\n     */\n    get width() { return this.#format.width; }\n    /**\n     *  The number of decimal places in the fixed-point arithment field.\n     */\n    get decimals() { return this.#format.decimals; }\n    /**\n     *  The value as an integer, based on the smallest unit the\n     *  [[decimals]] allow.\n     */\n    get value() { return this.#val; }\n    #checkFormat(other) {\n        assertArgument(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n    #checkValue(val, safeOp) {\n        /*\n                const width = BigInt(this.width);\n                if (this.signed) {\n                    const limit = (BN_1 << (width - BN_1));\n                    assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n        \n                    if (val > BN_0) {\n                        val = fromTwos(mask(val, width), width);\n                    } else {\n                        val = -fromTwos(mask(-val, width), width);\n                    }\n        \n                } else {\n                    const masked = mask(val, width);\n                    assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n                    val = masked;\n                }\n        */\n        val = checkValue(val, this.#format, safeOp);\n        return new FixedNumber(_guard, val, this.#format);\n    }\n    #add(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val + o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%, ignoring overflow.\n     */\n    addUnsafe(other) { return this.#add(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    add(other) { return this.#add(other, \"add\"); }\n    #sub(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val - o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%, ignoring overflow.\n     */\n    subUnsafe(other) { return this.#sub(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    sub(other) { return this.#sub(other, \"sub\"); }\n    #mul(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\n     */\n    mulUnsafe(other) { return this.#mul(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    mul(other) { return this.#mul(other, \"mul\"); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs or if underflow (precision loss) occurs.\n     */\n    mulSignal(other) {\n        this.#checkFormat(other);\n        const value = this.#val * other.#val;\n        assert((value % this.#tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n            operation: \"mulSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / this.#tens, \"mulSignal\");\n    }\n    #div(o, safeOp) {\n        assert(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    divUnsafe(other) { return this.#div(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    div(other) { return this.#div(other, \"div\"); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n     *  (precision loss) occurs.\n     */\n    divSignal(other) {\n        assert(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(other);\n        const value = (this.#val * this.#tens);\n        assert((value % other.#val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n            operation: \"divSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / other.#val, \"divSignal\");\n    }\n    /**\n     *  Returns a comparison result between %%this%% and %%other%%.\n     *\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n     *  both are equal.\n     */\n    cmp(other) {\n        let a = this.value, b = other.value;\n        // Coerce a and b to the same magnitude\n        const delta = this.decimals - other.decimals;\n        if (delta > 0) {\n            b *= getTens(delta);\n        }\n        else if (delta < 0) {\n            a *= getTens(-delta);\n        }\n        // Comnpare\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     *  Returns true if %%other%% is equal to %%this%%.\n     */\n    eq(other) { return this.cmp(other) === 0; }\n    /**\n     *  Returns true if %%other%% is less than to %%this%%.\n     */\n    lt(other) { return this.cmp(other) < 0; }\n    /**\n     *  Returns true if %%other%% is less than or equal to %%this%%.\n     */\n    lte(other) { return this.cmp(other) <= 0; }\n    /**\n     *  Returns true if %%other%% is greater than to %%this%%.\n     */\n    gt(other) { return this.cmp(other) > 0; }\n    /**\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\n     */\n    gte(other) { return this.cmp(other) >= 0; }\n    /**\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\n     *  that is less than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    floor() {\n        let val = this.#val;\n        if (this.#val < BN_0) {\n            val -= this.#tens - BN_1;\n        }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"floor\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\n     *  that is greater than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    ceiling() {\n        let val = this.#val;\n        if (this.#val > BN_0) {\n            val += this.#tens - BN_1;\n        }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"ceiling\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the decimal component\n     *  rounded up on ties at %%decimals%% places.\n     */\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // Not enough precision to not already be rounded\n        if (decimals >= this.decimals) {\n            return this;\n        }\n        const delta = this.decimals - decimals;\n        const bump = BN_5 * getTens(delta - 1);\n        let value = this.value + bump;\n        const tens = getTens(delta);\n        value = (value / tens) * tens;\n        checkValue(value, this.#format, \"round\");\n        return new FixedNumber(_guard, value, this.#format);\n    }\n    /**\n     *  Returns true if %%this%% is equal to ``0``.\n     */\n    isZero() { return (this.#val === BN_0); }\n    /**\n     *  Returns true if %%this%% is less than ``0``.\n     */\n    isNegative() { return (this.#val < BN_0); }\n    /**\n     *  Returns the string representation of %%this%%.\n     */\n    toString() { return this._value; }\n    /**\n     *  Returns a float approximation.\n     *\n     *  Due to IEEE 754 precission (or lack thereof), this function\n     *  can only return an approximation and most values will contain\n     *  rounding errors.\n     */\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    /**\n     *  Return a new [[FixedNumber]] with the same value but has had\n     *  its field set to %%format%%.\n     *\n     *  This will throw if the value cannot fit into %%format%%.\n     */\n    toFormat(format) {\n        return FixedNumber.fromString(this.toString(), format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\n     *  %%decimal%% places with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n     *  or underflow (precision loss).\n     */\n    static fromValue(_value, _decimals, _format) {\n        const decimals = (_decimals == null) ? 0 : getNumber(_decimals);\n        const format = getFormat(_format);\n        let value = getBigInt(_value, \"value\");\n        const delta = decimals - format.decimals;\n        if (delta > 0) {\n            const tens = getTens(delta);\n            assert((value % tens) === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n                operation: \"fromValue\", fault: \"underflow\", value: _value\n            });\n            value /= tens;\n        }\n        else if (delta < 0) {\n            value *= getTens(-delta);\n        }\n        checkValue(value, format, \"fromValue\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%%, either due to overflow or underflow (precision loss).\n     */\n    static fromString(_value, _format) {\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n        assertArgument(match && (match[2].length + match[3].length) > 0, \"invalid FixedNumber string value\", \"value\", _value);\n        const format = getFormat(_format);\n        let whole = (match[2] || \"0\"), decimal = (match[3] || \"\");\n        // Pad out the decimals\n        while (decimal.length < format.decimals) {\n            decimal += Zeros;\n        }\n        // Check precision is safe\n        assert(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n            operation: \"fromString\", fault: \"underflow\", value: _value\n        });\n        // Remove extra padding\n        decimal = decimal.substring(0, format.decimals);\n        const value = BigInt(match[1] + whole + decimal);\n        checkValue(value, format, \"fromString\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] with the big-endian representation\n     *  %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%% due to overflow.\n     */\n    static fromBytes(_value, _format) {\n        let value = toBigInt(getBytes(_value, \"value\"));\n        const format = getFormat(_format);\n        if (format.signed) {\n            value = fromTwos(value, format.width);\n        }\n        checkValue(value, format, \"fromBytes\");\n        return new FixedNumber(_guard, value, format);\n    }\n}\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map"]},"metadata":{},"sourceType":"module"}