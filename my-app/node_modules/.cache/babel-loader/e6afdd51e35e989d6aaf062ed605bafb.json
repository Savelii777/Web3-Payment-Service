{"ast":null,"code":"/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n  return createHmac(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm, _key, _data) {\n  const key = getBytes(_key, \"key\");\n  const data = getBytes(_data, \"data\");\n  return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () {\n  locked = true;\n};\ncomputeHmac.register = function (func) {\n  if (locked) {\n    throw new Error(\"computeHmac is locked\");\n  }\n  __computeHmac = func;\n};\nObject.freeze(computeHmac);","map":{"version":3,"sources":["../../src.ts/crypto/hmac.ts"],"names":[],"mappings":"AAAA;;;;;;;AAOG;AACH,SAAS,UAAU,QAAQ,aAAa;AACxC,SAAS,QAAQ,EAAE,OAAO,QAAQ,mBAAmB;AAKrD,IAAI,MAAM,GAAG,KAAK;AAElB,MAAM,YAAY,GAAG,SAAA,CAAS,SAA8B,EAAE,GAAe,EAAE,IAAgB,EAAA;EAC3F,OAAO,UAAU,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA,CAAE;AAC3D,CAAC;AAED,IAAI,aAAa,GAAG,YAAY;AAEhC;;;;;;;;;;;;;;;;AAgBG;AACH,OAAM,SAAU,WAAW,CAAC,SAA8B,EAAE,IAAe,EAAE,KAAgB,EAAA;EACzF,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC;EACjC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACvD;AACA,WAAW,CAAC,CAAC,GAAG,YAAY;AAC5B,WAAW,CAAC,IAAI,GAAI,YAAA;EAAa,MAAM,GAAG,IAAI;AAAE,CAAC;AACjD,WAAW,CAAC,QAAQ,GAAG,UAAS,IAAsF,EAAA;EAClH,IAAI,MAAM,EAAE;IAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC;EAAG;EACzD,aAAa,GAAG,IAAI;AACxB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC","sourceRoot":"","sourcesContent":["/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n    return createHmac(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm, _key, _data) {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () { locked = true; };\ncomputeHmac.register = function (func) {\n    if (locked) {\n        throw new Error(\"computeHmac is locked\");\n    }\n    __computeHmac = func;\n};\nObject.freeze(computeHmac);\n//# sourceMappingURL=hmac.js.map"]},"metadata":{},"sourceType":"module"}