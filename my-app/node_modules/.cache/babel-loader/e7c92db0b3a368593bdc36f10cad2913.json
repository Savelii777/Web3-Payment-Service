{"ast":null,"code":"/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, getNumber, hexlify, isHexString, zeroPadValue, assert, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nexport function allowNull(format, nullValue) {\n  return function (value) {\n    if (value == null) {\n      return nullValue;\n    }\n    return format(value);\n  };\n}\nexport function arrayOf(format) {\n  return array => {\n    if (!Array.isArray(array)) {\n      throw new Error(\"not an array\");\n    }\n    return array.map(i => format(i));\n  };\n}\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format, altNames) {\n  return value => {\n    const result = {};\n    for (const key in format) {\n      let srcKey = key;\n      if (altNames && key in altNames && !(srcKey in value)) {\n        for (const altKey of altNames[key]) {\n          if (altKey in value) {\n            srcKey = altKey;\n            break;\n          }\n        }\n      }\n      try {\n        const nv = format[key](value[srcKey]);\n        if (nv !== undefined) {\n          result[key] = nv;\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : \"not-an-error\";\n        assert(false, \"invalid value for value.\".concat(key, \" (\").concat(message, \")\"), \"BAD_DATA\", {\n          value\n        });\n      }\n    }\n    return result;\n  };\n}\nexport function formatBoolean(value) {\n  switch (value) {\n    case true:\n    case \"true\":\n      return true;\n    case false:\n    case \"false\":\n      return false;\n  }\n  assertArgument(false, \"invalid boolean; \".concat(JSON.stringify(value)), \"value\", value);\n}\nexport function formatData(value) {\n  assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n  return value;\n}\nexport function formatHash(value) {\n  assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n  return value;\n}\nexport function formatUint256(value) {\n  if (!isHexString(value)) {\n    throw new Error(\"invalid uint256\");\n  }\n  return zeroPadValue(value, 32);\n}\nconst _formatLog = object({\n  address: getAddress,\n  blockHash: formatHash,\n  blockNumber: getNumber,\n  data: formatData,\n  index: getNumber,\n  removed: allowNull(formatBoolean, false),\n  topics: arrayOf(formatHash),\n  transactionHash: formatHash,\n  transactionIndex: getNumber\n}, {\n  index: [\"logIndex\"]\n});\nexport function formatLog(value) {\n  return _formatLog(value);\n}\nconst _formatBlock = object({\n  hash: allowNull(formatHash),\n  parentHash: formatHash,\n  number: getNumber,\n  timestamp: getNumber,\n  nonce: allowNull(formatData),\n  difficulty: getBigInt,\n  gasLimit: getBigInt,\n  gasUsed: getBigInt,\n  miner: allowNull(getAddress),\n  extraData: formatData,\n  baseFeePerGas: allowNull(getBigInt)\n});\nexport function formatBlock(value) {\n  const result = _formatBlock(value);\n  result.transactions = value.transactions.map(tx => {\n    if (typeof tx === \"string\") {\n      return tx;\n    }\n    return formatTransactionResponse(tx);\n  });\n  return result;\n}\nconst _formatReceiptLog = object({\n  transactionIndex: getNumber,\n  blockNumber: getNumber,\n  transactionHash: formatHash,\n  address: getAddress,\n  topics: arrayOf(formatHash),\n  data: formatData,\n  index: getNumber,\n  blockHash: formatHash\n}, {\n  index: [\"logIndex\"]\n});\nexport function formatReceiptLog(value) {\n  return _formatReceiptLog(value);\n}\nconst _formatTransactionReceipt = object({\n  to: allowNull(getAddress, null),\n  from: allowNull(getAddress, null),\n  contractAddress: allowNull(getAddress, null),\n  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n  index: getNumber,\n  root: allowNull(hexlify),\n  gasUsed: getBigInt,\n  logsBloom: allowNull(formatData),\n  blockHash: formatHash,\n  hash: formatHash,\n  logs: arrayOf(formatReceiptLog),\n  blockNumber: getNumber,\n  //confirmations: allowNull(getNumber, null),\n  cumulativeGasUsed: getBigInt,\n  effectiveGasPrice: allowNull(getBigInt),\n  status: allowNull(getNumber),\n  type: allowNull(getNumber, 0)\n}, {\n  effectiveGasPrice: [\"gasPrice\"],\n  hash: [\"transactionHash\"],\n  index: [\"transactionIndex\"]\n});\nexport function formatTransactionReceipt(value) {\n  return _formatTransactionReceipt(value);\n}\nexport function formatTransactionResponse(value) {\n  // Some clients (TestRPC) do strange things like return 0x0 for the\n  // 0 address; correct this to be a real address\n  if (value.to && getBigInt(value.to) === BN_0) {\n    value.to = \"0x0000000000000000000000000000000000000000\";\n  }\n  const result = object({\n    hash: formatHash,\n    type: value => {\n      if (value === \"0x\" || value == null) {\n        return 0;\n      }\n      return getNumber(value);\n    },\n    accessList: allowNull(accessListify, null),\n    blockHash: allowNull(formatHash, null),\n    blockNumber: allowNull(getNumber, null),\n    transactionIndex: allowNull(getNumber, null),\n    //confirmations: allowNull(getNumber, null),\n    from: getAddress,\n    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n    gasPrice: allowNull(getBigInt),\n    maxPriorityFeePerGas: allowNull(getBigInt),\n    maxFeePerGas: allowNull(getBigInt),\n    gasLimit: getBigInt,\n    to: allowNull(getAddress, null),\n    value: getBigInt,\n    nonce: getNumber,\n    data: formatData,\n    creates: allowNull(getAddress, null),\n    chainId: allowNull(getBigInt, null)\n  }, {\n    data: [\"input\"],\n    gasLimit: [\"gas\"]\n  })(value);\n  // If to and creates are empty, populate the creates from the value\n  if (result.to == null && result.creates == null) {\n    result.creates = getCreateAddress(result);\n  }\n  // @TODO: Check fee data\n  // Add an access list to supported transaction types\n  if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n    result.accessList = [];\n  }\n  // Compute the signature\n  if (value.signature) {\n    result.signature = Signature.from(value.signature);\n  } else {\n    result.signature = Signature.from(value);\n  }\n  // Some backends omit ChainId on legacy transactions, but we can compute it\n  if (result.chainId == null) {\n    const chainId = result.signature.legacyChainId;\n    if (chainId != null) {\n      result.chainId = chainId;\n    }\n  }\n  // @TODO: check chainID\n  /*\n  if (value.chainId != null) {\n      let chainId = value.chainId;\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       result.chainId = chainId;\n   } else {\n      let chainId = value.networkId;\n       // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n          chainId = value.chainId;\n      }\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       if (typeof(chainId) !== \"number\" && result.v != null) {\n          chainId = (result.v - 35) / 2;\n          if (chainId < 0) { chainId = 0; }\n          chainId = parseInt(chainId);\n      }\n       if (typeof(chainId) !== \"number\") { chainId = 0; }\n       result.chainId = chainId;\n  }\n  */\n  // 0x0000... should actually be null\n  if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n    result.blockHash = null;\n  }\n  return result;\n}","map":{"version":3,"sources":["../../src.ts/providers/format.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, getNumber, hexlify, isHexString, zeroPadValue, assert, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nexport function allowNull(format, nullValue) {\n    return (function (value) {\n        if (value == null) {\n            return nullValue;\n        }\n        return format(value);\n    });\n}\nexport function arrayOf(format) {\n    return ((array) => {\n        if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n        }\n        return array.map((i) => format(i));\n    });\n}\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format, altNames) {\n    return ((value) => {\n        const result = {};\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) {\n                    result[key] = nv;\n                }\n            }\n            catch (error) {\n                const message = (error instanceof Error) ? error.message : \"not-an-error\";\n                assert(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", { value });\n            }\n        }\n        return result;\n    });\n}\nexport function formatBoolean(value) {\n    switch (value) {\n        case true:\n        case \"true\":\n            return true;\n        case false:\n        case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexport function formatData(value) {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\nexport function formatHash(value) {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\nexport function formatUint256(value) {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [\"logIndex\"]\n});\nexport function formatLog(value) {\n    return _formatLog(value);\n}\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    number: getNumber,\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n    miner: allowNull(getAddress),\n    extraData: formatData,\n    baseFeePerGas: allowNull(getBigInt)\n});\nexport function formatBlock(value) {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx) => {\n        if (typeof (tx) === \"string\") {\n            return tx;\n        }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [\"logIndex\"]\n});\nexport function formatReceiptLog(value) {\n    return _formatReceiptLog(value);\n}\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [\"gasPrice\"],\n    hash: [\"transactionHash\"],\n    index: [\"transactionIndex\"],\n});\nexport function formatTransactionReceipt(value) {\n    return _formatTransactionReceipt(value);\n}\nexport function formatTransactionResponse(value) {\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    const result = object({\n        hash: formatHash,\n        type: (value) => {\n            if (value === \"0x\" || value == null) {\n                return 0;\n            }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n        //confirmations: allowNull(getNumber, null),\n        from: getAddress,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n        creates: allowNull(getAddress, null),\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [\"input\"],\n        gasLimit: [\"gas\"]\n    })(value);\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n    // @TODO: Check fee data\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [];\n    }\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    }\n    else {\n        result.signature = Signature.from(value);\n    }\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) {\n            result.chainId = chainId;\n        }\n    }\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n    return result;\n}\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"module"}