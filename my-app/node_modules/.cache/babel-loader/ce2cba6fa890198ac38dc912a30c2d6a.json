{"ast":null,"code":"import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n  /**\n   *  The Signer being managed.\n   */\n  signer;\n  #noncePromise;\n  #delta;\n  /**\n   *  Creates a new **NonceManager** to manage %%signer%%.\n   */\n  constructor(signer) {\n    super(signer.provider);\n    defineProperties(this, {\n      signer\n    });\n    this.#noncePromise = null;\n    this.#delta = 0;\n  }\n  async getAddress() {\n    return this.signer.getAddress();\n  }\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n  async getNonce(blockTag) {\n    if (blockTag === \"pending\") {\n      if (this.#noncePromise == null) {\n        this.#noncePromise = super.getNonce(\"pending\");\n      }\n      const delta = this.#delta;\n      return (await this.#noncePromise) + delta;\n    }\n    return super.getNonce(blockTag);\n  }\n  /**\n   *  Manually increment the nonce. This may be useful when managng\n   *  offline transactions.\n   */\n  increment() {\n    this.#delta++;\n  }\n  /**\n   *  Resets the nonce, causing the **NonceManager** to reload the current\n   *  nonce from the blockchain on the next transaction.\n   */\n  reset() {\n    this.#delta = 0;\n    this.#noncePromise = null;\n  }\n  async sendTransaction(tx) {\n    const noncePromise = this.getNonce(\"pending\");\n    this.increment();\n    tx = await this.signer.populateTransaction(tx);\n    tx.nonce = await noncePromise;\n    // @TODO: Maybe handle interesting/recoverable errors?\n    // Like don't increment if the tx was certainly not sent\n    return await this.signer.sendTransaction(tx);\n  }\n  signTransaction(tx) {\n    return this.signer.signTransaction(tx);\n  }\n  signMessage(message) {\n    return this.signer.signMessage(message);\n  }\n  signTypedData(domain, types, value) {\n    return this.signer.signTypedData(domain, types, value);\n  }\n}","map":{"version":3,"sources":["../../src.ts/providers/signer-noncemanager.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAgB,QAAQ,mBAAmB;AACpD,SAAS,cAAc,QAAQ,sBAAsB;AAUrD;;;;AAIG;AACH,OAAM,MAAO,YAAa,SAAQ,cAAc,CAAA;EAC5C;;AAEG;EACH,MAAM;EAEN,CAAA,YAAa;EACb,CAAA,KAAM;EAEN;;AAEG;EACH,WAAA,CAAY,MAAc,EAAA;IACtB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;IACtB,gBAAgB,CAAe,IAAI,EAAE;MAAE;IAAM,CAAE,CAAC;IAEhD,IAAI,CAAC,CAAA,YAAa,GAAG,IAAI;IACzB,IAAI,CAAC,CAAA,KAAM,GAAG,CAAC;EACnB;EAEA,MAAM,UAAU,CAAA,EAAA;IACZ,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAA,CAAE;EACnC;EAEA,OAAO,CAAC,QAAyB,EAAA;IAC7B,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;EAC1D;EAEA,MAAM,QAAQ,CAAC,QAAmB,EAAA;IAC9B,IAAI,QAAQ,KAAK,SAAS,EAAE;MACxB,IAAI,IAAI,CAAC,CAAA,YAAa,IAAI,IAAI,EAAE;QAC5B,IAAI,CAAC,CAAA,YAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC;MACjD;MAED,MAAM,KAAK,GAAG,IAAI,CAAC,CAAA,KAAM;MACzB,OAAO,CAAC,MAAM,IAAI,CAAC,CAAA,YAAa,IAAI,KAAK;IAC5C;IAED,OAAO,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;EACnC;EAEA;;;AAGG;EACH,SAAS,CAAA,EAAA;IACL,IAAI,CAAC,CAAA,KAAM,EAAE;EACjB;EAEA;;;AAGG;EACH,KAAK,CAAA,EAAA;IACD,IAAI,CAAC,CAAA,KAAM,GAAG,CAAC;IACf,IAAI,CAAC,CAAA,YAAa,GAAG,IAAI;EAC7B;EAEA,MAAM,eAAe,CAAC,EAAsB,EAAA;IACxC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;IAC7C,IAAI,CAAC,SAAS,CAAA,CAAE;IAEhB,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC;IAC9C,EAAE,CAAC,KAAK,GAAG,MAAM,YAAY;IAE7B;IACA;IACA,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC;EAChD;EAEA,eAAe,CAAC,EAAsB,EAAA;IAClC,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC;EAC1C;EAEA,WAAW,CAAC,OAA4B,EAAA;IACpC,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;EAC3C;EAEA,aAAa,CAAC,MAAuB,EAAE,KAA4C,EAAE,KAA0B,EAAA;IAC3G,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;EAC1D;AACH","sourceRoot":"","sourcesContent":["import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n    /**\n     *  The Signer being managed.\n     */\n    signer;\n    #noncePromise;\n    #delta;\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */\n    constructor(signer) {\n        super(signer.provider);\n        defineProperties(this, { signer });\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n    async getAddress() {\n        return this.signer.getAddress();\n    }\n    connect(provider) {\n        return new NonceManager(this.signer.connect(provider));\n    }\n    async getNonce(blockTag) {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n            const delta = this.#delta;\n            return (await this.#noncePromise) + delta;\n        }\n        return super.getNonce(blockTag);\n    }\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */\n    increment() {\n        this.#delta++;\n    }\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */\n    reset() {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n    async sendTransaction(tx) {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n    signTransaction(tx) {\n        return this.signer.signTransaction(tx);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n    signTypedData(domain, types, value) {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\n//# sourceMappingURL=signer-noncemanager.js.map"]},"metadata":{},"sourceType":"module"}