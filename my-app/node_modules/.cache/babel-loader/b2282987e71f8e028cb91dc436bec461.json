{"ast":null,"code":"// Cipher Block Chaining\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CBC_iv, _CBC_lastBlock;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CBC extends ModeOfOperation {\n  constructor(key, iv) {\n    super(\"ECC\", key, CBC);\n    _CBC_iv.set(this, void 0);\n    _CBC_lastBlock.set(this, void 0);\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n      __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n    }\n    __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n  }\n  get iv() {\n    return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\"));\n  }\n  encrypt(plaintext) {\n    if (plaintext.length % 16) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n    }\n    const ciphertext = new Uint8Array(plaintext.length);\n    for (let i = 0; i < plaintext.length; i += 16) {\n      for (let j = 0; j < 16; j++) {\n        __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n      }\n      __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n      ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n    }\n    return ciphertext;\n  }\n  decrypt(ciphertext) {\n    if (ciphertext.length % 16) {\n      throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n    }\n    const plaintext = new Uint8Array(ciphertext.length);\n    for (let i = 0; i < ciphertext.length; i += 16) {\n      const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n      for (let j = 0; j < 16; j++) {\n        plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n        __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n      }\n    }\n    return plaintext;\n  }\n}\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();","map":{"version":3,"sources":["../src.ts/mode-cbc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Cipher Block Chaining\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CBC_iv, _CBC_lastBlock;\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CBC extends ModeOfOperation {\n    constructor(key, iv) {\n        super(\"ECC\", key, CBC);\n        _CBC_iv.set(this, void 0);\n        _CBC_lastBlock.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n        }\n        else {\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n    }\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\")); }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext.length);\n        for (let i = 0; i < plaintext.length; i += 16) {\n            for (let j = 0; j < 16; j++) {\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n            }\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(ciphertext.length);\n        for (let i = 0; i < ciphertext.length; i += 16) {\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n            for (let j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n            }\n        }\n        return plaintext;\n    }\n}\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();\n//# sourceMappingURL=mode-cbc.js.map"]},"metadata":{},"sourceType":"module"}