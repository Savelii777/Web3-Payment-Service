{"ast":null,"code":"import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n  /**\n   *  The wallet address.\n   */\n  address;\n  #signingKey;\n  /**\n   *  Creates a new BaseWallet for %%privateKey%%, optionally\n   *  connected to %%provider%%.\n   *\n   *  If %%provider%% is not specified, only offline methods can\n   *  be used.\n   */\n  constructor(privateKey, provider) {\n    super(provider);\n    assertArgument(privateKey && typeof privateKey.sign === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n    this.#signingKey = privateKey;\n    const address = computeAddress(this.signingKey.publicKey);\n    defineProperties(this, {\n      address\n    });\n  }\n  // Store private values behind getters to reduce visibility\n  // in console.log\n  /**\n   *  The [[SigningKey]] used for signing payloads.\n   */\n  get signingKey() {\n    return this.#signingKey;\n  }\n  /**\n   *  The private key for this wallet.\n   */\n  get privateKey() {\n    return this.signingKey.privateKey;\n  }\n  async getAddress() {\n    return this.address;\n  }\n  connect(provider) {\n    return new BaseWallet(this.#signingKey, provider);\n  }\n  async signTransaction(tx) {\n    // Replace any Addressable or ENS name with an address\n    const {\n      to,\n      from\n    } = await resolveProperties({\n      to: tx.to ? resolveAddress(tx.to, this.provider) : undefined,\n      from: tx.from ? resolveAddress(tx.from, this.provider) : undefined\n    });\n    if (to != null) {\n      tx.to = to;\n    }\n    if (from != null) {\n      tx.from = from;\n    }\n    if (tx.from != null) {\n      assertArgument(getAddress(tx.from) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n      delete tx.from;\n    }\n    // Build the transaction\n    const btx = Transaction.from(tx);\n    btx.signature = this.signingKey.sign(btx.unsignedHash);\n    return btx.serialized;\n  }\n  async signMessage(message) {\n    return this.signMessageSync(message);\n  }\n  // @TODO: Add a secialized signTx and signTyped sync that enforces\n  // all parameters are known?\n  /**\n   *  Returns the signature for %%message%% signed with this wallet.\n   */\n  signMessageSync(message) {\n    return this.signingKey.sign(hashMessage(message)).serialized;\n  }\n  async signTypedData(domain, types, value) {\n    // Populate any ENS names\n    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async name => {\n      // @TODO: this should use resolveName; addresses don't\n      //        need a provider\n      assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"resolveName\",\n        info: {\n          name\n        }\n      });\n      const address = await this.provider.resolveName(name);\n      assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n        value: name\n      });\n      return address;\n    });\n    return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n  }\n}","map":{"version":3,"sources":["../../src.ts/wallet/base-wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n    /**\n     *  The wallet address.\n     */\n    address;\n    #signingKey;\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */\n    constructor(privateKey, provider) {\n        super(provider);\n        assertArgument(privateKey && typeof (privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n        this.#signingKey = privateKey;\n        const address = computeAddress(this.signingKey.publicKey);\n        defineProperties(this, { address });\n    }\n    // Store private values behind getters to reduce visibility\n    // in console.log\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */\n    get signingKey() { return this.#signingKey; }\n    /**\n     *  The private key for this wallet.\n     */\n    get privateKey() { return this.signingKey.privateKey; }\n    async getAddress() { return this.address; }\n    connect(provider) {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n    async signTransaction(tx) {\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await resolveProperties({\n            to: (tx.to ? resolveAddress(tx.to, this.provider) : undefined),\n            from: (tx.from ? resolveAddress(tx.from, this.provider) : undefined)\n        });\n        if (to != null) {\n            tx.to = to;\n        }\n        if (from != null) {\n            tx.from = from;\n        }\n        if (tx.from != null) {\n            assertArgument(getAddress((tx.from)) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n        // Build the transaction\n        const btx = Transaction.from(tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n        return btx.serialized;\n    }\n    async signMessage(message) {\n        return this.signMessageSync(message);\n    }\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n    signMessageSync(message) {\n        return this.signingKey.sign(hashMessage(message)).serialized;\n    }\n    async signTypedData(domain, types, value) {\n        // Populate any ENS names\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: { name }\n            });\n            const address = await this.provider.resolveName(name);\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n            return address;\n        });\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\n//# sourceMappingURL=base-wallet.js.map"]},"metadata":{},"sourceType":"module"}