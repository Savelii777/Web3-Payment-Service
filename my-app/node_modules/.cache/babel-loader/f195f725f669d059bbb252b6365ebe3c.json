{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/home/savelii/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Web3-Login/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nvar _data = /*#__PURE__*/new WeakMap();\nvar _checksum = /*#__PURE__*/new WeakMap();\nvar _words = /*#__PURE__*/new WeakMap();\nvar _loadWords = /*#__PURE__*/new WeakSet();\nexport class WordlistOwl extends Wordlist {\n  /**\n   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n   *  and validated against the %%checksum%%.\n   */\n  constructor(locale, data, _checksum2) {\n    super(locale);\n    _classPrivateMethodInitSpec(this, _loadWords);\n    _classPrivateFieldInitSpec(this, _data, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _checksum, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _words, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _data, data);\n    _classPrivateFieldSet(this, _checksum, _checksum2);\n    _classPrivateFieldSet(this, _words, null);\n  }\n  /**\n   *  The OWL-encoded data.\n   */\n  get _data() {\n    return _classPrivateFieldGet(this, _data);\n  }\n  /**\n   *  Decode all the words for the wordlist.\n   */\n  _decodeWords() {\n    return decodeOwl(_classPrivateFieldGet(this, _data));\n  }\n  getWord(index) {\n    const words = _classPrivateMethodGet(this, _loadWords, _loadWords2).call(this);\n    assertArgument(index >= 0 && index < words.length, \"invalid word index: \".concat(index), \"index\", index);\n    return words[index];\n  }\n  getWordIndex(word) {\n    return _classPrivateMethodGet(this, _loadWords, _loadWords2).call(this).indexOf(word);\n  }\n}\nfunction _loadWords2() {\n  if (_classPrivateFieldGet(this, _words) == null) {\n    const words = this._decodeWords();\n    // Verify the computed list matches the official list\n    const checksum = id(words.join(\"\\n\") + \"\\n\");\n    /* c8 ignore start */\n    if (checksum !== _classPrivateFieldGet(this, _checksum)) {\n      throw new Error(\"BIP39 Wordlist for \".concat(this.locale, \" FAILED\"));\n    }\n    /* c8 ignore stop */\n    _classPrivateFieldSet(this, _words, words);\n  }\n  return _classPrivateFieldGet(this, _words);\n}","map":{"version":3,"sources":["../../src.ts/wordlists/wordlist-owl.ts"],"names":[],"mappings":";;;;;AACA;AACA;AAEA,SAAS,EAAE,QAAQ,kBAAkB;AACrC,SAAS,cAAc,QAAQ,mBAAmB;AAElD,SAAS,SAAS,QAAQ,iBAAiB;AAC3C,SAAS,QAAQ,QAAQ,eAAe;AAExC;;;;;;;;;;;AAWG;AAXH,IAAA,KAAA,oBAAA,OAAA;AAAA,IAAA,SAAA,oBAAA,OAAA;AAAA,IAAA,MAAA,oBAAA,OAAA;AAAA,IAAA,UAAA,oBAAA,OAAA;AAYA,OAAM,MAAO,WAAY,SAAQ,QAAQ,CAAA;EAIrC;;;AAGG;EACH,WAAA,CAAY,MAAc,EAAE,IAAY,EAAE,UAAgB,EAAA;IACtD,KAAK,CAAC,MAAM,CAAC;IAAC,2BAAA,OAAA,UAAA;IAAA,0BAAA,OAAA,KAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,SAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,MAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IACd,qBAAA,KAAI,EAAA,KAAA,EAAS,IAAI;IACjB,qBAAA,KAAI,EAAA,SAAA,EAAa,UAAQ;IACzB,qBAAA,KAAI,EAAA,MAAA,EAAU,IAAI;EACtB;EAEA;;AAEG;EACH,IAAI,KAAK,CAAA,EAAA;IAAa,OAAA,qBAAA,CAAO,IAAI,EAAA,KAAA;EAAQ;EAEzC;;AAEG;EACH,YAAY,CAAA,EAAA;IACR,OAAO,SAAS,CAAA,qBAAA,CAAC,IAAI,EAAA,KAAA,CAAM,CAAC;EAChC;EAoBA,OAAO,CAAC,KAAa,EAAA;IACjB,MAAM,KAAK,GAAA,sBAAA,CAAG,IAAI,EAAA,UAAA,EAAA,WAAA,EAAA,IAAA,CAAJ,IAAI,CAAa;IAC/B,cAAc,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,yBAAA,MAAA,CAA0B,KAAM,GAAI,OAAO,EAAE,KAAK,CAAC;IACpG,OAAO,KAAK,CAAC,KAAK,CAAC;EACvB;EAEA,YAAY,CAAC,IAAY,EAAA;IACrB,OAAO,sBAAA,KAAI,EAAA,UAAA,EAAA,WAAA,EAAA,IAAA,CAAJ,IAAI,EAAc,OAAO,CAAC,IAAI,CAAC;EAC1C;;AACH,SAAA,YAAA,EA1Ba;EACN,IAAI,qBAAA,KAAI,EAAA,MAAA,KAAW,IAAI,EAAE;IACrB,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAA,CAAE;IAEjC;IACA,MAAM,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAC5C;IACA,IAAI,QAAQ,KAAA,qBAAA,CAAK,IAAI,EAAA,SAAA,CAAU,EAAE;MAC7B,MAAM,IAAI,KAAK,uBAAA,MAAA,CAAwB,IAAI,CAAC,MAAO,YAAS,CAAC;IAChE;IACD;IAEA,qBAAA,KAAI,EAAA,MAAA,EAAU,KAAK;EACtB;EACD,OAAA,qBAAA,CAAO,IAAI,EAAA,MAAA;AACf","sourceRoot":"","sourcesContent":["// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n    #data;\n    #checksum;\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */\n    constructor(locale, data, checksum) {\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n    /**\n     *  The OWL-encoded data.\n     */\n    get _data() { return this.#data; }\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords() {\n        return decodeOwl(this.#data);\n    }\n    #words;\n    #loadWords() {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n            // Verify the computed list matches the official list\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */\n            if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n            }\n            /* c8 ignore stop */\n            this.#words = words;\n        }\n        return this.#words;\n    }\n    getWord(index) {\n        const words = this.#loadWords();\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return this.#loadWords().indexOf(word);\n    }\n}\n//# sourceMappingURL=wordlist-owl.js.map"]},"metadata":{},"sourceType":"module"}